<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://www.paulfioravanti.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://www.paulfioravanti.com/" rel="alternate" type="text/html"/><updated>2024-03-11T09:23:18+11:00</updated><id>https://www.paulfioravanti.com/feed.xml</id><title type="html">Floor and Varnish</title><subtitle>The permanent drafts folder for brain dumps of Paul Fioravanti</subtitle><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><entry><title type="html">3.11</title><link href="https://www.paulfioravanti.com/blog/3-11/" rel="alternate" type="text/html" title="3.11"/><published>2024-03-11T09:15:00+11:00</published><updated>2024-03-11T09:15:00+11:00</updated><id>https://www.paulfioravanti.com/blog/3-11</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/3-11/"><![CDATA[<div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2024-03-11/f4tLl.jpg" alt="HOLY FUCKING SHIT!! Easily the biggest quake I've ever experienced, and first time I've rushed out of a high rise down the emergency stairs! That building was seriously swaying!"/> <figcaption> Posted on Facebook, <a href="https://www.facebook.com/paul.fioravanti/posts/pfbid02FdbEe6yhfXMnfuRCz3FVK1xs4EQsQcfNPZsU9MPXz6wXMVEM9qaErLz1dN2Mf4tLl"> March 11, 2011 14:57 JST </a> </figcaption> </figure> </div> <p>On this day in 2011, I was leaving my office in <a href="https://en.wikipedia.org/wiki/Y%C5%ABrakuch%C5%8D">Yūrakuchō</a>, Tokyo, for a dreaded afternoon meeting with a big <a href="https://en.wikipedia.org/wiki/Systems_integrator">systems integrator</a> company. As I walked past the reception desk in the lobby and towards the elevators, I glanced up at a TV screen and saw a map of Japan with a big red <span style="color: red; font-weight: bold;">X</span> to its northeast.</p> <div class="centered-image" style="width: 60%"> <figure> <img src="/assets/images/2024-03-11/Shindomap_2011-03-11_Tohoku_earthquake.png" alt="Shake map showing distribution of maximum JMA Seismic Intensities by-prefecture for the 11 March 2011"/> </figure> </div> <p>Anyone who has lived in Japan is intimately familiar with these images. They are broadcast every time a “significant” quake occurs, but hardly anyone blinks due to complete confidence in modern building construction codes. You enjoy (or ignore) the rumble when it arrives, and then continue on with your day without giving it a second thought.</p> <p>A couple of seconds later, though, this particular <span style="color: red; font-weight: bold;">X</span> made its presence known. No rocking cradles or light shivers this time: the violent shaking literally knocked everyone off their feet, with people screaming in terror as we grasped for walls in futile attempts to balance ourselves. The huge building I was in suddenly did not feel so stable; I honestly thought it would topple over, flinging me through the huge office kitchen windows, and out over the tracks of Yūrakuchō station.</p> <p>Fortunately, those construction codes held up, and after a few of the most intense minutes of my life, the still upright building’s emergency systems kicked into gear. Elevators were disabled, so we hurriedly descended down the stairs from the twelfth floor in hopes of getting to ground before any potential aftershocks hit.</p> <p>The streets were full of calm but confused people. Mobile phone networks were jammed, leading to massive, but orderly, queues outside public phone booths. <a href="https://en.wikipedia.org/wiki/3G">3G</a> internet was still usable, though, so social media (<a href="https://www.facebook.com/">Facebook</a> only for me at the time) became the only usable method for real-time communication.</p> <p>After confirming our colleagues were out of the building, we all agreed that work time was over, and we should make sure our homes and loved ones were safe. So, at least I got out of attending that wretched meeting…</p> <p>However, trains had stopped, bus stop queues were longer than those for phone booths, and roads were at a complete standstill. All normal traffic rules had been disregarded, as streets became pedestrian footpaths, and I merged in with them for my long walk home across Tokyo.</p> <p>As I passed <a href="https://en.wikipedia.org/wiki/Shimbashi_Station">Shimbashi Station</a>, I joined a huge crowd of people that had gathered around a big TV screen broadcasting the news, and could not believe what I was seeing.</p> <div class="centered-image" style="width: 90%"> <figure> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/onEGcBBz6VQ?start=12" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Footage of crowds at Shimbashi Station, soon after the earthquake </figcaption> </figure> </div> <p>The images of a <em><a href="https://en.wikipedia.org/wiki/2011_T%C5%8Dhoku_earthquake_and_tsunami#Tsunami">tsunami</a></em> barreling through rural northern Japan and annihilating everything in its path felt surreal. It took a moment to process that this was indeed reality, and not a scene from <em><a href="https://en.wikipedia.org/wiki/Deep_Impact_(film)">Deep Impact</a></em> or <em><a href="https://en.wikipedia.org/wiki/The_Day_After_Tomorrow">The Day After Tomorrow</a></em>. After a few minutes, I snapped out of my stupor, picked my jaw up off the ground, and continued walking.</p> <p>My partner, Naoko, was out with friends for the day, and did not use newfangled social media, so getting in direct contact with her was not possible. After a couple hours walk, I managed to find a lonely public phone without a queue, and called her mother on the other side of the country. If Nao reached out there, I wanted her to know that I was safe, and that we should just try and meet back at our apartment.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2024-03-11/VZPbl.jpg" alt="Just finished legging it to Shibuya from Yurakucho. The place is completely wall to wall people; more than I've ever seen. Bus stops have Disneyland-ride-long queues. Looks like I'm legging it the rest of the way home."/> <figcaption> <a href="https://www.facebook.com/paul.fioravanti/posts/pfbid0b9fUGBTeaQ9VkW1o5vZyohxt92QaLdgEe7xwQhhXgcHNyu3LEKMWhZTXFh8dVZPbl"> March 11, 2011 18:43 JST </a> </figcaption> </figure> </div> <p>We had not planned for a natural disaster scenario of this magnitude, and hence did not have emergency kits or food rations on-hand. I wagered we had enough supplies to last us a week (maybe…? I had never had to judge that before…), but just to make sure, I stopped by several convenience stores and supermarkets, only to be greeted by rows of empty shelves. The city had already been cleaned out.</p> <div class="centered-image" style="width: 80%"> <figure> <img src="/assets/images/2024-03-11/Japan_earthquake_store_shelves.jpg" alt="Empty instant noodle shelves in a supermarket in Tokyo due to logistic stack and buyout on 16 March 2011, 5 days after the 2011 Sendai earthquake"/> <figcaption> <a href="https://commons.wikimedia.org/wiki/File:Japan_earthquake_store_shelves.jpg"> Kellykaneshiro </a>, CC0, via Wikimedia Commons </figcaption> </figure> </div> <p>I arrived home to discover my bicycle discarded in the park opposite. Someone had tried to steal it (first time ever), but the cheap lock had been enough security to move them on. Given the circumstances, I would not have minded if they succeeded.</p> <p>My apartment building was still standing, and inside, no damage at all. All I could do now was wait: wait for the phone network to come back online, wait for Nao to get home, wait for news about what was going on…</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2024-03-11/WPVJl.jpg" alt="Just finished walking home. A few things fell off shelves, but no apartment damage. Just waiting for Nao to make the trek home."/> <figcaption> <a href="https://www.facebook.com/paul.fioravanti/posts/pfbid0PK4Sa1SZv3gqYRwgiNtMYBKLYMYYag8g1XsRe6SGTYZVQmxA6ao6tbhT9W9gWPVJl"> March 11, 2011 20:46 JST </a> </figcaption> </figure> </div> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2024-03-11/cPqdl.jpg" alt="Just got in contact with Nao *by phone* and confirmed she's alright, and she'll be bringing back some friends who don't live in Tokyo to stay the night. So, anyone who needs to contact loved ones, you should be able to try by mobile phone now."/> <figcaption> <a href="https://www.facebook.com/paul.fioravanti/posts/pfbid0f5uwkzVihx3FZj1HwvC8XqJRjCRsbfpti8aeHMqoMLhvKTnXkvXBzyon3fgucPqdl"> March 11, 2011 21:27 JST </a> </figcaption> </figure> </div> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2024-03-11/j97Sl.jpg" alt="Nao's back safe and sound with a friend, so now it's just riding out the many aftershocks and being freaked out by what I'm seeing on the news..."/> <figcaption> <a href="https://www.facebook.com/paul.fioravanti/posts/pfbid0WPgyv3FAaosT9xN3nqTxKgwEQzqGmTHhjsMoFeFf85ZWxou9nkjHWmEsk8LBj97Sl"> March 12, 2011 00:43 JST </a> </figcaption> </figure> </div> <p>The next couple of days were punctuated by constant aftershocks. The haunting chimes from the <a href="https://en.wikipedia.org/wiki/Earthquake_Early_Warning_(Japan)">Earthquake Early Warning</a> system gave us a few seconds notice to brace ourselves before another round of ground turbulence. It would have been a luxury if another huge earthquake was the only thing we had to worry about, but all the news about <a href="https://en.wikipedia.org/wiki/Fukushima_nuclear_accident">problems at nuclear power plants</a> had us anxious about whether we were actually witnessing the literal end of Japan.</p> <div class="centered-image" style="width: 90%"> <figure> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/NWSIQgpCdyE?start=12" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> The chimes of incoming doom </figcaption> </figure> </div> <p>At the very least, the possibility we would have to flee from Tokyo felt very real, so we packed some bags full of basic necessities, and left them by our front door, ready to go should we need to leave quickly.</p> <p>When images of <a href="https://en.wikipedia.org/wiki/Fukushima_Daiichi_Nuclear_Power_Plant">Fukushima Daiichi</a>’s <a href="https://en.wikipedia.org/wiki/Fukushima_Daiichi_nuclear_disaster_(Unit_3_Reactor)#Explosion">Unit 3 Reactor hydrogen explosion</a> flashed across our screen on the afternoon of March 14, we felt the overwhelming need to go. It was too late to get on a <em><a href="https://en.wikipedia.org/wiki/Shinkansen">shinkansen</a></em>, so we left first thing in the morning to just head west, and away from it all.</p> <div class="centered-image" style="width: 90%"> <figure> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/9H5JsggHHoI?start=39" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Footage of Unit 3 Reactor's hydrogen explosion </figcaption> </figure> </div> <p>The strangest thing about going to the station and catching a train was just how normal it felt. A literal explosion occurred at a nuclear power plant just hours before, and there were <em>not</em> hordes of people cramming the carriages to get out of the city. Were we overreacting…?</p> <p>The air of calm certainly gave me some pause, but if the situation got worse to the point of everyone in Tokyo/eastern Japan <a href="https://www.voanews.com/a/leaked-japanese-report-details-worst-case-nuclear-scenario---138048973/151109.html">actually needing to evacuate</a>, a scenario that seemed less far-fetched with every passing moment, I felt we would not get a second chance at such a smooth run out of the city.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2024-03-11/veYSl.jpg" alt="Naoko and I left Tokyo very early this morning and we are currently at Naoko's family home in Kochi prefecture, a good 700km away from Fukushima. We are both fine."/> <figcaption> <a href="https://www.facebook.com/paul.fioravanti/posts/pfbid02fWp48k356wMUBPfSMnMfkr9nuSwaQGbhEDfKDVaaao98psRoqaW9sfZULVC5veYSl"> March 15, 2011 16:59 JST </a> </figcaption> </figure> </div> <p>Arriving in <a href="https://en.wikipedia.org/wiki/K%C5%8Dchi_Prefecture">Kōchi</a> was like entering a different universe, where the earthquake had not happened, supermarket shelves were still full, and life was peaceful. It was impossible to permanently ignore reality, of course, and we were glued to all media for any morsels of information about the crisis.</p> <p>I recall television just constantly playing strange cartoons, pushed by <a href="https://en.wikipedia.org/wiki/Ad_Council_Japan">Ad Council Japan</a>, that extolled the value of greetings and other Japanese virtues using animal puns, and thinking it to be a strange panic mitigation/population distraction strategy. Oh, you wanted actual news about the current existential threat? Nope, here’s literally that same cartoon again. And again and again.</p> <p>Want to trigger someone who lived through this event? Play them the following video.</p> <div class="centered-image" style="width: 90%"> <figure> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/dIf_Jh5Q6pI" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> These <a href="https://en.wikipedia.org/wiki/Ad_Council_Japan">Ad Council Japan</a> commercials were on infinite loop after the quake. </figcaption> </figure> </div> <p>The next week was mostly a blur, but as it gradually became apparent that the worst case scenario probably would not happen immediately, my employer’s gentle hints about considering getting back to work in the Tokyo office became concrete orders to return. So, we begrudgingly left our rural retreat, hoping for the best.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2024-03-11/8nDNl.jpg" alt="Back in Tokyo with Nao."/> <figcaption> <a href="https://www.facebook.com/paul.fioravanti/posts/pfbid024eTZvWDRiXSdWDxvivTKEumAUkzU8p28mYb5KF7jvnfRMPhrKcLXArUS2RsB8nDNl"> March 23, 2011 21:21 JST </a> </figcaption> </figure> </div> <p>Essentials in the city were still in short supply, as efforts and resources were deservedly redirected to the areas up north directly affected by the disaster. I remember bottled water was impossible to find (and it was uncertain how drinkable Tokyo’s water was), so we had to get it shipped from Kōchi. This worked for a while, until everyone else with family outside Tokyo followed the same strategy, contributing to more supply shortages country-wide. But, obviously, put into perspective, we managed just fine.</p> <p>The earthquakes/aftershocks had not dissipated during the week we were away, and you can bet every warning that flashed up on the screen now got our full attention.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2024-03-11/ntc8l.jpg" alt="What better way to celebrate the one month anniversary of a massive earthquake than with...more huge earthquakes"/> <figcaption> <a href="https://www.facebook.com/paul.fioravanti/posts/pfbid02GfLFx5aL3GcNXfyjU9QYXQfVwW5WzPvPecxEu8qwVsPghDPnp7UEFHdFrLmmntc8l"> April 11, 2011 17:34 JST </a> </figcaption> </figure> </div> <p>We now viscerally understood that although we may have to worry about how to deal with the immediate consequences of a large earthquake, we would also have to consider whether it is also a harbinger of further quakes to come.</p> <p>For example, just two days before the big one hit…</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2024-03-11/PboPl.jpg" alt="First time I've felt such a long earthquake in my office building. Didn't help my nerves that the metal blinds clanging together sounded like a death knoll. Ughh..."/> <figcaption> <a href="https://www.facebook.com/paul.fioravanti/posts/pfbid029zBLzWHNQmstXFk23gHNHnGF3MxwzB1QR6EGLx4QdEXmqG4Ed5d1H1DLsecZPboPl"> March 09, 2011 13:25 JST </a> </figcaption> </figure> </div> <p>Oh, you sweet summer child…you would not believe what’s in store next…</p> <p>Naoko and I ended up leaving Japan permanently at the end of 2011, as we were definitely ready to try something new. But, living through this period certainly instilled in us a newfound respect for the indifferent destructive forces of nature, and the impermanence of physical things.</p> <p>We still love visiting Japan, and go back regularly. But, if we ever end up living there again, we like to think we will be much better prepared for disasters, and certainly provide our full attention to all the inevitable earthquake warnings.</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="japan"/><summary type="html"><![CDATA[Reflections on living through Japan's biggest recorded earthquake.]]></summary></entry><entry><title type="html">Amazon Prime’s Localisation Fail</title><link href="https://www.paulfioravanti.com/blog/amazon-prime-localisation-fail/" rel="alternate" type="text/html" title="Amazon Prime’s Localisation Fail"/><published>2024-02-21T15:30:00+11:00</published><updated>2024-02-29T10:33:00+11:00</updated><id>https://www.paulfioravanti.com/blog/amazon-prime-localisation-fail</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/amazon-prime-localisation-fail/"><![CDATA[<p>During my last trip to Japan, I watched my Japanese sister-in-law flick through her <a href="https://www.primevideo.com/">Amazon Prime</a> account, looking for something to watch.</p> <p>When she opened the page for <a href="https://www.amazon.co.jp/%E3%83%AC%E3%82%B8%E3%82%A7%E3%83%B3%E3%83%89%EF%BC%86%E3%83%90%E3%82%BF%E3%83%95%E3%83%A9%E3%82%A4-%E6%9C%A8%E6%9D%91%E6%8B%93%E5%93%89/dp/B0B78FFCPQ/ref=sr_1_1">THE LEGEND &amp; BUTTERFLY</a>, I commented that it looks like Amazon has a localisation problem:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2024-02-21/legend-and-butterfly-jp.jpg" alt="THE LEGEND &amp; BUTTERFLY Japanese page on Amazon Prime"/> </figure> </div> <p>She looked puzzled and was not sure what I meant. If you are a Japanese speaker, can you see something that does not seem quite right?</p> <p>Let’s see the English version as well, because it has the same problem:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2024-02-21/legend-and-butterfly-en.jpg" alt="THE LEGEND &amp; BUTTERFLY English page on Amazon Prime"/> </figure> </div> <p>The context here is that we are physically in Japan, using Amazon Prime’s Japanese site, to view information about a Japanese-language movie that was made in Japan, with a Japanese cast…</p> <p>…And yet, the film is tagged as being “International” (or, more blatantly, a “foreign film”, as per “外国映画” [<em>gaikoku eiga</em>], the Japanese translation of the tag<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>).</p> <p>No, Amazon, it is not an international film. From where we were sitting, it is about as local as you can get.</p> <p>So, what is Amazon’s definition of “international” media? I am wagering you can already guess, but let’s go through the motions and do some searching anyway, for science!</p> <p>Let’s start in the immediate area from Japan with Korean drama <a href="https://www.primevideo.com/detail/0ST2GP2VV9J9AKW7YJ6PZ67UYN/ref=atv_sr_fle_c_Tn74RA_1_1_1?sr=1-1&amp;pageTypeIdSource=ASIN&amp;pageTypeId=B0CPS4KSVD&amp;qid=1708476755572">Death’s Game</a>:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2024-02-21/deaths-game-en.jpg" alt="Death's Game English page on Amazon Prime"/> </figure> </div> <p>Looks like we are still in international waters. Let’s assume that Asia is out, and head to Europe: is Italian comedy series <a href="https://www.primevideo.com/detail/0NBEE3BVEWF1TD5S3RWG7YZU6G/ref=atv_sr_fle_c_Tn74RA_150_1_15?sr=1-150&amp;pageTypeIdSource=ASIN&amp;pageTypeId=B0B7B8FXTM&amp;qid=1708464438334">LOL: Chi ride è fuori</a> international?</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2024-02-21/chi-ride-e-fuori-en.jpg" alt="LOL: Chi ride è fuori English page on Amazon Prime"/> </figure> </div> <p>Sure is. Maybe Amazon thinks “international” means “language”…? Let’s try some English only titles. What does it say about long running Australian soap opera <a href="https://www.primevideo.com/detail/0PPB4R1FZPBYP1YDKVPMEZWY6I/ref=atv_sr_fle_c_Tn74RA_44_1_4?sr=1-44&amp;pageTypeIdSource=ASIN&amp;pageTypeId=B0CNHD2151&amp;qid=1708413437319">Neighbours</a>?</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2024-02-21/neighbours-en.jpg" alt="Neighbours English page on Amazon Prime"/> </figure> </div> <p>Hmm…well, I guess Aussies can be hard to understand with our strange accents. Maybe Amazon means some English accents are international, and some not…? How about something from the United Kingdom, birthplace of English and home of <a href="https://en.wikipedia.org/wiki/Received_Pronunciation">Received Pronunciation</a>? Let’s look at <a href="https://www.primevideo.com/detail/0GK7T3DSVUUE41B9Q1V4U78D21/ref=atv_sr_fle_c_Tn74RA_29_1_29?sr=1-29&amp;pageTypeIdSource=ASIN&amp;pageTypeId=B0CQFYZZHN&amp;qid=1708413394729">Father Brown</a>:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2024-02-21/father-brown-en.jpg" alt="Father Brown English page on Amazon Prime"/> </figure> </div> <p>*Gasp*! A show using the most English of Englishes is <em>still</em> considered to be “international”? How can this be…?</p> <p>To the surprise of no one, I am sure, no media on Amazon Prime originating from the United States (at least that I have been able to find) is tagged as being “international”. This can be seen as a codification of Amazon’s identity as a US company: everything from the United States is “local” and everything from outside the United States is “international”. Amazon may currently operate on a global scale, but true to its origins, it still seems to keep that US-centric viewpoint, and that is reflected in its systems.</p> <p>This is not necessarily a bad thing in and of itself. I think the issue is when you do this yet also <a href="https://variety.com/2022/global/asia/amazon-prime-video-localization-strategy-asia-latin-america-kelly-day-1235386280/">tout your own localisation efforts publicly</a>:</p> <blockquote> <p>“When we think about launching in a new country, we really want to make sure that we bring a truly local feel to it. So, we’re trying to be very thoughtful when we enter a new region to make sure that we’re not only bringing all of these amazing global series and tentpoles, but that we really do it right, locally.”</p> </blockquote> <p>I would posit that the Prime interface can probably do a bit better on the “truly local feel” aspect. To be fair, though, I did find titles from non-US countries on Amazon Prime that are <em>not</em> specifically tagged with “International”, but there is no way to know whether its absence is intentional, and indicative of some active effort to change.</p> <p>Regardless, I think the solutions are to either:</p> <ul> <li>just remove the “International” tag altogether, because from a global standpoint, it is meaningless. I am sure that in the metadata of each piece of media is its “country of origin” and “spoken language”, and that is probably enough to cover “show me something foreign/different” use cases that viewers may have</li> <li>if it must still exist, have the “International” tag become a kind of virtual tag. Rather than be tied directly to media, relate it to a user and their location/language preferences etc, and only display it when they view content that is different to those preferences</li> </ul> <p>This whole post may be about making a mountain out of a tag-shaped molehill that it seems most people do not notice or care about. But, it goes to show that internationalisation/localisation is hard, and even for huge companies with lots of resources like Amazon, there is always room for improvement.</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>Unfortunately, this Japanese translation itself is inappropriate, since it contains the word “film/movie” in it (“映画”), and the tag is also being applied to media that are not classified as films, like TV series. For artistic works, I would think that “海外作品” (<em>kaigai sakuhin</em>; overseas [artistic] works) is a better fit. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="i18n"/><category term="l10n"/><summary type="html"><![CDATA[Does Prime have an unconscious bias hard coded in its media descriptions?]]></summary></entry><entry><title type="html">Creating Plover Plugins with Python</title><link href="https://www.paulfioravanti.com/blog/creating-plover-plugins-python/" rel="alternate" type="text/html" title="Creating Plover Plugins with Python"/><published>2024-02-04T21:35:00+11:00</published><updated>2024-02-08T15:18:00+11:00</updated><id>https://www.paulfioravanti.com/blog/creating-plover-plugins-python</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/creating-plover-plugins-python/"><![CDATA[<p><a href="https://www.openstenoproject.org/">Plover</a> stenography enables anyone to write text and perform <a href="https://en.wikipedia.org/wiki/Keyboard_shortcut">keyboard shortcuts</a> faster than they could on a traditional keyboard. Its open system architecture also allows you to tap into many of its core functionalities, expanding the possibilities of what you can do with steno, limited only by your imagination!</p> <p>It does this through the use of <a href="https://plover.readthedocs.io/en/latest/plugins.html">plugins</a>, created with <a href="https://www.python.org/">Python</a>, the programming language in which <a href="https://github.com/openstenoproject/plover">Plover itself</a> is written. There are a <a href="https://plover.readthedocs.io/en/latest/plugins.html#types-of-plugins">eight different types of plugins</a> that Plover currently supports, but this post will focus on three specific plugin types that can allow us to use Python to perform some kind of task:</p> <ul> <li><a href="https://plover.readthedocs.io/en/latest/plugin-dev/commands.html">Commands</a> (<em>Our task: open a <a href="https://en.wikipedia.org/wiki/URL">URL</a> in a web browser</em>)</li> <li><a href="https://plover.readthedocs.io/en/latest/plugin-dev/metas.html">Metas</a> (<em>Our task: output a random number between 1 and 10</em>)</li> <li><a href="https://plover.readthedocs.io/en/latest/plugin-dev/extensions.html">Extensions</a> (<em>Our task: output, and keep a <a href="https://en.wikipedia.org/wiki/Cache_(computing)">cache</a> of, values contained in computer <a href="https://en.wikipedia.org/wiki/Environment_variable">environment variables</a></em>)</li> </ul> <p>One of the best things about creating plugins is being able to share them with fellow Plover users, so we will also go through the steps get them to appear inside everyone’s <a href="https://docs.stenokeyboards.com/customize/plover-plugins.html#plugins-manager">Plover Plugin Manager</a>.</p> <p>The final result will be the following codebase: <a href="https://github.com/paulfioravanti/plover-practice-plugin">Plover Practice Plugin</a>.</p> <p>Basically, this post is intended to be the Plover plugin development guide I wish existed when I first started, and hopefully it can be of some reference if you decide to build your own plugins. It is long, and fairly technical in nature, so a basic knowledge of Python or computer programming (or a desire to learn!), is recommended in order to follow along.</p> <h2 id="python-environment">Python Environment</h2> <p>Since we are building something that is meant to run inside Plover’s environment, in order to avoid any unexpected errors during development, we need to make sure the code we write is compatible with it.</p> <p>As of this writing, when you <a href="https://github.com/openstenoproject/plover/releases/latest">download the Plover application</a>, it comes bundled with Python version 3.9<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. Therefore, in order to ensure maximum compatibility with Plover, a good choice would be to set your local Python version to use the latest <a href="https://en.wikipedia.org/wiki/Software_versioning#Semantic_versioning">patch version</a> of Python 3.9, which is currently <a href="https://www.python.org/downloads/release/python-3918/">Python 3.9.18</a><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>.</p> <p>In order to change your Python version, I would recommend installing a <a href="https://github.com/bernardoduarte/awesome-version-managers?tab=readme-ov-file#python">version manager</a>. This will enable you to easily use Plover’s Python version while developing the plugin, but use the latest (or any other) Python version with other projects.</p> <p><a href="https://github.com/pyenv/pyenv">pyenv</a> would seem to be the most popular Python-specific choice, but I personally use <a href="https://github.com/asdf-vm/asdf">asdf</a> (<a href="https://asdf-vm.com/guide/getting-started.html">Getting Started documentation</a>, <a href="https://github.com/asdf-community/asdf-python">Python plugin</a>) as my one version manager to rule all programming languages<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>.</p> <p>When you have chosen, installed, and set up a version manager to work with Python (this may take a bit of time, but you will only do it once, and it is worth doing right), you will be ready to fire up your text editor and move on to some coding.</p> <h2 id="setup-plugin-project">Setup Plugin Project</h2> <p>We are going to create a plugin project called “Plover Practice Plugin”, using the <a href="https://plover.readthedocs.io/en/latest/plugin-dev/setup.html#initial-setup">Initial Setup</a> directions in the official <a href="https://plover.readthedocs.io/en/latest/plugins.html">Plover Plugin Guide</a> as our main reference.</p> <p>Create a directory on your computer called <code class="language-plaintext highlighter-rouge">plover-practice-plugin</code><sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>, and then add the following files underneath it (we will use a <a href="https://plover.readthedocs.io/en/latest/plugin-dev/setup.html#package-based-structure">package-based structure</a> for the files<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>):</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">plover-practice-plugin/
|-- plover_practice_plugin/
|   '-- __init__.py
|-- README.md
|-- setup.cfg
|-- setup.py
</span></code></pre></div></div> <p>The <a href="https://docs.python.org/3/reference/import.html#regular-packages"><code class="language-plaintext highlighter-rouge">__init__.py</code></a> file is blank, but it needs to be present within the <code class="language-plaintext highlighter-rouge">plover_practice_plugin</code> directory so we can use it like a <a href="https://docs.python.org/3/glossary.html#term-regular-package">regular package</a>.</p> <p><code class="language-plaintext highlighter-rouge">README.md</code> is a <a href="https://daringfireball.net/projects/markdown/">Markdown</a> document containing information about the plugin. We will get the Plover Plugin Manager to read in information from here and display it. For now, just give it the bare minimum of a simple heading:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/README.md</code></strong></p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># Plover Practice Plugin</span>
</code></pre></div></div> <p>The <a href="https://setuptools.pypa.io/en/latest/userguide/declarative_config.html"><code class="language-plaintext highlighter-rouge">setup.cfg</code></a> configuration file is used by <a href="https://setuptools.pypa.io/en/latest/index.html">Setuptools</a>, the packaging library that Plover’s plugin system is built on top of. It defines a package’s <a href="https://setuptools.pypa.io/en/latest/userguide/declarative_config.html#metadata">metadata</a>, including external library dependencies (which, in our case, include Plover itself). For now, we will specify just enough for our needs during development:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/setup.cfg</code></strong></p> <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[metadata]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">plover_practice_plugin</span>
<span class="py">description</span> <span class="p">=</span> <span class="s">Plover practice plugin</span>
<span class="py">long_description</span> <span class="p">=</span> <span class="s">file: README.md</span>
<span class="py">long_description_content_type</span> <span class="p">=</span> <span class="s">text/markdown</span>
<span class="py">keywords</span> <span class="p">=</span> <span class="s">plover plover_plugin</span>
<span class="py">version</span> <span class="p">=</span> <span class="s">0.0.1</span>

<span class="nn">[options]</span>
<span class="py">zip_safe</span> <span class="p">=</span> <span class="s">True</span>
<span class="py">install_requires</span> <span class="p">=</span>
    <span class="err">plover&gt;=4.0.0.dev12</span>
<span class="py">setup_requires</span> <span class="p">=</span>
    <span class="err">setuptools&gt;=69.0.0</span>
<span class="py">packages</span> <span class="p">=</span>
    <span class="err">plover_practice_plugin</span>

<span class="nn">[options.entry_points]</span>
</code></pre></div></div> <p>The final heading above refers to Setuptools’ concept of <a href="https://setuptools.pypa.io/en/latest/userguide/entry_point.html">entry points</a>, that “allow a package to open its functionalities for customization via plugins”. Many of Plover’s core functionalities are, themselves, <a href="https://github.com/openstenoproject/plover/blob/53c416fd893d62ab9ede5898129da3be856e910d/setup.cfg#L56">exposed as entry points</a>, and we will hook into them when we develop our own plugin types, and specify entry points for them under the <code class="language-plaintext highlighter-rouge">[options.entry_points]</code> heading.</p> <p>Finally, Plover needs a minimal <a href="https://packaging.python.org/en/latest/glossary/#term-setup.py"><code class="language-plaintext highlighter-rouge">setup.py</code></a> file in order to help read in the configuration we have in <code class="language-plaintext highlighter-rouge">setup.cfg</code>, run Setuptools for us when our plugin is installed, and consequently allow the plugin to be included properly in the Plugins Manager<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup>:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/setup.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span>
<span class="kn">from</span> <span class="n">setuptools</span> <span class="kn">import</span> <span class="n">setup</span>

<span class="nf">setup</span><span class="p">()</span>
</code></pre></div></div> <h3 id="initialise-git-repository">Initialise Git Repository</h3> <p>Initial setup is now complete, so this is probably a good time to put this project under version control with <a href="https://git-scm.com/">Git</a>. Once you have <a href="https://git-scm.com/downloads">installed</a> it, create a <code class="language-plaintext highlighter-rouge">.gitignore</code> file in the project to make sure no Python-generated files, or any other computer cruft, finds its way into your repository:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/.gitignore</code></strong></p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">#</span><span class="w"> </span>Byte-compiled / optimized / DLL files
<span class="go">__pycache__/

</span><span class="gp">#</span><span class="w"> </span>Distribution / packaging
<span class="go">*.egg-info/
build/
dist/

</span><span class="gp">#</span><span class="w"> </span>macOS-specific
<span class="go">.DS_Store

</span><span class="gp">#</span><span class="w"> </span>Language versioning
<span class="go">.tool-versions
</span></code></pre></div></div> <blockquote> <p>Depending on your operating system, there may be other files you may wish to ignore and not track, so feel free to customise this list as needed.</p> </blockquote> <p>Then, run the following commands on your <a href="https://en.wikipedia.org/wiki/Terminal_emulator">terminal</a> of choice (or within your text editor, or however you like to use Git) inside the project directory:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git init
git add .
git commit --message="Initial commit"
</span></code></pre></div></div> <blockquote> <p>Since this code will eventually find its way to <a href="https://github.com/">GitHub</a>, it is definitely worth familarising yourself with some of the core commands of Git itself (if you are not already). Check out the <a href="https://git-scm.com/docs">Git reference documentation</a> when you come across an unfamiliar command.</p> </blockquote> <p>Okay, we are now ready to start coding our first plugin!</p> <h2 id="command-plugin">Command Plugin</h2> <p><a href="https://plover.readthedocs.io/en/latest/plugin-dev/commands.html">Commands</a> are “<a href="https://en.wiktionary.org/wiki/fire_and_forget">fire and forget</a>” functions that do not output any text, nor return any value. They enable you to:</p> <ul> <li>Interact with Plover to perform an action that is not possible, or easily doable, via its user interface<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup></li> <li>Leverage Python to perform some action</li> </ul> <p>We are going to build a command plugin that opens a given <a href="https://en.wikipedia.org/wiki/URL">URL</a> in your default web browser, in the style of the <a href="https://github.com/nsmarkop/plover_open_url">Plover Open URL</a> plugin.</p> <p>In dictionary entries, the command will look like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"{:COMMAND:OPEN_URL:https://www.openstenoproject.org/}"</span><span class="w">
</span></code></pre></div></div> <p>Within curly parentheses, and separated by colons, we define the following:</p> <ul> <li><code class="language-plaintext highlighter-rouge">COMMAND</code> - The keyword that tells Plover the outline is a command<sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">8</a></sup></li> <li><code class="language-plaintext highlighter-rouge">OPEN_URL</code> - The name of the command function to run</li> <li><code class="language-plaintext highlighter-rouge">https://www.openstenoproject.org/</code> - The argument to pass to the command function. In this case, it is the <a href="https://www.openstenoproject.org/">Open Steno Project</a> URL we want to open, but we should be able to give the same command in other dictionary entries any URL we would like</li> </ul> <p>Now we know what the command should look like, we need to tell Plover where to find it when we invoke it. So, let’s add our first entry point to the <code class="language-plaintext highlighter-rouge">setup.cfg</code> file under the <code class="language-plaintext highlighter-rouge">[options.entry_points]</code> heading:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/setup.cfg</code></strong></p> <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ...
</span><span class="nn">[options.entry_points]</span>
<span class="py">plover.command</span> <span class="p">=</span>
    <span class="c"># "{:COMMAND:OPEN_URL:https://www.openstenoproject.org/}"
</span>    <span class="py">open_url</span> <span class="p">=</span> <span class="s">plover_practice_plugin.command:open_url</span>
</code></pre></div></div> <p>This entry is saying:</p> <ul> <li>We are defining a command (<code class="language-plaintext highlighter-rouge">plover.command</code>)</li> <li>It is called <code class="language-plaintext highlighter-rouge">open_url</code> (<code class="language-plaintext highlighter-rouge">OPEN_URL</code> in the outline maps directly to this<sup id="fnref:9" role="doc-noteref"><a href="#fn:9" class="footnote" rel="footnote">9</a></sup>)</li> <li>It links to a function called <code class="language-plaintext highlighter-rouge">open_url</code>, which is found in a module called <code class="language-plaintext highlighter-rouge">command</code> within the <code class="language-plaintext highlighter-rouge">plover_practice_plugin</code> package<sup id="fnref:10" role="doc-noteref"><a href="#fn:10" class="footnote" rel="footnote">10</a></sup></li> </ul> <p>We have not created the <code class="language-plaintext highlighter-rouge">open_url</code> function yet, so let’s do that now in a new <code class="language-plaintext highlighter-rouge">command.py</code> module file:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/plover_practice_plugin/command.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">webbrowser</span>

<span class="k">def</span> <span class="nf">open_url</span><span class="p">(</span><span class="n">_engine</span><span class="p">,</span> <span class="n">argument</span><span class="p">):</span>
    <span class="n">webbrowser</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
</code></pre></div></div> <p>Command functions are implemented as receiving two parameters:</p> <ul> <li>a <a href="https://plover.readthedocs.io/en/latest/api/engine.html">StenoEngine</a> <code class="language-plaintext highlighter-rouge">engine</code>, which is provided automatically by Plover. We have marked it with an underscore to signal that we are ignoring it, since we do not need it to open URLs</li> <li>an optional <code class="language-plaintext highlighter-rouge">argument</code>, which in this case contains the URL string that gets specified in the command outline</li> </ul> <p>We leverage Python’s <a href="https://docs.python.org/3/library/webbrowser.html"><code class="language-plaintext highlighter-rouge">webbrowser</code></a> library to do all the browser-related heavy lifting, and simply pass the URL <code class="language-plaintext highlighter-rouge">argument</code> to its <a href="https://docs.python.org/3/library/webbrowser.html#webbrowser.open"><code class="language-plaintext highlighter-rouge">open</code></a> function, effectively creating a <a href="https://en.wikipedia.org/wiki/Wrapper_function">wrapper function</a> around it.</p> <p>Now that our first plugin is complete, let’s deploy it to Plover! Open your terminal, and from inside your project directory, run the following command<sup id="fnref:11" role="doc-noteref"><a href="#fn:11" class="footnote" rel="footnote">11</a></sup>:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">plover --script plover_plugins install --editable .
</span></code></pre></div></div> <blockquote> <p>The <code class="language-plaintext highlighter-rouge">plover</code> command will likely error out for you if you are running it for the first time. Follow the instructions in the <a href="https://github.com/openstenoproject/plover/wiki/Invoke-Plover-from-the-command-line">Invoke Plover from the command line</a> wiki page for your operating system to get it working<sup id="fnref:12" role="doc-noteref"><a href="#fn:12" class="footnote" rel="footnote">12</a></sup>.</p> </blockquote> <p>You should see output that looks something like the following:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>plover <span class="nt">--script</span> plover_plugins <span class="nb">install</span> <span class="nt">--editable</span> <span class="nb">.</span>
<span class="go">Obtaining file:///path/to/plover-practice-plugin
  Preparing metadata (setup.py) ... done
</span><span class="gp">Requirement already satisfied: plover&gt;</span><span class="o">=</span>4.0.0.dev12 <span class="k">in</span> ...
<span class="c">...
</span><span class="go">Installing collected packages: plover-practice-plugin
  Running setup.py develop for plover-practice-plugin
Successfully installed plover-practice-plugin
</span></code></pre></div></div> <p>Now, restart your Plover application, open the Plugins Manager, and you should see the Practice Plugin in the list.</p> <div class="centered-image" style="width: 80%;"> <figure> <img src="/assets/images/2024-02-04/practice-plugin-installed.jpg" style="margin-bottom: 0;" alt="Plover Plugins Manager showing the newly-installed Practice Plugin"/> <figcaption> Practice Plugin installed and ready to go! </figcaption> </figure> </div> <p>Great! Now, let’s test it out! Create a temporary entry in one of your steno dictionaries that looks something like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"*URL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:COMMAND:OPEN_URL:https://www.openstenoproject.org/}"</span><span class="w">
</span></code></pre></div></div> <blockquote> <p>I have overridden Plover’s <code class="language-plaintext highlighter-rouge">*URL</code> outline here, but use whatever outline you would like.</p> </blockquote> <p>Now, try chording the outline with your keyboard, and your default web browser should open to the <a href="https://www.openstenoproject.org/">Open Steno Project</a> page!</p> <p>Want to see if it works for other web pages? We can use the <code class="language-plaintext highlighter-rouge">plover</code> command to to do just that, without needing to add another dictionary entry, by <a href="https://plover.readthedocs.io/en/latest/cli_reference.html#sending-commands">sending commands</a> directly to our Plover application. Run the following command in your terminal, and the <a href="https://github.com/openstenoproject/plover">Plover GitHub</a> page should open:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">plover --script plover_send_command OPEN_URL:https://github.com/openstenoproject/plover
</span></code></pre></div></div> <p>Our first plugin is now complete. It is a very minimal implementation, but it works<sup id="fnref:13" role="doc-noteref"><a href="#fn:13" class="footnote" rel="footnote">13</a></sup>! Let’s make an entry for it in our git repository before moving forward:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git add .
git commit --message="Add command plugin"
</span></code></pre></div></div> <p>Now, let’s turn our focus to creating a plugin that will help us output some text that we could not just define in a steno dictionary entry.</p> <h2 id="meta-plugin">Meta Plugin</h2> <p><a href="https://plover.readthedocs.io/en/latest/plugin-dev/metas.html">Metas</a> are functions whose primary purpose is to output new text<sup id="fnref:14" role="doc-noteref"><a href="#fn:14" class="footnote" rel="footnote">14</a></sup>. You would likely be used to creating your own steno dictionary entries that output text of some kind, but we are going to justify needing a plugin by outputting text that we would be unable to specify in a standard dictionary entry.</p> <p>Specifically, we are going to build a meta plugin that outputs a random number between 1 and 100.</p> <p>In dictionary entries, the meta will look like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"{:RANDOM_NUMBER:1:100}"</span><span class="w">
</span></code></pre></div></div> <p>Here, we define the following:</p> <ul> <li><code class="language-plaintext highlighter-rouge">RANDOM_NUMBER</code> - The name of the meta function to run</li> <li><code class="language-plaintext highlighter-rouge">1:100</code> - The argument to pass to the meta function. In this case, it actually represents two arguments: our low and high number boundaries. It seems to be Plover convention to have all arguments in outlines separated by colons, so we will maintain this for our own parameters as well</li> </ul> <p>Like with the command plugin, let’s first create a new <code class="language-plaintext highlighter-rouge">random_number</code> entry point in the <code class="language-plaintext highlighter-rouge">setup.cfg</code> file underneath the existing command entry:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/setup.cfg</code></strong></p> <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ...
</span><span class="nn">[options.entry_points]</span>
<span class="py">plover.command</span> <span class="p">=</span>
    <span class="c"># "{:COMMAND:OPEN_URL:https://www.openstenoproject.org/}"
</span>    <span class="py">open_url</span> <span class="p">=</span> <span class="s">plover_practice_plugin.command:open_url</span>
<span class="py">plover.meta</span> <span class="p">=</span>
    <span class="c"># "{:RANDOM_NUMBER:1:100}"
</span>    <span class="py">random_number</span> <span class="p">=</span> <span class="s">plover_practice_plugin.meta:random_number</span>
</code></pre></div></div> <p>Now, let’s go and create the <code class="language-plaintext highlighter-rouge">random_number</code> function in a new <code class="language-plaintext highlighter-rouge">meta.py</code> module file:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/plover_practice_plugin/meta.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">random</span>

<span class="k">def</span> <span class="nf">random_number</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">argument</span><span class="p">):</span>
    <span class="n">low</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">argument</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">)]</span>
    <span class="n">number</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">)</span>

    <span class="n">action</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="nf">new_action</span><span class="p">()</span>
    <span class="n">action</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">action</span>
</code></pre></div></div> <p>Meta functions are implemented as receiving two parameters:</p> <ul> <li>a Context <code class="language-plaintext highlighter-rouge">ctx</code>, which is provided automatically by Plover. We use it primarily to generate what Plover calls an “action”, which you can think of as a container for the text we want to output<sup id="fnref:15" role="doc-noteref"><a href="#fn:15" class="footnote" rel="footnote">15</a></sup></li> <li>an optional <code class="language-plaintext highlighter-rouge">argument</code>, which in this case we <a href="https://docs.python.org/3/library/stdtypes.html#str.split"><code class="language-plaintext highlighter-rouge">split</code></a> in two, <a href="https://en.wikipedia.org/wiki/Type_conversion">converting</a> each into integers with <a href="https://docs.python.org/3/library/functions.html#int"><code class="language-plaintext highlighter-rouge">int()</code></a>, in order to get the low and high boundaries<sup id="fnref:16" role="doc-noteref"><a href="#fn:16" class="footnote" rel="footnote">16</a></sup></li> </ul> <p>We leverage Python’s <a href="https://docs.python.org/3/library/random.html"><code class="language-plaintext highlighter-rouge">random</code></a> library to generate a random number<sup id="fnref:17" role="doc-noteref"><a href="#fn:17" class="footnote" rel="footnote">17</a></sup> by passing the boundary numbers into its <a href="https://docs.python.org/3/library/random.html#random.randint"><code class="language-plaintext highlighter-rouge">randint</code></a> function. From there, we generate a new <code class="language-plaintext highlighter-rouge">action</code> from the context provided by Plover, assign the random number to its <code class="language-plaintext highlighter-rouge">text</code> property after converting it to a string (using <a href="https://docs.python.org/3/library/stdtypes.html#str"><code class="language-plaintext highlighter-rouge">str()</code></a>), and return it.</p> <p>Since we have made some new changes, we need to let Plover know about them by running the Plover plugin install script again:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">plover --script plover_plugins install --editable .
</span></code></pre></div></div> <p>Restart your Plover application, and then create a temporary entry in one of your steno dictionaries that looks something like this “rand” outline:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"RA*PBD"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:RANDOM_NUMBER:1:100}"</span><span class="w">
</span></code></pre></div></div> <p>Now, try chording the outline, and you should see a different number between 1 and 100 output every time you stroke <code class="language-plaintext highlighter-rouge">RA*PBD</code>! Let’s celebrate the addition of this new plugin by making a repository entry for it:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git add .
git commit --message="Add meta plugin"
</span></code></pre></div></div> <blockquote> <p>Since there is no equivalent of the <code class="language-plaintext highlighter-rouge">plover --script plover_send_command</code> command for testing metas, if you wanted to try using different boundary number parameters, just create some more temporary steno dictionary entries that do so.</p> </blockquote> <p>Next, let’s create our final plugin, that will give us maximum flexibility within Plover’s environment, and do more than just perform one-off actions.</p> <h2 id="extension-plugin">Extension Plugin</h2> <p><a href="https://plover.readthedocs.io/en/latest/plugin-dev/extensions.html">Extensions</a> are <a href="https://docs.python.org/3/tutorial/classes.html">classes</a> (as opposed to our other function-based plugins) that can:</p> <ul> <li>execute code in a long-running <a href="https://en.wikipedia.org/wiki/Concurrent_computing">concurrent process</a> to Plover</li> <li>keep their own <a href="https://en.wikipedia.org/wiki/State_(computer_science)">state</a></li> <li>hook into the <a href="https://en.wikipedia.org/wiki/Object_lifetime">life-cycle events</a> of the <a href="https://plover.readthedocs.io/en/latest/api/engine.html">StenoEngine</a>, and execute code when they occur</li> </ul> <p>These features can seem a bit obtuse or abstract, especially if you are not overly familiar with computer programming, and it can initially seem difficult to understand what benefits an extension plugin can provide over, say, a command or meta plugin.</p> <p>So, we are going to start with the creation of a new meta plugin, surface some of the pain points around it, and then migrate it over to be an extension plugin to relieve the pain.</p> <h3 id="initial-meta-plugin">Initial Meta Plugin</h3> <p>Our new plugin will enable us to read in and output values stored in <a href="https://en.wikipedia.org/wiki/Environment_variable">environment variables</a> on our computer, in the style of the <a href="https://github.com/paulfioravanti/plover-local-env-var">Plover Local Env Var</a> plugin.</p> <blockquote> <p>Note that the incantations we will use to get the environment variables are macOS/Linux-focused. If you are following along using Windows, you will likely need to make small changes to your code around <code class="language-plaintext highlighter-rouge">$VAR</code>/<code class="language-plaintext highlighter-rouge">$Env:VAR</code>/<code class="language-plaintext highlighter-rouge">%VAR%</code> usage, as well as the <code class="language-plaintext highlighter-rouge">echo</code> shell command that gets executed. I’m sorry…computers are hard, and I do not have a Windows machine to test on…</p> </blockquote> <p>In dictionary entries, the meta will look like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"{:GET_ENV_VAR:$USER}"</span><span class="w">
</span></code></pre></div></div> <p>Like the previous plugin, let’s start with the definition of a new meta plugin entry point:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/setup.cfg</code></strong></p> <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ...
</span><span class="nn">[options.entry_points]</span>
<span class="c"># ...
</span><span class="py">plover.meta</span> <span class="p">=</span>
    <span class="c"># "{:RANDOM_NUMBER:1:100}"
</span>    <span class="py">random_number</span> <span class="p">=</span> <span class="s">plover_practice_plugin.meta:random_number</span>
    <span class="c"># "{:GET_ENV_VAR:$USER}"
</span>    <span class="py">get_env_var</span> <span class="p">=</span> <span class="s">plover_practice_plugin.meta:get_env_var</span>
</code></pre></div></div> <p>Now, let’s go and add the <code class="language-plaintext highlighter-rouge">get_env_var</code> function to the existing <code class="language-plaintext highlighter-rouge">meta.py</code> module file:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/plover_practice_plugin/meta.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">random</span>

<span class="k">def</span> <span class="nf">random_number</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">argument</span><span class="p">):</span>
    <span class="c1"># ...
</span>
<span class="k">def</span> <span class="nf">get_env_var</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">argument</span><span class="p">):</span>
    <span class="n">shell</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">SHELL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bash</span><span class="sh">"</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">env_var</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">popen</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">shell</span><span class="si">}</span><span class="s"> -ic </span><span class="sh">'</span><span class="s">echo </span><span class="si">{</span><span class="n">argument</span><span class="si">}</span><span class="sh">'"</span><span class="p">).</span><span class="nf">read</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span>

    <span class="n">action</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="nf">new_action</span><span class="p">()</span>
    <span class="n">action</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">env_var</span>
    <span class="k">return</span> <span class="n">action</span>
</code></pre></div></div> <p>We leverage Python’s <a href="https://docs.python.org/3/library/os.html"><code class="language-plaintext highlighter-rouge">os</code></a> module to do the following:</p> <ul> <li>get Plover’s <code class="language-plaintext highlighter-rouge">$SHELL</code> environment variable using <a href="https://docs.python.org/3/library/os.html#os.getenv"><code class="language-plaintext highlighter-rouge">getenv</code></a></li> <li>get the <code class="language-plaintext highlighter-rouge">argument</code>’s environment variable value from the computer user’s environment using <a href="https://docs.python.org/3/library/os.html#os.popen"><code class="language-plaintext highlighter-rouge">popen</code></a><sup id="fnref:18" role="doc-noteref"><a href="#fn:18" class="footnote" rel="footnote">18</a></sup></li> </ul> <p>Then, just like the random number meta plugin, we create a new <code class="language-plaintext highlighter-rouge">action</code> from the provided Plover context, assign the <code class="language-plaintext highlighter-rouge">env_var</code> value to its <code class="language-plaintext highlighter-rouge">text</code>, and then return it.</p> <p>Run the Plover plugin install script again to apply the changes in Plover:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">plover --script plover_plugins install --editable .
</span></code></pre></div></div> <p>Restart your Plover application, and then create a temporary entry in one of your steno dictionaries that looks something like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"AO*URS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:GET_ENV_VAR:$USER}"</span><span class="w">
</span></code></pre></div></div> <blockquote> <p>I have overridden Plover’s <code class="language-plaintext highlighter-rouge">AO*URS</code> outline here, but use whatever outline you would like.</p> </blockquote> <p>Now, try chording the outline, and you should see your computer user name output! This working state seems like a good place to add a repository commit, so let’s do so:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git add .
git commit --message="Add env var meta plugin"
</span></code></pre></div></div> <h3 id="migrate-to-extension">Migrate to Extension</h3> <p>If you chord the outline a few times, though, you will see that there is a noticeable time gap between your chording and the output appearing. This is because making a call out to the shell every time is computationally expensive enough for us to notice the lag. The value in the <code class="language-plaintext highlighter-rouge">$USER</code> env var will change rarely, if ever, so making this call out every time just to get back the same information is inefficient (and annoying cause we are all about speed with steno, right?).</p> <p>Migrating over to an extension plugin can enable us to eliminate the lag, and get this functionality feeling snappy. We can begin that process by removing the <code class="language-plaintext highlighter-rouge">get_env_var</code> meta entry point, and replacing it with a <code class="language-plaintext highlighter-rouge">plover_practice_plugin</code> extension entry point:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/setup.cfg</code></strong></p> <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ...
</span><span class="nn">[options.entry_points]</span>
<span class="c"># ...
</span><span class="py">plover.meta</span> <span class="p">=</span>
    <span class="c"># "{:RANDOM_NUMBER:1:100}"
</span>    <span class="py">random_number</span> <span class="p">=</span> <span class="s">plover_practice_plugin.meta:random_number</span>
<span class="py">plover.extension</span> <span class="p">=</span>
    <span class="c"># "{:GET_ENV_VAR:$USER}"
</span>    <span class="py">plover_practice_plugin</span> <span class="p">=</span> <span class="s">plover_practice_plugin.extension:PracticePlugin</span>
</code></pre></div></div> <blockquote> <p>It would seem that entry point names for extensions tend to be named the same as the project itself, so that convention is followed here.</p> </blockquote> <p>Next, let’s go and create a <code class="language-plaintext highlighter-rouge">PracticePlugin</code> class in a new <code class="language-plaintext highlighter-rouge">extension.py</code> module file. It gets initialized with a <a href="https://plover.readthedocs.io/en/latest/api/engine.html">StenoEngine</a> <code class="language-plaintext highlighter-rouge">engine</code> (provided by Plover), which we just need to assign to an internal property (we will use it later on…). It also implements two callback functions, <code class="language-plaintext highlighter-rouge">start</code> and <code class="language-plaintext highlighter-rouge">stop</code>, which get run when the extension is enabled and disabled respectively.</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/plover_practice_plugin/extension.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">plover.registry</span> <span class="kn">import</span> <span class="n">registry</span>

<span class="k">class</span> <span class="nc">PracticePlugin</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">engine</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_engine</span> <span class="o">=</span> <span class="n">engine</span>

    <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">registry</span><span class="p">.</span><span class="nf">register_plugin</span><span class="p">(</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">get_env_var</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_get_env_var</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">stop</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">_get_env_var</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">ctx</span><span class="p">,</span> <span class="n">argument</span><span class="p">):</span>
        <span class="n">shell</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">SHELL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bash</span><span class="sh">"</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">env_var</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">popen</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">shell</span><span class="si">}</span><span class="s"> -ic </span><span class="sh">'</span><span class="s">echo </span><span class="si">{</span><span class="n">argument</span><span class="si">}</span><span class="sh">'"</span><span class="p">).</span><span class="nf">read</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span>

        <span class="n">action</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="nf">new_action</span><span class="p">()</span>
        <span class="n">action</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">env_var</span>
        <span class="k">return</span> <span class="n">action</span>
</code></pre></div></div> <p>Within the <code class="language-plaintext highlighter-rouge">start</code> function, we use the <a href="https://plover.readthedocs.io/en/latest/api/registry.html">Plover Plugin Registry</a> to <a href="https://plover.readthedocs.io/en/latest/api/registry.html#plover.registry.Registry.register_plugin">register a new meta plugin</a> called <code class="language-plaintext highlighter-rouge">"get_env_var"</code> (the exact same name as the original meta), whose implementation we will find in a <a href="https://docs.python.org/3/tutorial/classes.html#tut-private">private instance method</a> called <code class="language-plaintext highlighter-rouge">_get_env_var</code> (note the underscore prefix). That method contains the code we originally had in the <code class="language-plaintext highlighter-rouge">get_env_var</code> meta function (so we do not need the original function anymore, and it can be safely deleted). We do not currently need to do anything when the plugin stops (yet!), so we simply provide the <code class="language-plaintext highlighter-rouge">stop</code> function a <a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements"><code class="language-plaintext highlighter-rouge">pass</code></a>.</p> <p>Let’s do a quick sanity check to confirm that the initial migration has worked, and run the Plover plugin install script:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">plover --script plover_plugins install --editable .
</span></code></pre></div></div> <p>Restart your Plover application, open the Configure screen, and under the Plugins tab, confirm that <code class="language-plaintext highlighter-rouge">plover_practice_plugin</code> is in the list, and that its Enabled box is checked.</p> <div class="centered-image" style="width: 70%;"> <figure> <img src="/assets/images/2024-02-04/plover-extension-running.jpg" alt="Plover Configuration showing the Practice Plugin extension running"/> <figcaption> Open Configure &gt; Plugins and confirm that the Enabled box is checked </figcaption> </figure> </div> <p>Now, try chording the <code class="language-plaintext highlighter-rouge">"{:GET_ENV_VAR:$USER}"</code> outline again, and if it still works exactly the same as before (including lag), then the meta-to-extension migration has been successful! Let’s quickly make a commit entry before moving forward:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git add .
git commit --message="Migrate env var meta to extension plugin"
</span></code></pre></div></div> <h3 id="env-var-cache">Env Var Cache</h3> <p>The first optimisation we want to make is adding a <a href="https://en.wikipedia.org/wiki/Cache_(computing)">cache</a>, in the form of a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">Python dictionary</a>, to store environment variable names and values after we fetch them the first time. This will mean we only get lag the first time we fetch the env var, but subsequent fetches will use the cached value, and hence output the text faster. Code-wise, we want to be able to do the following:</p> <ul> <li>Initialise an empty dictionary to store the env vars when plugin starts</li> <li>When attempting to get an env var value, check the cache first for the env var name, and return its value if present</li> <li>If no entry is present, run the command to get the env var, and store its name and value in the dictionary</li> </ul> <p>Let’s see how this looks in code:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/plover_practice_plugin/extension.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">plover.registry</span> <span class="kn">import</span> <span class="n">registry</span>

<span class="k">class</span> <span class="nc">PracticePlugin</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">engine</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_engine</span> <span class="o">=</span> <span class="n">engine</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="c1"># ...
</span>
    <span class="k">def</span> <span class="nf">_get_env_var</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">ctx</span><span class="p">,</span> <span class="n">argument</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">env_var</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span><span class="p">[</span><span class="n">argument</span><span class="p">]</span>
        <span class="k">except</span> <span class="nb">KeyError</span><span class="p">:</span>
            <span class="n">shell</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">SHELL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bash</span><span class="sh">"</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">env_var</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">popen</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">shell</span><span class="si">}</span><span class="s"> -ic </span><span class="sh">'</span><span class="s">echo </span><span class="si">{</span><span class="n">argument</span><span class="si">}</span><span class="sh">'"</span><span class="p">).</span><span class="nf">read</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span><span class="p">[</span><span class="n">argument</span><span class="p">]</span> <span class="o">=</span> <span class="n">env_var</span>

        <span class="n">action</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="nf">new_action</span><span class="p">()</span>
        <span class="n">action</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">env_var</span>
        <span class="k">return</span> <span class="n">action</span>
</code></pre></div></div> <p>Run the Plover plugin install script again and restart Plover:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">plover --script plover_plugins install --editable .
</span></code></pre></div></div> <p>You should find that the first env var retrieval is slow, but subsequent look ups will use the cached version in the dictionary, so the text will output much faster. Chalk up our first optimisation win!</p> <h3 id="clearing-the-cache">Clearing the Cache</h3> <p>Now, it is nice to use a cache, but what if the value of an env var value changes? The extension will keep using the same cached (and now obsolete) value as long as the env var name is the same. It would be nice to have a way to clear the cache when we want to read in new env var values: say, by pushing the Plover <a href="https://en.wikipedia.org/wiki/Graphical_user_interface">GUI</a> “Reconnect” button.</p> <div class="centered-image" style="width: 50%;"> <figure> <img src="/assets/images/2024-02-04/plover-reconnect.jpg" alt="Plover GUI highlighting the Reconnect button"/> </figure> </div> <p>Luckily, Plover’s <a href="https://plover.readthedocs.io/en/latest/api/engine.html">StenoEngine</a> contains some <a href="https://plover.readthedocs.io/en/latest/api/engine.html#engine-hooks">hook functions</a> that we can leverage to do just that<sup id="fnref:19" role="doc-noteref"><a href="#fn:19" class="footnote" rel="footnote">19</a></sup>. Plover’s steno engine has <a href="https://github.com/openstenoproject/plover/blob/53c416fd893d62ab9ede5898129da3be856e910d/plover/machine/base.py#L19">four states</a>:</p> <ul> <li>Stopped</li> <li>Initializing</li> <li>Connected (aka Running)</li> <li>Disconnected (aka Error)</li> </ul> <p>When you press the “Reconnect” GUI button, the engine state changes to Stopped, then Initializing, then either Connected or Disconnected, depending on whether Plover can find your steno machine. We can use the <a href="https://plover.readthedocs.io/en/latest/api/engine.html#machine_state_changed"><code class="language-plaintext highlighter-rouge">machine_state_changed</code></a> engine hook to check the machine status every time it changes, and if it’s Connected, reset the env var cache:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/plover_practice_plugin/extension.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">plover.machine.base</span> <span class="kn">import</span> <span class="n">STATE_RUNNING</span>
<span class="kn">from</span> <span class="n">plover.registry</span> <span class="kn">import</span> <span class="n">registry</span>

<span class="k">class</span> <span class="nc">PracticePlugin</span><span class="p">:</span>
    <span class="c1"># ...
</span>    <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">registry</span><span class="p">.</span><span class="nf">register_plugin</span><span class="p">(</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">get_env_var</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_get_env_var</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_engine</span><span class="p">.</span><span class="nf">hook_connect</span><span class="p">(</span>
            <span class="sh">"</span><span class="s">machine_state_changed</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_machine_state_changed</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">stop</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_engine</span><span class="p">.</span><span class="nf">hook_disconnect</span><span class="p">(</span>
            <span class="sh">"</span><span class="s">machine_state_changed</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_machine_state_changed</span>
        <span class="p">)</span>

    <span class="c1"># ...
</span>
    <span class="k">def</span> <span class="nf">_machine_state_changed</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">_machine_type</span><span class="p">,</span> <span class="n">machine_state</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">machine_state</span> <span class="o">==</span> <span class="n">STATE_RUNNING</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span> <span class="o">=</span> <span class="p">{}</span>
</code></pre></div></div> <p>Here we are use the steno engine’s <a href="https://plover.readthedocs.io/en/latest/api/engine.html#plover.engine.StenoEngine.hook_connect"><code class="language-plaintext highlighter-rouge">hook_connect</code></a> and <a href="https://plover.readthedocs.io/en/latest/api/engine.html#plover.engine.StenoEngine.hook_disconnect"><code class="language-plaintext highlighter-rouge">hook_disconnect</code></a> functions to have our new <code class="language-plaintext highlighter-rouge">_machine_state_changed</code> private method run every time Plover’s <code class="language-plaintext highlighter-rouge">"machine_state_changed"</code> event occurs. The <code class="language-plaintext highlighter-rouge">machine_type</code> and <code class="language-plaintext highlighter-rouge">machine_state</code> parameters are provided to us by Plover when the event occurs, but we only care about the machine state, and whether it has changed to be Connected (<code class="language-plaintext highlighter-rouge">STATE_RUNNING</code>). If it has, empty the cache.</p> <p>Let’s check and see if cache emptying works. Run the Plover plugin install script again and restart Plover:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">plover --script plover_plugins install --editable .
</span></code></pre></div></div> <p>Like before, the first retrieval of the env var should have a lag, but subsequent retrievals should be fast. Now, press the Plover “Reconnect” button, and try the same outline again. You should find that since there is no longer a cache present, the lag will have returned since the env var value is directly fetched again via the command line. However, subsequent retrievals should be fast again as expected. Great, no more stale data for us!</p> <h3 id="eradicate-lag-with-config">Eradicate Lag with Config</h3> <p>Time to address the final hanging thread in the optimisation story: that initial env var retrieval speed hit. It would be nice to have output of env var values be fast <em>all the time</em>, and we can do this by <a href="https://en.wikipedia.org/wiki/Prefetching">prefetching</a> them when the plugin starts. This will take the form of:</p> <ul> <li>using a <a href="https://en.wikipedia.org/wiki/JSON">JSON</a> configuration file to store the names of the env vars whose values we want to cache</li> <li>when the extension starts, read in config file, fetch all the env var values, and initialise the dictionary cache for them</li> <li>when we encounter an env var that is not in the cache, after fetching its value and adding it to the cache, also add its name to the config file</li> <li>where we previously <em>cleared</em> the cache by pressing the “Reconnect” button, instead we will now re-read in the config file and <em>refresh</em> the cache</li> </ul> <p>The JSON config file will live in Plover’s <a href="https://plover.readthedocs.io/en/latest/api/oslayer_config.html#plover.oslayer.config.CONFIG_DIR">designated configuration directory</a> (<code class="language-plaintext highlighter-rouge">CONFIG_DIR</code>), which is platform dependent. We will call it “<code class="language-plaintext highlighter-rouge">practice_plugin.json</code>”, and it will be created, read, and written to automatically, so it is not something that should need to be edited manually. Its format will look like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"env_var_names"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"$USER"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"$ENV_VAR"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"$SOME_OTHER_ENV_VAR"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>First, let’s update the <code class="language-plaintext highlighter-rouge">_get_env_var</code> method to save newly fetched env var names out to the config file:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/plover_practice_plugin/extension.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="c1"># ...
</span><span class="kn">from</span> <span class="n">plover.oslayer.config</span> <span class="kn">import</span> <span class="n">CONFIG_DIR</span>

<span class="n">_CONFIG_FILEPATH</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">CONFIG_DIR</span><span class="p">)</span> <span class="o">/</span> <span class="sh">"</span><span class="s">practice_plugin.json</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">PracticePlugin</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">engine</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_engine</span> <span class="o">=</span> <span class="n">engine</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="c1"># ...
</span>
    <span class="k">def</span> <span class="nf">_get_env_var</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">ctx</span><span class="p">,</span> <span class="n">argument</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">env_var_value</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span><span class="p">[</span><span class="n">argument</span><span class="p">]</span>
        <span class="k">except</span> <span class="nb">KeyError</span><span class="p">:</span>
            <span class="n">env_var_value</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_expand</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span><span class="p">[</span><span class="n">argument</span><span class="p">]</span> <span class="o">=</span> <span class="n">env_var_value</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_save_config</span><span class="p">()</span>

        <span class="n">action</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="nf">new_action</span><span class="p">()</span>
        <span class="n">action</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">env_var_value</span>
        <span class="k">return</span> <span class="n">action</span>

    <span class="k">def</span> <span class="nf">_expand</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">argument</span><span class="p">):</span>
        <span class="n">shell</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">SHELL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bash</span><span class="sh">"</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="nf">popen</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">shell</span><span class="si">}</span><span class="s"> -ic </span><span class="sh">'</span><span class="s">echo </span><span class="si">{</span><span class="n">argument</span><span class="si">}</span><span class="sh">'"</span><span class="p">).</span><span class="nf">read</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_save_config</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">with</span> <span class="n">_CONFIG_FILEPATH</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">env_var_names</span><span class="sh">"</span><span class="p">:</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span><span class="p">.</span><span class="nf">keys</span><span class="p">())}</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nb">file</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
            <span class="nb">file</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div> <p>Here, we have made a small refactor by extracting out <code class="language-plaintext highlighter-rouge">os</code>-related code into an <code class="language-plaintext highlighter-rouge">_expand</code> method (we will reference it again soon), and then added another <code class="language-plaintext highlighter-rouge">_save_config</code> method that creates a new dictionary containing the <a href="https://docs.python.org/3/library/functions.html#sorted"><code class="language-plaintext highlighter-rouge">sorted</code></a> <code class="language-plaintext highlighter-rouge">"env_var_names"</code>, and uses Python’s <a href="https://docs.python.org/3/library/json.html"><code class="language-plaintext highlighter-rouge">json</code></a> library to output (<a href="https://docs.python.org/3/library/json.html#json.dump"><code class="language-plaintext highlighter-rouge">dump</code></a>) it to a JSON config file. We call <code class="language-plaintext highlighter-rouge">_save_config</code> after we add any new env var entry to the cache, so we know to read it in again when the plugin starts.</p> <p>Speaking of that, let’s now add the code that loads in the config, not just when the plugin starts, but also when we want to refresh the env var cache:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/plover_practice_plugin/extension.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="c1"># ...
</span><span class="kn">from</span> <span class="n">plover.machine.base</span> <span class="kn">import</span> <span class="n">STATE_RUNNING</span>
<span class="kn">from</span> <span class="n">plover.oslayer.config</span> <span class="kn">import</span> <span class="n">CONFIG_DIR</span>

<span class="n">_CONFIG_FILEPATH</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">CONFIG_DIR</span><span class="p">)</span> <span class="o">/</span> <span class="sh">"</span><span class="s">practice_plugin.json</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">PracticePlugin</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">engine</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_engine</span> <span class="o">=</span> <span class="n">engine</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># ...
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_load_config</span><span class="p">()</span>

    <span class="c1"># ...
</span>
    <span class="k">def</span> <span class="nf">_load_config</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">_CONFIG_FILEPATH</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
                <span class="nb">file</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="n">env_var_names</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">env_var_names</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span>
        <span class="n">env_var_values</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_expand</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">env_var_names</span><span class="p">))</span>
        <span class="n">env_vars</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">env_var_names</span><span class="p">,</span> <span class="n">env_var_values</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)))</span>

        <span class="k">return</span> <span class="n">env_vars</span>

    <span class="k">def</span> <span class="nf">_machine_state_changed</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">_machine_type</span><span class="p">,</span> <span class="n">machine_state</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">machine_state</span> <span class="o">==</span> <span class="n">STATE_RUNNING</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_load_config</span><span class="p">()</span>
</code></pre></div></div> <p>Here, you can see that we call a <code class="language-plaintext highlighter-rouge">_load_config</code> method when the plugin starts, and when the Plover “Reconnect” button is pressed. It reads in the config file (<a href="https://docs.python.org/3/library/json.html#json.load"><code class="language-plaintext highlighter-rouge">load</code></a>), extracts its <code class="language-plaintext highlighter-rouge">"env_var_names"</code> list, expands them all, and returns the now-initialised <code class="language-plaintext highlighter-rouge">env_vars</code> dictionary cache<sup id="fnref:20" role="doc-noteref"><a href="#fn:20" class="footnote" rel="footnote">20</a></sup>.</p> <p>For completeness’ sake, and for those following along, this is what the full finished extension code looks like:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/plover_practice_plugin/extension.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="kn">from</span> <span class="n">plover.machine.base</span> <span class="kn">import</span> <span class="n">STATE_RUNNING</span>
<span class="kn">from</span> <span class="n">plover.oslayer.config</span> <span class="kn">import</span> <span class="n">CONFIG_DIR</span>
<span class="kn">from</span> <span class="n">plover.registry</span> <span class="kn">import</span> <span class="n">registry</span>

<span class="n">_CONFIG_FILEPATH</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">CONFIG_DIR</span><span class="p">)</span> <span class="o">/</span> <span class="sh">"</span><span class="s">practice_plugin.json</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">PracticePlugin</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">engine</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_engine</span> <span class="o">=</span> <span class="n">engine</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">registry</span><span class="p">.</span><span class="nf">register_plugin</span><span class="p">(</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">get_env_var</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_get_env_var</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_engine</span><span class="p">.</span><span class="nf">hook_connect</span><span class="p">(</span>
            <span class="sh">"</span><span class="s">machine_state_changed</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_machine_state_changed</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_load_config</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">stop</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_engine</span><span class="p">.</span><span class="nf">hook_disconnect</span><span class="p">(</span>
            <span class="sh">"</span><span class="s">machine_state_changed</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_machine_state_changed</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">_get_env_var</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">ctx</span><span class="p">,</span> <span class="n">argument</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">env_var_value</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span><span class="p">[</span><span class="n">argument</span><span class="p">]</span>
        <span class="k">except</span> <span class="nb">KeyError</span><span class="p">:</span>
            <span class="n">env_var_value</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_expand</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span><span class="p">[</span><span class="n">argument</span><span class="p">]</span> <span class="o">=</span> <span class="n">env_var_value</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_save_config</span><span class="p">()</span>

        <span class="n">action</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="nf">new_action</span><span class="p">()</span>
        <span class="n">action</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">env_var_value</span>
        <span class="k">return</span> <span class="n">action</span>

    <span class="k">def</span> <span class="nf">_expand</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">argument</span><span class="p">):</span>
        <span class="n">shell</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">SHELL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bash</span><span class="sh">"</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="nf">popen</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">shell</span><span class="si">}</span><span class="s"> -ic </span><span class="sh">'</span><span class="s">echo </span><span class="si">{</span><span class="n">argument</span><span class="si">}</span><span class="sh">'"</span><span class="p">).</span><span class="nf">read</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_save_config</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">with</span> <span class="n">_CONFIG_FILEPATH</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">env_var_names</span><span class="sh">"</span><span class="p">:</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span><span class="p">.</span><span class="nf">keys</span><span class="p">())}</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nb">file</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
            <span class="nb">file</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_load_config</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">_CONFIG_FILEPATH</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
                <span class="nb">file</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="n">env_var_names</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">env_var_names</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span>
        <span class="n">env_var_values</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_expand</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">env_var_names</span><span class="p">))</span>
        <span class="n">env_vars</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">env_var_names</span><span class="p">,</span> <span class="n">env_var_values</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)))</span>

        <span class="k">return</span> <span class="n">env_vars</span>

    <span class="k">def</span> <span class="nf">_machine_state_changed</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">_machine_type</span><span class="p">,</span> <span class="n">machine_state</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">machine_state</span> <span class="o">==</span> <span class="n">STATE_RUNNING</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_env_vars</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_load_config</span><span class="p">()</span>
</code></pre></div></div> <p>Moment of truth: let’s see if this works. Run the Plover plugin install script again and restart Plover:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">plover --script plover_plugins install --editable .
</span></code></pre></div></div> <p>Now, try chording the <code class="language-plaintext highlighter-rouge">"{:GET_ENV_VAR:$USER}"</code> outline. Like before, there will be an initial lag on the first output, with faster subsequent outputs. But! Go and open up your <a href="https://plover.readthedocs.io/en/latest/api/oslayer_config.html#plover.oslayer.config.CONFIG_DIR">Plover configuration directory</a>, and you should find a <code class="language-plaintext highlighter-rouge">practice_plugin.json</code> file with the following contents:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"env_var_names"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"$USER"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <div class="centered-image" style="width: 100%;"> <figure style="margin-bottom: 0;"> <img src="/assets/images/2024-02-04/plover-practice-plugin-config.jpg" alt="Plover plugin config file shown in a Finder window"/> </figure> <figcaption> Config file in the Plover configuration directory (macOS) </figcaption> </div> <p>The plugin now knows that it should go and prefetch the value of the <code class="language-plaintext highlighter-rouge">$USER</code> env var. So, if you restart the Plover application now, and try chording the <code class="language-plaintext highlighter-rouge">"{:GET_ENV_VAR:$USER}"</code> outline, there should be no lag at all! Try pressing the Plover “Reconnect” button to refresh the cache, and you should still see no output lag.</p> <p>Looks like we have ourselves a finished extension plugin<sup id="fnref:21" role="doc-noteref"><a href="#fn:21" class="footnote" rel="footnote">21</a></sup>, so let’s check our new additions into Git:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git add .
git commit --message="Finish extension plugin"
</span></code></pre></div></div> <p>After showcasing three different examples of Plover plugin types, I think we can put a pin in our project and say that it is “done”. Now, let’s see what is involved in getting this code public, and into the hands of other Plover users.</p> <h2 id="how-to-share">How to Share</h2> <p>Plover does have a <a href="https://plover.readthedocs.io/en/latest/plugin-dev/publishing.html">Publishing Plugins</a> page, and I do think it should be your first point of call for official guidance on this topic. However, as of this writing, I needed extra steps to make everything work in an automated and frictionless manner, so consider this a supplementary guide.</p> <p>I found there were three main steps to complete in order to get plugin code into the Plover ecosystem:</p> <ul> <li>Get your code in a public Git repository</li> <li>Publish your code on <a href="https://pypi.org/">PyPI</a></li> <li>Get the name of your plugin included in the <a href="https://github.com/openstenoproject/plover_plugins_registry">Plover Plugin Registry list</a></li> </ul> <h3 id="push-to-github">Push to GitHub</h3> <p>During the course of development, we have been making commits to a local Git repository on our computer, that can only be seen by us. To share our code with others, we need a public repository where others can access it.</p> <p><a href="https://github.com/">GitHub</a> is probably the most well known code sharing platform<sup id="fnref:22" role="doc-noteref"><a href="#fn:22" class="footnote" rel="footnote">22</a></sup>, so we will use it to publish our codebase. If you do not have a GitHub account yet, <a href="https://github.com/signup">sign up</a> for one, <a href="https://github.com/new">create a new repository</a>, and name it <strong>plover-practice-plugin</strong>. No need to worry about any of the optional fields, but just ensure that the repository is set to be Public.</p> <p>Since we already have a local Git repository, we can follow GitHub’s directions to “push an existing repository from the command line”. They will be personal to your account, and look something like:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">git remote add origin git@github.com:&lt;your_username&gt;</span>/plover-practice-plugin.git
<span class="go">git branch -M main
git push -u origin main
</span></code></pre></div></div> <p>Once you have followed your instructions, you should be able to see your plugin code up on GitHub at <code class="language-plaintext highlighter-rouge">https://github.com/&lt;your_username&gt;/plover-practice-plugin</code> (you can see mine <a href="https://github.com/paulfioravanti/plover-practice-plugin">here</a>).</p> <h3 id="publish-to-pypi">Publish to PyPI</h3> <p>The <a href="https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/">Python Packaging and Distributing projects</a> page that Plover’s <a href="https://plover.readthedocs.io/en/latest/plugin-dev/publishing.html">Publishing Plugins</a> page would seem to (indirectly) reference in its guide to publish to PyPI is marked as “outdated”. The “modern” way to publish would seem to be by using a <a href="https://en.wikipedia.org/wiki/CI/CD">CI/CD</a> workflow, and Python’s documentation even has a <a href="https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/">Publishing package distribution releases using GitHub Actions CI/CD workflows</a> page to help out GitHub users.</p> <p>Based on some information in that guide, some information in the <a href="https://github.com/marketplace/actions/pypi-publish">PyPI publish GitHub action</a> documentation, and some experimentation on my part, the following is my guide to automate publishing of a Plover plugin to PyPI from GitHub.</p> <p>The goal is to be able to perform a <code class="language-plaintext highlighter-rouge">git push</code> up to GitHub, and then have a GitHub action handle publishing to PyPI without any further interaction from us. The GitHub action should also be smart enough to only publish to PyPI when we <em>explicitly</em> specify a new version of the plugin (via a <a href="https://git-scm.com/book/en/Git-Basics-Tagging">git tag</a>), since not all code pushes need to be published immediately.</p> <h4 id="create-trusted-publisher">Create Trusted Publisher</h4> <p>Before going further with code, though, <a href="https://pypi.org/account/register/">create an account</a> on PyPI if you don’t already have one. Next, in order to allow a GitHub action to publish to PyPI on your behalf, you need to set up a <a href="https://docs.pypi.org/trusted-publishers/">trusted publisher</a>. Open your <a href="https://pypi.org/manage/account/publishing/">Publishing page</a>, scroll down to the “Add a new pending publisher” form, and fill it with information similar to this:</p> <div class="centered-image" style="width: 50%;"> <figure style="margin-bottom: 0;"> <img src="/assets/images/2024-02-04/pypi-trusted-publisher.jpg" alt="PyPI's 'Add a new pending publisher' form"/> </figure> <figcaption> Fill in this form to allow GitHub actions to publish to PyPI </figcaption> </div> <ul> <li>If you have been building your own <code class="language-plaintext highlighter-rouge">plover-practice-plugin</code> while reading this post, and are intending to publish to PyPI, you will have to change the “PyPI Project Name” to something else, since <code class="language-plaintext highlighter-rouge">plover-practice-plugin</code> will already be taken by me :) Maybe try <code class="language-plaintext highlighter-rouge">plover-practice-plugin-&lt;your-name&gt;</code>.</li> <li>The “Owner” and “Repository name” fields come from your plugin GitHub repo</li> <li>The information in the “Workflow name” and “Environment” fields are something we will specify soon in the GitHub action configuration. “Release” seems to be a good default name for these, but feel free to choose something else</li> </ul> <p>Once you have added the publisher correctly, it should show up as a “Pending Publisher” on the Publishing page, meaning we are ready to create our GitHub action workflow.</p> <h4 id="create-github-action-workflow">Create GitHub Action WorkFlow</h4> <p>The following is what I consider to be a minimum viable GitHub action workflow configuration for publishing a Plover plugin to PyPI. As per the trusted publisher config above, we will name the workflow file <code class="language-plaintext highlighter-rouge">release.yml</code>, and add it to the project in the following specific location:</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/.github/workflows/release.yml</code></strong></p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">PyPI Release</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">main</span>
    <span class="na">tags</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">*"</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="c1"># Adapted from: https://github.com/pypa/gh-action-pypi-publish#usage</span>
  <span class="na">pypi-publish</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">${{ startsWith(github.ref, 'refs/tags') }}</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Build, Release to PyPI</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">release</span>
      <span class="na">url</span><span class="pi">:</span> <span class="s">https://pypi.org/project/plover-practice-plugin/</span>
    <span class="na">permissions</span><span class="pi">:</span>
      <span class="na">id-token</span><span class="pi">:</span> <span class="s">write</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Clone Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up Python</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-python@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">python-version</span><span class="pi">:</span> <span class="m">3.9</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install Build</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">python -m pip install --upgrade build</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">python -m build</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Publish to PyPI</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">pypa/gh-action-pypi-publish@release/v1</span>
</code></pre></div></div> <ul> <li>As per the trusted publisher config, we have specified that the <code class="language-plaintext highlighter-rouge">name</code> of the <code class="language-plaintext highlighter-rouge">environment</code> this workflow should use is <code class="language-plaintext highlighter-rouge">release</code>, and that its <code class="language-plaintext highlighter-rouge">url</code> points to the “PyPI Project Name” we specified</li> <li>As per Plover’s Python version, we make sure to set up the workflow’s environment with <code class="language-plaintext highlighter-rouge">python-version: 3.9</code></li> <li>All GitHub action jobs that use <code class="language-plaintext highlighter-rouge">pypa/gh-action-pypi-publish</code> <em>must</em> use <code class="language-plaintext highlighter-rouge">runs-on: ubuntu-latest</code>, and no other operating system<sup id="fnref:23" role="doc-noteref"><a href="#fn:23" class="footnote" rel="footnote">23</a></sup></li> <li>The conditional <code class="language-plaintext highlighter-rouge">if: ${{ startsWith(github.ref, 'refs/tags') }}</code> statement is where we say to <em>only</em> run the <code class="language-plaintext highlighter-rouge">pypi-publish</code> <a href="https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow">job</a> if the current <a href="https://git-scm.com/book/en/v2/Git-Internals-Git-References">git commit reference</a> (<a href="https://docs.github.com/en/actions/learn-github-actions/contexts#github-context"><code class="language-plaintext highlighter-rouge">github.ref</code></a>) <a href="https://docs.github.com/en/actions/learn-github-actions/expressions#startswith"><code class="language-plaintext highlighter-rouge">startsWith</code></a> a tag (<code class="language-plaintext highlighter-rouge">refs/tags</code>)<sup id="fnref:24" role="doc-noteref"><a href="#fn:24" class="footnote" rel="footnote">24</a></sup></li> </ul> <p>Before moving forward, let’s add a commit for this new config:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git add .
git commit --message="Add publish to PyPI GitHub action"
</span></code></pre></div></div> <blockquote> <p>You can find further information about the details about this config in the <a href="https://github.com/marketplace/actions/pypi-publish#usage">PyPI publish GitHub Action documentation</a>, but aside from what is mentioned above, you should be able to just copy and paste this config into your own plugin project to use as-is.</p> </blockquote> <h4 id="update-project-details">Update Project Details</h4> <p>Remember at the beginning of this project when we specified a minimal set of project metadata? Now that we are nearly at the point of publishing to PyPI, let’s flesh it out a bit more so we can have more information show up on our project’s PyPI page (feel free to add more and customise as you please. Also, the ordering of this config does not matter; I just used alphabetical here):</p> <p><strong><code class="language-plaintext highlighter-rouge">plover-practice-plugin/setup.cfg</code></strong></p> <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">author</span> <span class="p">=</span> <span class="s">Paul Fioravanti</span>
<span class="py">author_email</span> <span class="p">=</span> <span class="s">paul@paulfioravanti.com</span>
<span class="py">classifiers</span> <span class="p">=</span>
    <span class="err">Development</span> <span class="err">Status</span> <span class="err">::</span> <span class="err">4</span> <span class="err">-</span> <span class="err">Beta</span>
    <span class="err">Environment</span> <span class="err">::</span> <span class="err">Plugins</span>
    <span class="err">Intended</span> <span class="err">Audience</span> <span class="err">::</span> <span class="err">End</span> <span class="err">Users/Desktop</span>
    <span class="err">Operating</span> <span class="err">System</span> <span class="err">::</span> <span class="err">OS</span> <span class="err">Independent</span>
    <span class="err">Programming</span> <span class="err">Language</span> <span class="err">::</span> <span class="err">Python</span> <span class="err">::</span> <span class="err">3</span>
    <span class="err">Programming</span> <span class="err">Language</span> <span class="err">::</span> <span class="err">Python</span> <span class="err">::</span> <span class="err">3.9</span>
<span class="py">description</span> <span class="p">=</span> <span class="s">Plover practice plugin</span>
<span class="py">keywords</span> <span class="p">=</span> <span class="s">plover plover_plugin</span>
<span class="py">license</span> <span class="p">=</span> <span class="s">GNU General Public License v3 or later (GPLv3+)</span>
<span class="py">long_description</span> <span class="p">=</span> <span class="s">file: README.md</span>
<span class="py">long_description_content_type</span> <span class="p">=</span> <span class="s">text/markdown</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">plover_practice_plugin</span>
<span class="py">url</span> <span class="p">=</span> <span class="s">https://github.com/paulfioravanti/plover-practice-plugin</span>
<span class="py">version</span> <span class="p">=</span> <span class="s">0.0.1</span>

<span class="c"># ...
</span></code></pre></div></div> <p>Since we have specified a license in the metadata (in this case the <a href="https://www.gnu.org/licenses/gpl-3.0.txt">GPLv3+</a>, similar to <a href="https://github.com/openstenoproject/plover/blob/53c416fd893d62ab9ede5898129da3be856e910d/LICENSE.txt">Plover’s license</a>), let’s also create a <code class="language-plaintext highlighter-rouge">plover-practice-plugin/LICENSE.txt</code> file, and copy-paste the contents from the license link in there. Finally, since we only put minimal content in the <code class="language-plaintext highlighter-rouge">README.md</code>, now would also be a good time to update that with more information. You can see what I added in my <a href="https://github.com/paulfioravanti/plover-practice-plugin">project GitHub repo</a>.</p> <p>Let’s now commit all those changes, and push them to GitHub:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git add .
git commit --message="Update project metadata and README, add LICENSE"
git push
</span></code></pre></div></div> <p>Now, if you open your plugin GitHub page, you should see a green check mark next to that last commit, indicating that a GitHub action workflow was run successfully:</p> <div class="centered-image" style="width: 100%;"> <figure> <img src="/assets/images/2024-02-04/github-action-success.jpg" alt="GitHub commit showing that a GitHub action workflow has run successfully"/> </figure> </div> <blockquote> <p>You can watch the job in action or check the status of any past jobs on the repo’s Actions page (<a href="https://github.com/paulfioravanti/plover-practice-plugin/actions">see mine</a>).</p> </blockquote> <p>However, if you click that check mark, you will see that although the workflow was run, the job inside the workflow (<code class="language-plaintext highlighter-rouge">pypi-publish</code>) was skipped:</p> <div class="centered-image" style="width: 100%;"> <figure> <img src="/assets/images/2024-02-04/github-action-skipped.jpg" alt="GitHub action showing that jobs were skipped"/> </figure> </div> <p>This is what we want! We are now free to push code to the repo, and only publish to PyPI when we are ready…which, at this point, we definitely are.</p> <p>Our <code class="language-plaintext highlighter-rouge">setup.cfg</code> metadata already has a <code class="language-plaintext highlighter-rouge">version</code> entry marked as <code class="language-plaintext highlighter-rouge">0.0.1</code>, so let’s tag the repo’s current commit as being <code class="language-plaintext highlighter-rouge">v0.0.1</code><sup id="fnref:25" role="doc-noteref"><a href="#fn:25" class="footnote" rel="footnote">25</a></sup>. We will then push that tag up to GitHub, where the GitHub action will run, and publish the plugin out to PyPI for us:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git tag v0.0.1
git push origin v0.0.1
</span></code></pre></div></div> <p>When you check the job status this time (for the same commit, since you only pushed up a tag), you should see that it has been successful:</p> <div class="centered-image" style="width: 100%;"> <figure> <img src="/assets/images/2024-02-04/github-action-job-success.jpg" alt="GitHub action showing that jobs were successfully completed"/> </figure> </div> <p>Then, you can open your new plugin page on PyPI to confirm that you are published (for reference, here is <a href="https://pypi.org/project/plover-practice-plugin/">Plover Practice Plugin</a>’s PyPI page). When you are ready to release a new version, remember to update both the <code class="language-plaintext highlighter-rouge">version</code> number in the <code class="language-plaintext highlighter-rouge">setup.cfg</code> file <em>and</em> add a new git tag!</p> <h3 id="add-to-plover-plugin-registry">Add to Plover Plugin Registry</h3> <p>We are now down to the last step in this guide. Congratulations for making it this far! The final small (but important!) barrier between your plugin, and making it available in everyone’s Plover application, is its inclusion in the <a href="https://github.com/openstenoproject/plover_plugins_registry">Plover Plugin Registry list</a>. Follow the instructions on the repo <code class="language-plaintext highlighter-rouge">README</code> file, and <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request">create a pull request</a> that adds the name of your plugin to the <a href="https://github.com/openstenoproject/plover_plugins_registry/blob/421efcac42f0b2aae8cfa039c01b8c281371b621/registry.json"><code class="language-plaintext highlighter-rouge">registry.json</code></a> file.</p> <p>Since the Plover Practice Plugin is only for educational purposes, it does not belong in the registry, and hence we will not be making a pull request for it. However, here is an example of the pull request that added the <a href="https://github.com/paulfioravanti/plover-q-and-a">Plover Q&amp;A</a> plugin to the registry; you would create a similar one for your own plugin.</p> <p>It can sometimes take a while for pull requests to be approved, so do not get disheartened! As long as your plugin code is in a public git repo, people that really want it immediately can download it from there and install it manually, just like we did during development. So, I would recommend adding instructions on how to do that in your <code class="language-plaintext highlighter-rouge">README.md</code> file until your plugin makes it into the registry (<a href="https://github.com/paulfioravanti/plover-practice-plugin?tab=readme-ov-file#install">example</a>).</p> <p>When your pull request gets merged, your plugin will appear in everyone’s Plover Plugin list. Well done, and thanks for contributing to Plover’s ecosystem!</p> <h2 id="conclusion">Conclusion</h2> <p>My first Plover plugin was <a href="https://github.com/paulfioravanti/plover-q-and-a">Plover Q&amp;A</a>, and it was a plugin I did not want to make.</p> <p>It started as just a plain old <a href="https://github.com/paulfioravanti/steno-dictionaries/blob/b5b97066862bb5868ff4ce2dd8fe149e0c198291/dictionaries/q-and-a.json">JSON dictionary</a>, but having to constantly change speaker names for multiple entries was painful enough to make me change it into a <a href="https://github.com/paulfioravanti/steno-dictionaries/blob/697934326e30402f573538876d18b180d92f6eab/dictionaries/q_and_a.py">Plover Python dictionary</a> (thanks to the awesome <a href="https://github.com/openstenoproject/plover_python_dictionary">Plover Python dictionary plugin</a>).</p> <p>However, I found I <em>still</em> needed to manually update speaker names (though not as many as before), and eventually wanted to add more features like:</p> <ul> <li>keeping speaker names in some kind of internal state</li> <li>specifying custom config</li> <li>using Plover’s “Reconnect” button.</li> </ul> <p>Sound familiar? :) The pain of not having a plugin was too much, and the only way forward from there was to learn how to build the plugin I had been avoiding for so long, and take my first deep dive into Python and its ecosystem. I used to dread having to think about making a plugin, and now I am way more comfy with it.</p> <p>Hopefully this guide has been able to help lower any barriers you may feel exist between some cool thing you would love to see Plover do, and actually making it real. I look forward to seeing what you make!</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>You can confirm this in the <a href="https://docs.github.com/en/actions">GitHub action</a> that Plover uses to <a href="https://github.com/openstenoproject/plover/blob/53c416fd893d62ab9ede5898129da3be856e910d/.github/workflows/ci/workflow_context.yml#L11">build application distributions</a> for its supported platforms (Windows, macOS, Linux). <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p>The latest version of Python as of this writing is <a href="https://www.python.org/downloads/release/python-3121/">Python 3.12.1</a>. I initially started building Plover plugins using Python 3.11 locally. However, I found out the hard way that some language features I used were introduced in Python versions released after 3.9, like the <a href="https://docs.python.org/3/reference/compound_stmts.html#match"><code class="language-plaintext highlighter-rouge">match</code> statement</a> (added in Python 3.10). This meant that although my plugin code tested fine locally, when I attempted to run it within Plover, it errored out since Python 3.9 has no idea what a <code class="language-plaintext highlighter-rouge">match</code> statement is (this problem is not limited to just your own code, but also if your plugin has <a href="https://github.com/paulfioravanti/plover-run-applescript/blob/f6d522a985cf698127751ae437ff938c06214116/README.md#pyxa-version">third-party dependencies that use syntax features add after Python 3.9</a>). Locally developing on your target environment, and tailoring your code to it, is definitely recommended! <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3" role="doc-endnote"> <p>See also my <a href="https://github.com/paulfioravanti/dotfiles/blob/3c35334c219ff472b428d49531fb81d38bfc9b33/asdf/setup.sh">asdf installation script</a> and <a href="https://github.com/paulfioravanti/dotfiles/blob/3c35334c219ff472b428d49531fb81d38bfc9b33/zshrc#L56">asdf zsh config</a> for more asdf setup examples. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4" role="doc-endnote"> <p>It would seem that the naming conventions for project directories is to <a href="https://en.wiktionary.org/wiki/dasherize">dasherize</a> them. This is probably to distinguish them from the <a href="https://en.wiktionary.org/wiki/snake_case">snake case</a> naming convention used here for <a href="https://docs.python.org/3/tutorial/modules.html">modules</a> and <a href="https://docs.python.org/3/tutorial/modules.html#packages">packages</a>. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:5" role="doc-endnote"> <p>This seems like a good guiding principle for any Plover plugin, rather than a <a href="https://plover.readthedocs.io/en/latest/plugin-dev/setup.html#module-based-structure">module-based structure</a>, unless you really know upfront that the scope of your plugin is going to be very small, and will <em>always stay that way</em>. If you are able to do this consistently, I would love to be able to borrow your <a href="https://en.wikipedia.org/wiki/Crystal_ball">crystal ball</a>! <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:6" role="doc-endnote"> <p>Setuptools seems to have adopted <a href="https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html"><code class="language-plaintext highlighter-rouge">pyproject.toml</code></a> files as its preferred configuration standard moving forward. However, I found that attempting to use one with a Plover plugin resulted in its entry <a href="https://discord.com/channels/136953735426473984/1034561149947089007/1198977782160568340">mysteriously disappearing</a> from Plover’s Plugin Manager when Plover updated its plugin registry. Even though everything worked as expected during development when using a <code class="language-plaintext highlighter-rouge">pyproject.toml</code> config file (all the way through to deploying out to <a href="https://pypi.org/">PyPI</a>), it would seem that more development work needs to happen on Plover before its use becomes possible.</p> <p>Therefore, as of this writing, regardless of whether you see any documentation that says <code class="language-plaintext highlighter-rouge">setup.cfg</code> and/or <code class="language-plaintext highlighter-rouge">setup.py</code> files are “legacy” (eg <a href="https://pypi.org/project/pip/"><code class="language-plaintext highlighter-rouge">pip</code></a>’s <a href="https://pip.pypa.io/en/stable/reference/build-system/setup-py/">packaging documentation</a> etc), it seems they are currently the only viable option. I would love to be wrong about this, though, so please leave a comment or reach out to me if you have had success with using a <code class="language-plaintext highlighter-rouge">pyproject.toml</code> file with your own Plover plugin! <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:7" role="doc-endnote"> <p>Like the excellent <a href="https://github.com/KoiOates/plover_dict_commands">Plover Dict Commands</a> plugin. <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:8" role="doc-endnote"> <p>The Plover <a href="https://plover.readthedocs.io/en/latest/plugin-dev/commands.html">Plugin Commands documentation</a> shows commands as starting with <code class="language-plaintext highlighter-rouge">PLOVER</code>, which is correct: <code class="language-plaintext highlighter-rouge">COMMAND</code> (with a preceding colon [<code class="language-plaintext highlighter-rouge">:COMMAND</code>]) is a “<a href="https://github.com/openstenoproject/plover/wiki/Dictionary-Format#friendly-command-names">friendly command alias</a>” for it. Therefore, either <code class="language-plaintext highlighter-rouge">PLOVER</code> or <code class="language-plaintext highlighter-rouge">COMMAND</code> can be used to define commands, but I tend to use the following rule of thumb with naming in an effort to better communicate a command’s intent:</p> <ul> <li>If the scope of the action the command performs is limited to the Plover application itself, use <code class="language-plaintext highlighter-rouge">PLOVER</code> (eg built-in Plover commands like <code class="language-plaintext highlighter-rouge">{PLOVER:FOCUS}</code>, <code class="language-plaintext highlighter-rouge">{PLOVER:ADD_TRANSLATION}</code> etc)</li> <li>If the command does anything outside Plover, use <code class="language-plaintext highlighter-rouge">COMMAND</code></li> </ul> <p><a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:9" role="doc-endnote"> <p>Entry points can also be written in uppercase, if that helps you to understand the mapping between the outline and entry point: <code class="language-plaintext highlighter-rouge">OPEN_URL = plover_practice_plugin.command:open_url</code>. It would seem to be convention for entry points to be named in lowercase, but when Plover registers a plugin internally, it <a href="https://github.com/openstenoproject/plover/blob/53c416fd893d62ab9ede5898129da3be856e910d/plover/registry.py#L48">downcases the name</a> anyway, so you can technically name it in any case you please. <a href="#fnref:9" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:10" role="doc-endnote"> <p>More information about this syntax pattern can be found in Setuptools’ <a href="https://setuptools.pypa.io/en/latest/userguide/entry_point.html#entry-points-syntax">Entry Points Syntax documentation</a>. <a href="#fnref:10" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:11" role="doc-endnote"> <p>The <a href="https://github.com/openstenoproject/plover_plugins_manager/blob/ba368cbd89d48d81ef7d42b626d59fd15c8b17d3/setup.cfg#L53"><code class="language-plaintext highlighter-rouge">plover_plugins</code> script</a> is essentially a <a href="https://github.com/openstenoproject/plover_plugins_manager/blob/ba368cbd89d48d81ef7d42b626d59fd15c8b17d3/plover_plugins_manager/__main__.py#L40">wrapper around <code class="language-plaintext highlighter-rouge">pip</code></a>, and so the <code class="language-plaintext highlighter-rouge">--editable</code> flag here allows you to <a href="https://pip.pypa.io/en/stable/topics/local-project-installs/#editable-installs">“install your project without copying any files</a>. Instead, the files in the development directory are added to Python’s import path”. I initially thought that this meant that when we make changes to existing files that we want to test, we only need to restart the Plover application, rather than run the <code class="language-plaintext highlighter-rouge">plover_plugins</code> script every time. However, I have found that not to be the case, with every change requiring the script to be re-run. <a href="#fnref:11" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:12" role="doc-endnote"> <p>In order to make the <code class="language-plaintext highlighter-rouge">plover</code> command work as-written in the Plover wiki page on my operating system (macOS), I ended up adding the following line to my <a href="https://www.zsh.org/">zsh</a> initialisation file (<code class="language-plaintext highlighter-rouge">.zshrc</code>):</p> <p><code class="language-plaintext highlighter-rouge">alias plover=/Applications/Plover.app/Contents/MacOS/Plover</code> <a href="#fnref:12" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:13" role="doc-endnote"> <p>For a more robust implementation of a command plugin, including error handling etc, check out my <a href="https://github.com/paulfioravanti/plover-run-applescript">Plover Run AppleScript</a> plugin. <a href="#fnref:13" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:14" role="doc-endnote"> <p>Looking through the <a href="https://plover.readthedocs.io/en/latest/plugins.html">Plover Plugin Guide</a>, you may have also read about <a href="https://plover.readthedocs.io/en/latest/plugin-dev/macros.html">Macro</a> plugins, and, if you are like me, been a bit confused as to how they differ from Metas. There seems to be some overlap between their purposes, and I have found they often get lumped together (<a href="https://github.com/nsmarkop/plover_last_translation">Plover Last Translation</a> even has both macro and meta versions of its functions that do the same thing).</p> <p>After looking through how metas and macros are used in different plugins, as well as in <a href="https://github.com/openstenoproject/plover/blob/53c416fd893d62ab9ede5898129da3be856e910d/setup.cfg#L83">Plover itself</a>, my current personal <a href="https://en.wikipedia.org/wiki/Rule_of_thumb">rule of thumb</a> moving forward would be:</p> <blockquote> <p>“Use metas to output new text, and use macros to change or transform text that has already been output.”</p> </blockquote> <p>However, there are plenty of exceptions to this “rule”, like <a href="https://github.com/morinted/plover_emoji">Plover Emoji</a>, which converts written text to <a href="https://en.wikipedia.org/wiki/Emoji">emojis</a>, being a meta plugin, and Plover’s <a href="https://github.com/openstenoproject/plover/blob/53c416fd893d62ab9ede5898129da3be856e910d/setup.cfg#L102"><code class="language-plaintext highlighter-rouge">retro_case</code> and <code class="language-plaintext highlighter-rouge">retro_currency</code></a> plugins being metas, as apposed to all its other <a href="https://github.com/openstenoproject/plover/blob/53c416fd893d62ab9ede5898129da3be856e910d/setup.cfg#L85"><code class="language-plaintext highlighter-rouge">retro_</code> functions</a> being macros.</p> <p>One factor influencing that, though, could have been that macros were <a href="https://github.com/openstenoproject/plover/commit/ce40f8e1eb486226096dbca979ad175c3408431a">added to Plover in 2017</a>, while metas were <a href="https://github.com/openstenoproject/plover/commit/23db9f3ce1f4ec62ffd11055d54525b1691e74ef">added in 2020</a>. Perhaps <code class="language-plaintext highlighter-rouge">retro_case</code> and <code class="language-plaintext highlighter-rouge">retro_currency</code> were written as metas instead of macros because metas were created to supersede macros, which explains their ability to also change previous output via the <code class="language-plaintext highlighter-rouge">prev_replace</code> property of Plover’s <a href="https://github.com/openstenoproject/plover/blob/53c416fd893d62ab9ede5898129da3be856e910d/plover/formatting.py#L571"><code class="language-plaintext highlighter-rouge">_Action</code></a> class…? I do not know, and have not been able to find a clear answer, so I will stick with my rule of thumb for now. <a href="#fnref:14" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:15" role="doc-endnote"> <p>The naming, purpose, and details of <a href="https://github.com/openstenoproject/plover/blob/53c416fd893d62ab9ede5898129da3be856e910d/plover/formatting.py#L254"><code class="language-plaintext highlighter-rouge">_Context</code></a> and <a href="https://github.com/openstenoproject/plover/blob/53c416fd893d62ab9ede5898129da3be856e910d/plover/formatting.py#L571"><code class="language-plaintext highlighter-rouge">_Action</code></a> is something that can be glossed over for purposes of this post (and given their underscored naming, it would seem they are thought of as Plover internal details, even though you interact directly with objects of those classes in your plugin code…). There does not currently seem to be any high level documentation around them, so reading the code is currently your only real reference for gathering any further information about what they do and how they relate to each other. <a href="#fnref:15" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:16" role="doc-endnote"> <p>If the <code class="language-plaintext highlighter-rouge">[int(arg) for arg in argument.split(":")]</code> code looks confusing or unfamiliar, check out Python’s documentation on <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">list comprehensions</a>, a data structure used heavily in Python code, and definitely worth familiarising yourself with. <a href="#fnref:16" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:17" role="doc-endnote"> <p>Yes, technically <a href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator">pseudo-random</a>, but the number’s unpredictability is not a critical feature of the plugin, so it will do for our purposes. <a href="#fnref:17" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:18" role="doc-endnote"> <p>I tried a multitude of ways that Python allows you to run a <a href="https://en.wikipedia.org/wiki/Shell_(computing)">shell</a> command before settling on using <code class="language-plaintext highlighter-rouge">os.popen</code>. In order to search for variables, the only way I found in which I was able to successfully reach past Plover’s local environment, and into the user’s environment, was to use the <code class="language-plaintext highlighter-rouge">os.popen</code> function, and run the command in <a href="https://www.gnu.org/software/bash/manual/html_node/Interactive-Shell-Behavior.html">interactive mode</a> (<code class="language-plaintext highlighter-rouge">-i</code> flag). I would love to hear from you if you were successful using any other method, as this may just be a macOS quirk! <a href="#fnref:18" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:19" role="doc-endnote"> <p>For an example of a plugin that hooks into <em>all</em> of Plover’s Engine Hooks, check out my <a href="https://github.com/paulfioravanti/plover-steno-engine-hooks-logger">Plover Steno Engine Hooks Logger</a> plugin (only really potentially useful during plugin development) <a href="#fnref:19" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:20" role="doc-endnote"> <p>The whole <a href="https://docs.python.org/3/library/stdtypes.html#str.join"><code class="language-plaintext highlighter-rouge">join</code></a>-ing and <a href="https://docs.python.org/3/library/stdtypes.html#str.split"><code class="language-plaintext highlighter-rouge">split</code></a>-ing in the code was added because running <code class="language-plaintext highlighter-rouge">_expand</code> on each env var name in a large list significantly impacted the plugin’s start up time. It is much faster to send a single string containing all the var names to the shell, like <code class="language-plaintext highlighter-rouge">"$VAR1,$VAR2,..."</code>, and have them all expanded inline at the same time. <a href="#fnref:20" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:21" role="doc-endnote"> <p>For an example of a extension plugin that covers this functionality, but is more thoughtfully architected (separation of plugin-specific logic from Plover-dependent code etc), includes error handling, and contains code quality features like <a href="https://pytest.org/">pytest</a> automated tests (where possible for non-Plover-dependent code), <a href="https://github.com/pylint-dev/pylint">pylint</a> static code analysis, and <a href="https://github.com/python/mypy">mypy</a> type checking, see my <a href="https://github.com/paulfioravanti/plover-local-env-var">Plover Local Env Var</a> plugin. <a href="#fnref:21" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:22" role="doc-endnote"> <p>Other popular ones include <a href="https://about.gitlab.com/">GitLab</a> and <a href="https://bitbucket.org/">Bitbucket</a>. <a href="#fnref:22" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:23" role="doc-endnote"> <p>I found this out the hard way while developing the <a href="https://github.com/paulfioravanti/plover-run-applescript">Plover Run AppleScript</a> plugin. In order to get automated tests to work in my <a href="https://github.com/paulfioravanti/plover-run-applescript/blob/f6d522a985cf698127751ae437ff938c06214116/.github/workflows/ci.yml">GitHub CI workflow</a> for it, I <a href="https://github.com/paulfioravanti/plover-run-applescript/blob/f6d522a985cf698127751ae437ff938c06214116/.github/workflows/ci.yml#L16">changed the OS</a> to be <code class="language-plaintext highlighter-rouge">runs-on: macos-latest</code>. When I attempted to apply that to the <a href="https://github.com/paulfioravanti/plover-run-applescript/blob/f6d522a985cf698127751ae437ff938c06214116/.github/workflows/release.yml">release workflow</a>, publishing to PyPI errored out with a helpful message instructing me to change the config back to <code class="language-plaintext highlighter-rouge">runs-on: ubuntu-latest</code>. <a href="#fnref:23" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:24" role="doc-endnote"> <p><strong>Update Feb 8, 2024</strong>: Wouldn’t you know it, there is a better way to do this without needing that conditional: <a href="https://github.com/paulfioravanti/plover-run-applescript/blob/8d9d14a76c31fd794416367bfa5c727751ca564c/.github/workflows/release.yml">this example</a> just uses <code class="language-plaintext highlighter-rouge">on: push: tags: - "v*"</code> config to make sure the job only runs when tags are pushed up that begin with “v”. It also has the benefit of <a href="https://github.com/paulfioravanti/plover-run-applescript/blob/8d9d14a76c31fd794416367bfa5c727751ca564c/.github/workflows/release.yml#L34">auto-generating a GitHub release</a>, and not needing to skip any jobs. Definitely shop around and check out other people’s plugin GitHub action config for other ways of doing things! <a href="#fnref:24" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:25" role="doc-endnote"> <p>We will just use a <a href="https://git-scm.com/book/en/Git-Basics-Tagging">lightweight tag</a> for simplicity’s sake, rather than an <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging#_annotated_tags">annotated tag</a>. <a href="#fnref:25" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="plover"/><category term="python"/><category term="steno"/><category term="stenography"/><category term="plugin"/><summary type="html"><![CDATA[Level up your steno chording with the power of Python! Hook into Plover plugins, and discover a world beyond keystrokes.]]></summary></entry><entry><title type="html">Coding Test Review: Culture Amp</title><link href="https://www.paulfioravanti.com/blog/coding-test-review-culture-amp/" rel="alternate" type="text/html" title="Coding Test Review: Culture Amp"/><published>2023-12-07T15:10:00+11:00</published><updated>2024-01-17T12:24:00+11:00</updated><id>https://www.paulfioravanti.com/blog/coding-test-review-culture-amp</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/coding-test-review-culture-amp/"><![CDATA[<p>Cold on the heels of the <a href="https://www.paulfioravanti.com/blog/coding-test-review-sentia/">last coding test review I did</a>, I have decided to write up some thoughts on my attempts at a couple of <a href="https://www.cultureamp.com/">Culture Amp</a>’s coding tests.</p> <p>I was originally forwarded Culture Amp’s web developer back end and front end tests a few years ago, so I cannot be certain whether they are still being used at the time of this writing, but I can at least confirm they were a part of their hiring process at one point in time.</p> <p>In preparation for writing this post, I went back and cleaned out some digital cobwebs on my solutions, including changing <a href="https://en.wikipedia.org/wiki/Continuous_integration">continuous integration</a> provider to <a href="https://github.com/features/actions">GitHub Actions</a>, and <a href="https://en.wikipedia.org/wiki/Code_refactoring">refactoring</a> code to suit my current sensibilities around what I think “good” code looks like. But, for the most part, the main code structures have stayed the same.</p> <p>I will review the back end test first, then the front end, and the companion codebases can be found here:</p> <ul> <li><a href="https://github.com/paulfioravanti/survey_tool_ruby">Survey Tool Ruby</a> (back end)</li> <li><a href="https://github.com/paulfioravanti/survey_tool_elixir">Survey Tool Elixir</a> (back end)</li> <li><a href="https://github.com/paulfioravanti/survey_tool_elm">Survey Tool Elm</a> (front end)</li> </ul> <blockquote> <p>Disclaimer: I am not, nor have ever been, an employee of Culture Amp, nor have I ever applied for employment there, nor is this post some kind of attempt to get them to employ me; I just did their coding tests for my own definition of “fun”.</p> <p>If you are applying there, or plan to in the future, you may want to stop reading, and consider pretending that this blog post (and <a href="https://github.com/search?q=+culture+amp+test&amp;type=repositories&amp;s=&amp;o=desc">all the other solutions people have posted</a>) does not exist, so you can greet their coding tests with fresh eyes.</p> </blockquote> <h2 id="thematic-relevance">Thematic Relevance</h2> <p>Before getting started, I would like to call out what I think is one of the strongest features of the tests: they are thematically relevant to the business.</p> <p>When planning technical tests for candidates to perform, it can be tempting to just get them to do either an <a href="https://joneaves.wordpress.com/2014/07/21/toy-robot-coding-test/">existing popular coding test</a>, an example from a coding community like <a href="https://exercism.org/">Exercism</a>, or an obscure problem from some for-pay coding assessment platform. Culture Amp chose not to take this route: <em>surveys</em> would seem to be one of the primary mechanisms that their product uses to collect employee engagement feedback and gauge their well-being, and, to their credit, both custom coding tests revolve around them.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2023-12-07/jeremy-thomas-FO7bKvgETgQ-unsplash.jpg" alt="stack rock on seashore"/> <figcaption> Photo by <a href="https://unsplash.com/@jeremythomasphoto?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Jeremy Thomas </a> on <a href="https://unsplash.com/photos/stack-rock-on-seashore-FO7bKvgETgQ?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Unsplash </a> </figcaption> </figure> </div> <blockquote> <h2 id="original-back-end-test-requirements">Original Back End Test Requirements</h2> <p>Your task is to build a CLI application to parse and display survey data from CSV files, and display the results.</p> <h3 id="data-format">Data Format</h3> <h4 id="survey-data">Survey Data</h4> <p>Included in the folder <code class="language-plaintext highlighter-rouge">example-data</code> are three sample data files defining surveys:</p> <ul> <li><code class="language-plaintext highlighter-rouge">survey-1.csv</code></li> <li><code class="language-plaintext highlighter-rouge">survey-2.csv</code></li> <li><code class="language-plaintext highlighter-rouge">survey-3.csv</code></li> </ul> <p>Each row represents a question in that survey with headers defining what question data is in each column.</p> <h4 id="response-data">Response Data</h4> <p>And three sample files containing responses to the corresponding survey:</p> <ul> <li><code class="language-plaintext highlighter-rouge">survey-1-responses.csv</code></li> <li><code class="language-plaintext highlighter-rouge">survey-2-responses.csv</code></li> <li><code class="language-plaintext highlighter-rouge">survey-3-responses.csv</code></li> </ul> <p>Response columns are always in the following order:</p> <ul> <li>Email</li> <li>Employee Id</li> <li>Submitted At Timestamp (if there is no submitted at timestamp, you can assume the user did not submit a survey)</li> <li>Each column from the fourth onwards are responses to survey questions.</li> <li>Answers to Rating Questions are always an integer between (and including) 1 and 5.</li> <li>Blank answers represent not answered.</li> <li>Answers to Single Select Questions can be any string.</li> </ul> <h3 id="the-application">The Application</h3> <p>Your coding challenge is to build an application that allows the user to specify a survey file and a file for it’s results. It should read them in and present a summary of the survey results. A command line application that takes a data file as input is sufficient.</p> <p>The output should include:</p> <ol> <li> <p>The participation percentage and total participant counts of the survey.</p> <ul> <li>Any response with a ‘<code class="language-plaintext highlighter-rouge">submitted_at</code>’ date has submitted and is said to have participated in the survey.</li> </ul> </li> <li> <p>The average for each rating question</p> <ul> <li>Results from unsubmitted surveys should not be considered in the output.</li> </ul> </li> </ol> <h3 id="other-information">Other information</h3> <p>Please include a Readme with any additional information you would like to include. You may wish to use it to explain any design decisions.</p> <p>Despite this being a small command line app, please approach this as you would a production problem using whatever approach to coding and testing you feel appropriate. Successful candidates will be asked to extend their implementation in a pair programming session as a component of the interview, so consider extensibility.</p> </blockquote> <h2 id="general-approach">General Approach</h2> <p>These requirements read to me like an “<a href="https://en.wikipedia.org/wiki/Extract,_transform,_load">extract, transform, load</a>” problem:</p> <ul> <li>survey raw data needs to be <strong><em>extracted</em></strong> from <a href="https://en.wikipedia.org/wiki/Comma-separated_values">CSV</a> files</li> <li>then parsed and <strong><em>transformed</em></strong> into a summary report</li> <li>then <strong><em>loaded</em></strong> (read: output) through the <a href="https://en.wikipedia.org/wiki/Command-line_interface">CLI</a></li> </ul> <p>This thinking helped inform how the application architecture evolved, resulting in the responsibilities being split between three main modules:</p> <h3 id="survey_parser"><code class="language-plaintext highlighter-rouge">survey_parser</code></h3> <p>Responsible for knowing how to open CSV files and read in their data rows. I also decided to slightly expand the scope of an “extractor” by having it take on some of the data transformation responsibilities: making it the bridge between raw data in files, and <a href="https://cio-wiki.org/wiki/Data_Enrichment">rich</a> data structures within the application.</p> <h3 id="report"><code class="language-plaintext highlighter-rouge">report</code></h3> <p>Responsible for collating all the disparate parts of the rich data together to <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter">present</a> a structured report, in plain text, that was ready to be sent to the “loader”.</p> <h3 id="cli"><code class="language-plaintext highlighter-rouge">cli</code></h3> <p>Responsible for all functionality related to input and output on a <a href="https://en.wikipedia.org/wiki/Terminal_emulator">terminal emulator</a>. It parses CLI flags and arguments given to it, and prints out the text of survey report tables (or any errors) to the window.</p> <h3 id="technical-choices">Technical Choices</h3> <p>At the time I received the test, Culture Amp was hiring <a href="https://www.ruby-lang.org/en/">Ruby</a> developers, so I decided to go with that flow. Ruby has a <a href="https://github.com/ruby/csv">CSV module</a> built-in to its standard library, meaning that the only application-level external library I chose to leverage was <a href="https://github.com/tj/terminal-table">Terminal Table</a> to help me construct the survey report.</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2023-12-07/ruby-screenshot.jpg" alt="Screenshot of the survey tool implementation done in Ruby"/> <figcaption> <a href="https://github.com/paulfioravanti/survey_tool_ruby"> Survey Tool Ruby </a> </figcaption> </figure> </div> <p>I try to make coding test solutions “showcase code”, and for me that means using as many development tools as possible that can help assess and (subjectively) affirm whether I have written code that is “acceptable” within the standards of the chosen language community. For this project, those tools were:</p> <ul> <li><a href="https://github.com/minitest/minitest">minitest</a>: Although I was more familiar with <a href="https://rspec.info/">RSpec</a>, I decided to use minitest due to my newfound affection for more terse syntax during testing, no doubt influenced from using <a href="https://hexdocs.pm/ex_unit/ExUnit.html">ExUnit</a> in my <a href="https://elixir-lang.org/">Elixir</a> projects. No regrets; would use again</li> <li><a href="https://github.com/simplecov-ruby/simplecov">SimpleCov</a>: It seems to not be <em>de jour</em> as of this writing to aim for 100% test coverage, but I do anyway. I think if you write code that contains business logic, you should know what it does, and how it acts under a variety of circumstances: coverage gives me a litmus test to make sure I do not miss anything obvious</li> <li><a href="https://github.com/rubocop/rubocop">Rubocop</a> and <a href="https://github.com/troessner/reek">Reek</a>: I like having these little robots looking over my shoulder, slapping my wrist whenever I write code that could potentially violate the <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">principle of least surprise</a> to other Ruby developers</li> <li><a href="https://github.com/lsegal/yard">YARD</a>: Documentation is the most neglected part of many software application projects, so this was a personal challenge to just make sure I grind it out for great justice</li> </ul> <p>With regard to code implementation choices, the following are a couple I think are worth making note of.</p> <h3 id="facades">Facades</h3> <p><a href="https://en.wikipedia.org/wiki/Facade_pattern">Facades</a> are easily my favourite <a href="https://en.wikipedia.org/wiki/Software_design_pattern">software design pattern</a>, and you can see five of them in the codebase: wherever there is a “boundary” <code class="language-plaintext highlighter-rouge">foo.rb</code> file and a corresponding <code class="language-plaintext highlighter-rouge">foo/</code> directory containing all of the <code class="language-plaintext highlighter-rouge">Foo</code> module’s implementation details. The front-facing <code class="language-plaintext highlighter-rouge">foo.rb</code> “API” file contains no real logic, and just <a href="https://ruby-doc.org/3.2.2/stdlibs/forwardable/Forwardable.html">delegates</a> method calls to its child modules, masking complexity from other modules that call it.</p> <h3 id="adapters">Adapters</h3> <p>Whenever I need to leverage code from third-party libraries, like Terminal Table, I instinctively want to lock down and quarantine its use to a single module with an <a href="https://en.wikipedia.org/wiki/Adapter_pattern">adapter</a>, rather than have it permeate throughout the codebase. For this application, I would rather only have to change one module if I felt the need to change table libraries, rather than hunt through the codebase to find everywhere it is referenced. Therefore, you will only ever see <code class="language-plaintext highlighter-rouge">Terminal::Table</code> referenced inside <code class="language-plaintext highlighter-rouge">SurveyTool::Report::Table</code>.</p> <p>I have even done the same thing with internal methods like good ol’ <a href="https://ruby-doc.org/3.2.2/Kernel.html#method-i-puts"><code class="language-plaintext highlighter-rouge">puts</code></a>. It may be available everywhere thanks to it being a part of Ruby’s <a href="https://ruby-doc.org/3.2.2/Kernel.html"><code class="language-plaintext highlighter-rouge">Kernel</code></a> module, but I have made outputting to the terminal strictly the concern of the <code class="language-plaintext highlighter-rouge">CLI</code> module. So, I treat <code class="language-plaintext highlighter-rouge">puts</code> like a third party library, and force all code to go through <code class="language-plaintext highlighter-rouge">CLI</code> to get to it, in an adapter-like way. Is this too pedantic? Perhaps, but I still like having a <a href="https://en.wikipedia.org/wiki/Single_source_of_truth">single source of truth</a> for specific functionality.</p> <div class="centered-image" style="width: 95%"> <figure> <img src="/assets/images/2023-12-07/jared-rice-xce530fBHrk-unsplash.jpg" alt="woman in black tank top sitting on brown wooden dock during daytime"/> <figcaption> Photo by <a href="https://unsplash.com/@jareddrice?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Jared Rice </a> on <a href="https://unsplash.com/photos/woman-in-black-tank-top-sitting-on-brown-wooden-dock-during-daytime-xce530fBHrk?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Unsplash </a> </figcaption> </figure> </div> <h2 id="take-two-elixir">Take Two: Elixir</h2> <p>I enjoyed doing this test enough that I wondered how difficult doing a straight port of it to Elixir would be. To the surprise of probably no one who has experience with both Ruby and Elixir, it was fairly straightforward (though this is also likely due to Elixir having changed the way I write Ruby to have a more <a href="https://en.wikipedia.org/wiki/Functional_programming">functional</a> bent), but still a good learning experience.</p> <p>The general approach and technical choices were mostly the same, with a few necessary tweaks like needing to use an <a href="https://github.com/beatrichartz/csv">external CSV library</a> this time, and <a href="https://github.com/djm/table_rex">TableRex</a> for the report. I could not get the display of the reports to mimic Terminal Table nicely, so I decided to make them look less table-like.</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2023-12-07/elixir-screenshot.jpg" alt="Screenshot of the survey tool implementation done in Elixir"/> <figcaption> <a href="https://github.com/paulfioravanti/survey_tool_elixir"> Survey Tool Elixir </a> </figcaption> </figure> </div> <p>The flavour of the development stack was similar to the Ruby version as well: <a href="https://hexdocs.pm/ex_unit/ExUnit.html">ExUnit</a> for tests, <a href="https://github.com/parroty/excoveralls">ExCoveralls</a> for coverage, <a href="https://github.com/rrrene/credo">Credo</a> for code quality, and <a href="https://github.com/elixir-lang/ex_doc">ExDoc</a> for documentation.</p> <p>Further to that, though, Elixir also has a nice <a href="https://hexdocs.pm/elixir/typespecs.html">Typespec</a> notation that can be used with tools like <a href="https://www.erlang.org/doc/man/dialyzer.html">Dialyzer</a>, which makes for a great extra set of technical documentation (good for showcase code!), and can also help surface some kinds of bugs. So, I leveraged the <a href="https://github.com/jeremyjh/dialyxir">Dialyxir</a> and <a href="https://github.com/esl/gradient">Gradient</a> libraries to help keep an eye on my types during development.</p> <h3 id="sharing-types">Sharing Types</h3> <p>Speaking of types, probably my biggest learning regarding their use in Elixir during this portover was figuring out how to:</p> <ul> <li>surface a type declared in a internal module up to its facade boundary module</li> <li>have other modules be able to use those surfaced types without knowing some (or any) of their specific implementation details</li> </ul> <p>Let’s illustrate this with an example. <code class="language-plaintext highlighter-rouge">SurveyTool.Report.Table</code>, an implementation detail module of <code class="language-plaintext highlighter-rouge">SurveyTool.Report</code>, needs to know about the <code class="language-plaintext highlighter-rouge">SurveyTool.SurveyParser.Survey</code> type as part of the typespecs of its <code class="language-plaintext highlighter-rouge">render/1</code> function, as well as during pattern matching in its <code class="language-plaintext highlighter-rouge">survey_body/2</code> function:</p> <p><strong><code class="language-plaintext highlighter-rouge">lib/survey_tool/report/table.ex</code></strong></p> <div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">Report</span><span class="o">.</span><span class="no">Table</span> <span class="k">do</span>
  <span class="c1"># ...</span>
  <span class="n">alias</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">SurveyParser</span><span class="o">.</span><span class="no">Survey</span>
  <span class="n">alias</span> <span class="no">TableRex</span><span class="o">.</span><span class="no">Table</span>

  <span class="nv">@spec</span> <span class="n">render</span><span class="p">(</span><span class="no">Survey</span><span class="o">.</span><span class="n">t</span><span class="p">())</span> <span class="p">::</span> <span class="ss">:ok</span>
  <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">survey</span><span class="p">)</span> <span class="k">do</span>
    <span class="c1"># ...</span>
    <span class="no">Table</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
    <span class="o">|&gt;</span> <span class="c1"># ...</span>
    <span class="o">|&gt;</span> <span class="n">survey_body</span><span class="p">(</span><span class="n">survey</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">survey_body</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="p">%</span><span class="no">Survey</span><span class="p">{</span><span class="ss">participant_count:</span> <span class="n">count</span><span class="p">})</span> <span class="ow">when</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="k">do</span>
    <span class="n">table</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">survey_body</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="p">%</span><span class="no">Survey</span><span class="p">{</span><span class="ss">questions:</span> <span class="n">questions</span><span class="p">})</span> <span class="k">do</span>
    <span class="c1"># add questions to table etc...</span>
  <span class="k">end</span>
  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div> <p>The encapsulation problem here is that <code class="language-plaintext highlighter-rouge">SurveyTool.Report.Table</code> is reaching past the <code class="language-plaintext highlighter-rouge">SurveyTool.SurveyParser</code> boundary, and into <code class="language-plaintext highlighter-rouge">SurveyTool.SurveyParser.Survey</code>, an implementation detail. So, how can we provide the <code class="language-plaintext highlighter-rouge">SurveyTool.Report.Table</code> module with the information it needs, at the <code class="language-plaintext highlighter-rouge">SurveyTool.SurveyParser</code> level?</p> <p>Since <code class="language-plaintext highlighter-rouge">SurveyTool.SurveyParser.Survey</code> exposes its <code class="language-plaintext highlighter-rouge">t()</code> type in the following way…</p> <p><strong><code class="language-plaintext highlighter-rouge">lib/survey_tool/survey_parser/survey.ex</code></strong></p> <div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">SurveyParser</span><span class="o">.</span><span class="no">Survey</span> <span class="k">do</span>
  <span class="c1"># ...</span>
  <span class="n">alias</span> <span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">as:</span> <span class="no">Survey</span>

  <span class="nv">@typedoc</span> <span class="s2">"Survey struct type."</span>
  <span class="nv">@type</span> <span class="n">t</span><span class="p">()</span> <span class="p">::</span> <span class="p">%</span><span class="no">Survey</span><span class="p">{</span>
          <span class="ss">participant_count:</span> <span class="n">integer</span><span class="p">,</span>
          <span class="ss">questions:</span> <span class="n">questions_list</span><span class="p">(),</span>
          <span class="ss">response_count:</span> <span class="n">integer</span>
        <span class="p">}</span>
  <span class="nv">@typep</span> <span class="n">questions_list</span><span class="p">()</span> <span class="p">::</span> <span class="c1"># ...</span>
  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div> <p>…we can “hoist” this type up to the <code class="language-plaintext highlighter-rouge">SurveyTool.SurveyParser</code> boundary module and expose it there:</p> <p><strong><code class="language-plaintext highlighter-rouge">lib/survey_tool/survey_parser.ex</code></strong></p> <div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">SurveyParser</span> <span class="k">do</span>
  <span class="c1"># ...</span>
  <span class="n">alias</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">SurveyParser</span><span class="o">.</span><span class="no">Survey</span>

  <span class="nv">@type</span> <span class="n">survey</span><span class="p">()</span> <span class="p">::</span> <span class="no">Survey</span><span class="o">.</span><span class="n">t</span><span class="p">()</span>
  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div> <p>Now, we can change <code class="language-plaintext highlighter-rouge">SurveyTool.Report.Table</code> to bring in the <code class="language-plaintext highlighter-rouge">survey()</code> type and use it as its own <a href="https://hexdocs.pm/elixir/typespecs.html#user-defined-types">private type</a> (<code class="language-plaintext highlighter-rouge">@typep</code>):</p> <p><strong><code class="language-plaintext highlighter-rouge">lib/survey_tool/report/table.ex</code></strong></p> <div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">Report</span><span class="o">.</span><span class="no">Table</span> <span class="k">do</span>
  <span class="c1"># ...</span>
  <span class="n">alias</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">SurveyParser</span>
  <span class="n">alias</span> <span class="no">TableRex</span><span class="o">.</span><span class="no">Table</span>

  <span class="nv">@typep</span> <span class="n">survey</span><span class="p">()</span> <span class="p">::</span> <span class="no">SurveyParser</span><span class="o">.</span><span class="n">survey</span><span class="p">()</span>

  <span class="nv">@spec</span> <span class="n">render</span><span class="p">(</span><span class="n">survey</span><span class="p">())</span> <span class="p">::</span> <span class="ss">:ok</span>
  <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">survey</span><span class="p">)</span> <span class="k">do</span>
    <span class="c1"># ...</span>
    <span class="no">Table</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
    <span class="o">|&gt;</span> <span class="c1"># ...</span>
    <span class="o">|&gt;</span> <span class="n">survey_body</span><span class="p">(</span><span class="n">survey</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">survey_body</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="p">%</span><span class="n">survey</span><span class="p">{</span><span class="ss">participant_count:</span> <span class="n">count</span><span class="p">})</span> <span class="ow">when</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="k">do</span>
    <span class="n">table</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">survey_body</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="p">%</span><span class="n">survey</span><span class="p">{</span><span class="ss">questions:</span> <span class="n">questions</span><span class="p">})</span> <span class="k">do</span>
    <span class="c1"># add questions to table etc...</span>
  <span class="k">end</span>
  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div> <p>After making this change, I did get a warning about <code class="language-plaintext highlighter-rouge">variable "survey" is unused</code>, but that can be silenced by changing <code class="language-plaintext highlighter-rouge">%survey</code> references to <code class="language-plaintext highlighter-rouge">%_survey</code>.</p> <p>If a module using an external type does <em>not</em> need to know about the type’s implementation details, rather than expose the <code class="language-plaintext highlighter-rouge">@type</code> at the boundary, we can use <code class="language-plaintext highlighter-rouge">@opaque</code> instead (see <a href="https://github.com/paulfioravanti/survey_tool_elixir/blob/master/lib/survey_tool/survey_parser.ex"><code class="language-plaintext highlighter-rouge">survey_parser.ex</code></a> and <a href="https://github.com/paulfioravanti/survey_tool_elixir/blob/master/lib/survey_tool/report/question_and_answers.ex"><code class="language-plaintext highlighter-rouge">question_and_answers.ex</code></a> in the companion codebase for an example of that).</p> <p>Let’s now head over to web browser land and check out the front end test!</p> <div class="centered-image" style="width: 95%"> <figure> <img src="/assets/images/2023-12-07/jannis-brandt-8manzosDSGM-unsplash.jpg" alt="fruit lot on ceramic plate"/> <figcaption> Photo by <a href="https://unsplash.com/@jannisbrandt?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Jannis Brandt </a> on <a href="https://unsplash.com/photos/fruit-lot-on-ceramic-plate-8manzosDSGM?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Unsplash </a> </figcaption> </figure> </div> <blockquote> <h2 id="original-front-end-test-requirements">Original Front End Test Requirements</h2> <p>This repository contains a small number of static JSON files, which represent the responses from an HTTP API that offers access to a database of survey results.</p> <p>Your task is to build a web front end that displays the data supplied by this API. You must process the survey data and display the results in a clear, usable interface.</p> <h3 id="getting-started">Getting Started</h3> <p>We suggest you start by setting up an HTTP server that will serve up these JSON files upon request. This may be the same server that serves your web application to consume the API, but make sure to design your application in such a way that you could easily point it to an arbitrary base URL for the API, somewhere else on the Internet.</p> <p>One you’ve got the API available, use whatever client-side libraries or frameworks you like to build the application that consumes it.</p> <p>(Tip: If your application will access the API directly from the browser, using the same server for both your application and the API it consumes will save you having to deal with cross-origin requests. Of course, if you enjoy that sort of thing, feel free to go for it!)</p> <h3 id="the-api">The API</h3> <p><code class="language-plaintext highlighter-rouge">index.json</code> is returned when you send a GET request for the root URL. It returns a list of the surveys that are stored in the database, and high-level statistics for each. For each survey, a URL is included that points to one of the other JSON files.</p> <p>The remaining JSON files each provide full response data for one of these surveys. Each survey is broken into one or more themes, each theme contains one or more questions and each question contains a list of responses. A response represents an individual user (<code class="language-plaintext highlighter-rouge">"respondent_id"</code>) answering an individual question (<code class="language-plaintext highlighter-rouge">"question_id"</code>). The content of each response represents an agreement rating on a scale of <code class="language-plaintext highlighter-rouge">"1"</code> (strongly disagree) to <code class="language-plaintext highlighter-rouge">"5"</code> (strongly agree). If you wished, you could obtain all of the responses for a single user by consulting all of the responses with that user’s <code class="language-plaintext highlighter-rouge">"respondent_id"</code>.</p> <h3 id="requirements">Requirements</h3> <p>Your application should include:</p> <ul> <li>a page that lists all of the surveys and allows the user to choose one to view its results;</li> <li>a page that displays an individual survey’s results, including: <ul> <li>participation rate as a percentage</li> <li>the average rating (from 1 to 5) for each question</li> </ul> </li> </ul> <p>Responses with an empty rating should be considered non-responses (questions skipped by the survey respondent). These responses should be excluded when calculating the average.</p> <p>You can deliver a set of static HTML pages that consume the API data with JavaScript, but keep in mind that we need to be able to read your code, so if you’re compiling your JavaScript in any way, please include your source code too. Alternatively, if you want to build an application that runs on its own web server, that’s okay too.</p> <h3 id="recommendations">Recommendations</h3> <ul> <li>Be creative in considering the right way to display the results.</li> <li>Feel free to use frameworks and libraries, but keep in mind that we are looking for something that demonstrates that you can write good front-end code, not just wire up a framework.</li> <li>Static JSON files load pretty quickly, but not all web APIs are so performant. Consider how your application will behave if the API is slow.</li> <li>Include a README file with clear build instructions that we can follow.</li> <li>Include in your README any other details you would like to share, such as tradeoffs you chose to make, what areas of the problem you chose to focus on and the reasons for your design decisions.</li> <li>We like tests.</li> </ul> <p>Beyond meeting the minimum requirements above, it’s up to you where you want to focus. We don’t expect a fully-finished, production-quality web application; rather, we’re happy for you to focus on whatever areas you feel best showcase your skills.</p> <h3 id="submitting-your-solution">Submitting your solution</h3> <p>Assuming you use Git to track changes to your code, when you’re ready to submit your solution, please use <code class="language-plaintext highlighter-rouge">git bundle</code> to package up a copy of your repository (with complete commit history) as a single file and send it to us as an email attachment.</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git bundle create front-end-coding-test.bundle master
</span></code></pre></div> </div> <p>We’re looking forward to your innovative solutions!</p> </blockquote> <h2 id="approach">Approach</h2> <p>In my experience, back end web developers tend to not need to write that many CLI applications, so these requirements feel more representative of the kind of work a front end web developer actually does on a more regular basis. However, there is no designer handing you a pretty interface to implement, here: you have to muster up your own creativity in determining how to display the data. This put me out of my personal comfort zone, so it was a good test to force me think more about web page design than I usually would.</p> <p>For the HTTP server, since my head was already in Elixir-land from the back end test, I chose it to serve up the static JSON files. Using a full blown web application framework like <a href="https://www.phoenixframework.org/">Phoenix</a> for this seemed like overkill, so I just used an Elixir application with <a href="https://github.com/elixir-plug/plug_cowboy">Plug.Cowboy</a>, which worked out perfectly.</p> <p>For the web front end, since Culture Amp was actively using <a href="https://elm-lang.org/">Elm</a> at the time I received the test<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, I chose it to write a web application. I employed a similar set of design principles and development tools to the back end: <a href="https://github.com/elm-explorations/test">elm test</a> and <a href="https://github.com/stoeffel/elm-verify-examples">elm-verify-examples</a> for testing, <a href="https://github.com/zwilias/elm-coverage">Elm Coverage</a> for test coverage, as well as <a href="https://github.com/stil4m/elm-analyse">Elm Analyse</a> and <a href="https://github.com/jfmengels/elm-review">elm-review</a> for code quality control.</p> <h3 id="design">Design</h3> <p>Design and writing <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a> are some of my weak points, so I decided to leverage a “functional CSS” library to help me out with making things look nice enough for something designed by a developer that leans more to the back of the <a href="https://en.wikipedia.org/wiki/Solution_stack">stack</a>. At the time I wrote the solution, it seemed like <a href="https://tailwindcss.com/">Tailwind CSS</a> and <a href="https://tachyons.io/">Tachyons</a> were battling it out for developer mindshare, and I ended up choosing the latter solely based on a friend’s recommendation.</p> <p>For the general colour scheme, I started with just basic black, white, and grey, with splashes of <span style="color: rgb(252,51,90); font-weight: bold;">the pink colour</span> that Culture Amp (now previously) used for its branding. I kind of like how it turned out, so I did not iterate further on the colours, though that could just be indicative of a lack of creative flair on my part.</p> <p>Here is how the pages turned out.</p> <h3 id="survey-list-page">Survey List Page</h3> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2023-12-07/elm-list-surveys-screenshot.png" alt="Screenshot of my implementation of the survey list page"/> <figcaption> <a href="https://github.com/paulfioravanti/survey_tool_elm"> Survey Tool Elm </a> </figcaption> </figure> </div> <p>The survey list page is a fairly straightforward display of data of the JSON data in a list-like format. Since I was experimenting with Tachyon classes, I added very small flairs of slightly embiggening the item, as well as changing its colours, on <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event"><code class="language-plaintext highlighter-rouge">mouseover</code></a>.</p> <p>This screen shows the success case of actually being able to fetch the JSON data, but when the app is still fetching the data, or the fetching fails, then an appropriate loading or failure page is shown. The Elm code leverages the <a href="https://github.com/krisajenkins/remotedata">RemoteData for Elm</a> package to help manage these states.</p> <h3 id="survey-detail-page">Survey Detail Page</h3> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2023-12-07/elm-show-survey-screenshot.png" alt="Screenshot of my implementation of the survey detail page"/> </figure> </div> <p>The survey detail page is presented in a similar way to how the back end app output its data to the terminal: summary data is repeated at the top of the screen, and then all the questions are presented in a table style format.</p> <p>Use of the word “average” for every score felt a bit repetitive, so I changed it to <span style="font-style: italic; font-family: times, serif; text-decoration: overline">x</span>. However, if I re-wrote this page again, I would probably reconsider using what may not be a widely known <a href="https://en.wikipedia.org/wiki/Arithmetic_mean">notation for “average”</a>.</p> <h4 id="tooltip-histogram">Tooltip Histogram</h4> <div class="centered-image" style="width: 50%; float: right; margin-left: 10px;"> <figure style="margin-top: 0;"> <img src="/assets/images/2023-12-07/facebook-likes.jpg" alt="Screenshot of a Facebook post showing how many people liked it"/> <figcaption> A random Facebook post showing its likes in the form of a tooltip </figcaption> </figure> </div> <p>I believe that displaying the participation percentage, and the average score for each question, technically clears the display requirements. But, I was curious about being able to display the questions in such a way where you could get an idea about <em>how many</em> respondents chose a specific score for a question, and <em>who specifically</em> chose each score. That curiosity led to creation of the tooltip <a href="https://en.wikipedia.org/wiki/Histogram">histogram</a> you can see in the screenshot above, which shows when <code class="language-plaintext highlighter-rouge">mouseover</code>-ing a score.</p> <p>Inspired by the way <a href="https://www.facebook.com/">Facebook</a> displays post likes, I decided to shamelessly rip it off to show the respondent histogram. Since the data only contains user IDs, it is limited in what it can display, but I think it is a nice bit of extra functionality, and a good example of what other information can be derived from a data set by <a href="https://github.com/paulfioravanti/survey_tool_elm/blob/master/front_end/src/SurveyResponse/RespondentHistogram.elm">doing some folding</a>.</p> <p>You could say that the result ended up being adjacent to the optional test requirement of “if you wished, you could obtain all of the responses for a single user by consulting all of the responses with that user’s <code class="language-plaintext highlighter-rouge">respondent_id</code>”: instead, though, we get “all the users for a single response”.</p> <h4 id="internationalisation">Internationalisation</h4> <p>Finally, completely out of scope of the requirements (but not something whose addition detracts from anything), is internationalisation, something I value highly in applications.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2023-12-07/internationalisation.png" alt="Screenshot of my implementation of the survey list page in Japanese"/> </figure> </div> <p>I added in switchable app-level translations in Italian and Japanese (via a flag menu at the top of the screen), but obviously this does not extend to any information that comes in from the JSON files. You can read more about my adventures with internationalisation in Elm in <em><a href="https://www.paulfioravanti.com/blog/runtime-language-switching-elm/">Runtime Language Switching in Elm</a></em>.</p> <div class="centered-image" style="width: 95%"> <figure> <img src="/assets/images/2023-12-07/max-van-den-oetelaar-buymYm3RQ3U-unsplash.jpg" alt="and breathe neon sign on tree"/> <figcaption> Photo by <a href="https://unsplash.com/@maxvdo?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Max van den Oetelaar </a> on <a href="https://unsplash.com/photos/and-breathe-neon-sign-on-tre-buymYm3RQ3U?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Unsplash </a> </figcaption> </figure> </div> <h2 id="conclusion">Conclusion</h2> <p>Overall, I enjoyed doing these tests. I think they both struck a good balance between hard requirements, and freedom to solve problems creatively. Their appropriate business-level theming gave them a sense of being grounded in reality, which, as well as holding the interest of a candidate, can help avoid hiring-side doubts when using generic tests (“well, we know they can write a <a href="https://en.wikipedia.org/wiki/Bogosort">bogosort</a>, but can they do what we actually need them to do everyday?”).</p> <p>Personally, when I see that time, effort, and thought has been put into creating new coding tests, it leaves a great first impression on the technical culture of an organisation, and makes me want to leave one as well by submitting the best solution I can. If you, as an organisation, have the time, resources, and ability to create your own custom tests (assuming you do use them, of course), then I would highly recommend it!</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>As of this writing, Culture Amp has stopped using Elm for new code and is “containing” its usage in their codebases moving forward. Their Director of Engineering, Front End, <a href="https://kevinyank.com/">Kevin Yank</a>, in what I consider to be a stellar example of pragmatic technical leadership, outlined why in <em><a href="https://kevinyank.com/posts/on-endings-why-how-we-retired-elm-at-culture-amp/">On Endings: Why &amp; How We Retired Elm at Culture Amp</a></em>, and further discussed it on the <a href="https://elmtown.simplecast.com/episodes/elm-town-54-aloha-with-kevin-yank">Elm Town #54</a> podcast. I highly recommend checking them both out (even though it is sad that Elm lost one of its most high profile early adopter organisations)! <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="ruby"/><category term="elixir"/><category term="elm"/><category term="coding-test"/><category term="tachyons"/><summary type="html"><![CDATA[Did I feel empowered to get the coding tests done for which I am responsible?]]></summary></entry><entry><title type="html">Get on the Same Page as your HID Device</title><link href="https://www.paulfioravanti.com/blog/same-page-hid-device/" rel="alternate" type="text/html" title="Get on the Same Page as your HID Device"/><published>2023-10-25T16:25:00+11:00</published><updated>2024-02-19T15:00:00+11:00</updated><id>https://www.paulfioravanti.com/blog/same-page-hid-device</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/same-page-hid-device/"><![CDATA[ <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/egReh-6maNw" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <blockquote> <p>See steno coding demos of the code in this post in the video above!</p> </blockquote> <p>I use the <a href="https://en.wikipedia.org/wiki/USB_human_interface_device_class">Human Interface Device</a> (HID) specification to enable programs I write to communicate back and forth directly with my <a href="https://en.wikipedia.org/wiki/USB">USB</a> keyboards.</p> <p>Specifically, I leverage the <a href="https://github.com/libusb/hidapi">HIDAPI</a> library to enable an <a href="https://www.elgato.com/us/en/p/stream-deck-pedal">Elgato Stream Deck Pedal</a> to talk to my <a href="https://qmk.fm/keyboards/georgi/">Georgi</a> keyboard via my computer, and help me use <a href="https://www.openstenoproject.org/plover/">steno</a> chords to defeat demon hordes when playing <a href="https://github.com/mmaulwurff/typist.pk3">Doom Typist</a>.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2023-10-25/georgi.jpg" alt="Georgi keyboard"/> </figure> </div> <p>…Which is all great, when it actually works. However, every time I would attempt to make a connection to the Georgi via my “<a href="https://en.wikipedia.org/wiki/Human_interface_device#Components_of_the_HID_protocol">host</a>” program, sometimes it would work, sometimes not. The failures seemed to happen at completely random intervals, making gameplay frustrating. Was the problem with my code? The device? A platform (in my case macOS) related issue? Something else? I had no idea.</p> <h2 id="example-host">Example Host</h2> <p>Let’s illustrate the problem by recreating (and slightly simplifying) the <a href="https://github.com/libusb/hidapi/blob/baa0dab6114e8654161478e10a20c67cf5d1a1a3/README.md#what-does-the-api-look-like">example host program</a> from the HIDAPI <code class="language-plaintext highlighter-rouge">README</code> file. It will:</p> <ul> <li>Initialise the HID library</li> <li>Attempt to connect to the Georgi using <a href="https://github.com/qmk/qmk_firmware/blob/ca4541699915b37cd1f253bbed51854627efd2ce/keyboards/gboards/georgi/info.json#L6">its Product ID and Vendor ID</a> <a href="https://en.wikipedia.org/wiki/Hexadecimal">hexadecimal</a> values (printing an error message and exiting if it fails)</li> <li>Attempt to read the Georgi’s manufacturer string and print it out</li> <li>Clean up and exit</li> </ul> <p><strong><code class="language-plaintext highlighter-rouge">host.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="c1"> // printf</span><span class="cp">
#include</span> <span class="cpf">&lt;wchar.h&gt;</span><span class="c1"> // wchar_t</span><span class="cp">
#include</span> <span class="cpf">&lt;hidapi.h&gt;</span><span class="c1"> // hid_*</span><span class="cp">
</span>
<span class="k">enum</span> <span class="p">{</span>
  <span class="n">VENDOR_ID</span> <span class="o">=</span> <span class="mh">0xFEED</span><span class="p">,</span>
  <span class="n">PRODUCT_ID</span> <span class="o">=</span> <span class="mh">0x1337</span><span class="p">,</span>
  <span class="n">MAX_LENGTH</span> <span class="o">=</span> <span class="mi">255</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="c1">// Initialize the hidapi library</span>
  <span class="n">hid_init</span><span class="p">();</span>

  <span class="c1">// Open the Georgi using the VID, PID.</span>
  <span class="n">hid_device</span> <span class="o">*</span><span class="n">handle</span> <span class="o">=</span> <span class="n">hid_open</span><span class="p">(</span><span class="n">VENDOR_ID</span><span class="p">,</span> <span class="n">PRODUCT_ID</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Unable to open device</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">hid_exit</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// Read the Manufacturer String</span>
  <span class="kt">wchar_t</span> <span class="n">manufacturer</span><span class="p">[</span><span class="n">MAX_LENGTH</span><span class="p">];</span>
  <span class="n">hid_get_manufacturer_string</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="n">manufacturer</span><span class="p">,</span> <span class="n">MAX_LENGTH</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"Manufacturer String: %ls</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">manufacturer</span><span class="p">);</span>

  <span class="c1">// Close the device</span>
  <span class="n">hid_close</span><span class="p">(</span><span class="n">handle</span><span class="p">);</span>

  <span class="c1">// Finalize the hidapi library</span>
  <span class="n">hid_exit</span><span class="p">();</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now, compile the file with <a href="https://gcc.gnu.org/"><code class="language-plaintext highlighter-rouge">gcc</code></a> (and <a href="https://www.freedesktop.org/wiki/Software/pkg-config/"><code class="language-plaintext highlighter-rouge">pkg-config</code></a> to bring in the HIDAPI library):</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">gcc $</span><span class="o">(</span>pkg-config <span class="nt">--cflags</span> <span class="nt">--libs</span> hidapi<span class="o">)</span> host.c <span class="nt">-o</span> host
</code></pre></div></div> <p>And, this was the output of running the host file a few times:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Manufacturer String: g Heavy Industries
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Unable to open device
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Manufacturer String: g Heavy Industries
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Manufacturer String: g Heavy Industries
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Unable to open device
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Unable to open device
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Unable to open device
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Unable to open device
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Unable to open device
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Manufacturer String: g Heavy Industries
</span></code></pre></div></div> <p>Looks like pretty random failures to me! There is probably not much more we can do with the host file at the moment, so it would seem the next step in getting to the bottom of this problem would be to dive one level deeper, and see what happens when an attempt to open a device is made.</p> <h2 id="opening-devices">Opening Devices</h2> <p>From the API in the host code, we can see that the <a href="https://github.com/libusb/hidapi/blob/baa0dab6114e8654161478e10a20c67cf5d1a1a3/libusb/hid.c#L915"><code class="language-plaintext highlighter-rouge">hid_open</code></a> function is responsible for opening devices, so let’s check out the HIDAPI codebase and see what it does:</p> <p><a href="https://github.com/libusb/hidapi/blob/baa0dab6114e8654161478e10a20c67cf5d1a1a3/libusb/hid.c#L915"><strong><code class="language-plaintext highlighter-rouge">hidapi/libusb/hid.c</code></strong></a></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hid_device</span> <span class="o">*</span> <span class="nf">hid_open</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">vendor_id</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">product_id</span><span class="p">,</span> <span class="k">const</span> <span class="kt">wchar_t</span> <span class="o">*</span><span class="n">serial_number</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">hid_device_info</span> <span class="o">*</span><span class="n">devs</span><span class="p">,</span> <span class="o">*</span><span class="n">cur_dev</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path_to_open</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">hid_device</span> <span class="o">*</span><span class="n">handle</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="n">devs</span> <span class="o">=</span> <span class="n">hid_enumerate</span><span class="p">(</span><span class="n">vendor_id</span><span class="p">,</span> <span class="n">product_id</span><span class="p">);</span>
    <span class="n">cur_dev</span> <span class="o">=</span> <span class="n">devs</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">cur_dev</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cur_dev</span><span class="o">-&gt;</span><span class="n">vendor_id</span> <span class="o">==</span> <span class="n">vendor_id</span> <span class="o">&amp;&amp;</span> <span class="n">cur_dev</span><span class="o">-&gt;</span><span class="n">product_id</span> <span class="o">==</span> <span class="n">product_id</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// ... serial_number-related code snipped for brevity ...</span>
            <span class="n">path_to_open</span> <span class="o">=</span> <span class="n">cur_dev</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cur_dev</span> <span class="o">=</span> <span class="n">cur_dev</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">path_to_open</span><span class="p">)</span> <span class="p">{</span>
        <span class="cm">/* Open the device */</span>
        <span class="n">handle</span> <span class="o">=</span> <span class="n">hid_open_path</span><span class="p">(</span><span class="n">path_to_open</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">hid_free_enumeration</span><span class="p">(</span><span class="n">devs</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">handle</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>This code retrieves a list of devices that match the vendor and product IDs (<a href="https://github.com/libusb/hidapi/blob/baa0dab6114e8654161478e10a20c67cf5d1a1a3/libusb/hid.c#L787"><code class="language-plaintext highlighter-rouge">hid_enumerate</code></a>)<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>. It then attempts to open the first device it finds in that list where the IDs match (<a href="https://github.com/libusb/hidapi/blob/baa0dab6114e8654161478e10a20c67cf5d1a1a3/libusb/hid.c#L1261"><code class="language-plaintext highlighter-rouge">hid_open_path</code></a>), and returns a <a href="https://en.wikipedia.org/wiki/Handle_(computing)">handle</a> reference to it. Even if the <code class="language-plaintext highlighter-rouge">handle</code> to the device is not <code class="language-plaintext highlighter-rouge">NULL</code>, it is unknown at this point whether it can be read from or written to.</p> <p>This code surprised me because I would have thought that given a set of IDs, that are presumably unique (…but I guess not…?<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>), there would only ever be one device that would get opened. So, given that the host code works <em>sometimes</em>, it seems that when <code class="language-plaintext highlighter-rouge">hid_enumerate</code> is called, the Georgi is <em>sometimes</em> the first device in the returned list (and hence opened successfully), but <em>sometimes</em> not, resulting in the attempted opening of…some other device…?</p> <p>Regardless, what I do know is that the host code will need to change to reflect the dynamic ordering of the list provided from <code class="language-plaintext highlighter-rouge">hid_enumerate</code>, and will need to deal with potentially performing a <code class="language-plaintext highlighter-rouge">hid_get_manufacturer_string</code> function call against each device in that list, until it gets back a successful response.</p> <p>Before starting on those changes, though, how can we find out what devices are actually showing up where we do not expect them? Is there something we can use to show us what HIDAPI is seeing? Thankfully, yes.</p> <h2 id="testing-the-hid-api">Testing the HID API</h2> <p><a href="https://github.com/todbot/hidapitester"><code class="language-plaintext highlighter-rouge">hidapitester</code></a> is a command-line tool that can test out every API call in the HIDAPI library. Let’s first use it to get the lay of the device land by asking it to just list the available devices that are on my computer:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./hidapitester <span class="nt">--list</span>
<span class="go">05AC/8104: Apple -
05AC/8104: Apple -
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
0000/0000: Apple -
0000/0000: Apple - Headset
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
FEED/1337: g Heavy Industries - Georgi
0FD9/0086: Elgato - Stream Deck Pedal
05AC/8104: Apple -
05AC/8104: Apple -
05AC/0342:  - Keyboard Backlight
0000/0000: Apple -
0000/0000: APPL - BTM
0000/0000: Apple -
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
FEED/1337: g Heavy Industries - Georgi
FEED/1337: g Heavy Industries - Georgi
FEED/1337: g Heavy Industries - Georgi
FEED/1337: g Heavy Industries - Georgi
FEED/1337: g Heavy Industries - Georgi
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
0000/0000: Apple -
</span></code></pre></div></div> <p>Aside from lots of random Apple-related entries, we can see 6 devices that identify as the Georgi with a <code class="language-plaintext highlighter-rouge">0xFEED/0x1337</code> VID/PID combination, and they seem to be in 2 groupings(?), consisting of 1 and 5 entries. Compare that to the easy-to-distinguish Elgato Stream Deck Pedal, with just a single device detected.</p> <p>So, which one of these is the “real” Georgi? Let’s further refine the <code class="language-plaintext highlighter-rouge">hidapitester</code> command and see if we can print out more details:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">./hidapitester --vidpid FEED:1337 --list-detail
FEED/1337: g Heavy Industries - Georgi
  vendorId:      0xFEED
  productId:     0x1337
  usagePage:     0xFF60
  usage:         0x0061
  serial_number:
  interface:     1
  path: DevSrvsID:4294971346

FEED/1337: g Heavy Industries - Georgi
  vendorId:      0xFEED
  productId:     0x1337
  usagePage:     0x0001
  usage:         0x0006
  serial_number:
  interface:     0
  path: DevSrvsID:4294971342

FEED/1337: g Heavy Industries - Georgi
  vendorId:      0xFEED
  productId:     0x1337
  usagePage:     0x0001
  usage:         0x0002
  serial_number:
  interface:     0
  path: DevSrvsID:4294971342

FEED/1337: g Heavy Industries - Georgi
  vendorId:      0xFEED
  productId:     0x1337
  usagePage:     0x0001
  usage:         0x0001
  serial_number:
  interface:     0
  path: DevSrvsID:4294971342

FEED/1337: g Heavy Industries - Georgi
  vendorId:      0xFEED
  productId:     0x1337
  usagePage:     0x0001
  usage:         0x0080
  serial_number:
  interface:     0
  path: DevSrvsID:4294971342

FEED/1337: g Heavy Industries - Georgi
  vendorId:      0xFEED
  productId:     0x1337
  usagePage:     0x000C
  usage:         0x0001
  serial_number:
  interface:     0
  path: DevSrvsID:4294971342
</span></code></pre></div></div> <p>The details have provided us with extra hexadecimal values called “usage page” and “usage”, and a number for an “interface”<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>.</p> <p>Since we have five entries with an interface value of <code class="language-plaintext highlighter-rouge">0</code>, and one with <code class="language-plaintext highlighter-rouge">1</code>, that would seem to explain the “groupings” we saw earlier in the device list. But what does this new set of “usage” hexadecimal numbers mean?</p> <h2 id="hidapi-usage">HIDAPI Usage</h2> <p>The concept of “usage” and “usage pages” in the context of HIDAPI is, I think, best described in <a href="https://developer.chrome.com/en/articles/hid/#terminology">this article</a>:</p> <blockquote> <p>“An HID usage is a numeric value referring to a standardized input or output. Usage values allow a device to describe the intended use of the device […]. For example, one is defined for the left button of a mouse. Usages are also organized into usage pages, which provide an indication of the high-level category of the device or report.</p> </blockquote> <p>Hexadecimal numbers are a bit abstract in conveying what this “intended use” really means, but, fortunately for us, we can use the <a href="https://nondebug.github.io/webhid-explorer/">Web HID Explorer</a> to get some more human-readable information:</p> <h3 id="interface-0">Interface 0</h3> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">productName: Georgi
vendorId:    0xFEED (65261) Unknown vendor
productId:   0x1337 (4919)
opened:      false
collections[0]
</span><span class="gp">  Usage: 0001:0006 (Generic Desktop &gt;</span><span class="w"> </span>Keyboard<span class="o">)</span>
<span class="go">collections[1]
</span><span class="gp">  Usage: 0001:0002 (Generic Desktop &gt;</span><span class="w"> </span>Mouse<span class="o">)</span>
<span class="go">collections[2]
</span><span class="gp">  Usage: 0001:0080 (Generic Desktop &gt;</span><span class="w"> </span>System Control<span class="o">)</span>
<span class="go">collections[3]
</span><span class="gp">  Usage: 000C:0001 (Consumer &gt;</span><span class="w"> </span>Consumer Control<span class="o">)</span>
<span class="go">  Input reports: 0x04
collections[4]
</span><span class="gp">  Usage: 0001:0006 (Generic Desktop &gt;</span><span class="w"> </span>Keyboard<span class="o">)</span>
<span class="go">Input report 0x04
  16 bits (bits 0 to 15)
    Data,Ary,Abs
</span><span class="gp">    Usages: 000C:0001 (Consumer &gt;</span><span class="w"> </span>Consumer Control<span class="o">)</span> to 000C:02A0 <span class="o">(</span>Consumer <span class="o">&gt;</span> AC Soft Key Left<span class="o">)</span>
<span class="go">    Logical bounds: 1 to 672
</span></code></pre></div></div> <h3 id="interface-1">Interface 1</h3> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">productName: Georgi
vendorId:    0xFEED (65261) Unknown vendor
productId:   0x1337 (4919)
opened:      true
collections[0]
  Usage: FF60:0061 (Vendor-defined page 0xFF60 usage 0x0061)
  Input reports: 0x00
  Output reports: 0x00
Input report 0x00
  32 values * 8 bits (bits 0 to 255)
    Data,Var,Abs
    Usage: FF60:0062 (Vendor-defined page 0xFF60 usage 0x0062)
    Logical bounds: 0 to 255
Output report 0x00
  32 values * 8 bits (bits 0 to 255)
    Data,Var,Abs
    Usage: FF60:0063 (Vendor-defined page 0xFF60 usage 0x0063)
    Logical bounds: 0 to 255
</span></code></pre></div></div> <p>I guess in the end we can consider the human-readable information “nice to know”, but my main takeaway from all this would be that the <code class="language-plaintext highlighter-rouge">usagePage:usage</code> pair feel quite similar to the <code class="language-plaintext highlighter-rouge">vid:pid</code> pair, in terms of their hierarchical relationship to each other.</p> <p>Anyway, it seems we will need to use all four values in the host code in order to make a stable connection to a device. However, there is no real way to know in advance which usage values will successfully open up that connection (even the information above does not hint at that…at least, not that I can see). Therefore, the host code will need to be changed to handle the following scenarios:</p> <ul> <li>Where a <code class="language-plaintext highlighter-rouge">usagePage:usage</code> pair <em>are not</em> present, loop over the <code class="language-plaintext highlighter-rouge">vid:pid</code>-matching devices, and attempt to make a connection with each one until successful. Also, log out the device details on each attempt, so we can find out which usage values to use on future attempts so that…</li> <li>Where a <code class="language-plaintext highlighter-rouge">usagePage:usage</code> pair <em>are</em> present, loop over the <code class="language-plaintext highlighter-rouge">vid:pid</code>-matching devices until a match is found for the usage values, and only attempt to make a connection with that device</li> </ul> <p>Let’s give it a try!</p> <h2 id="host-with-usage">Host with Usage</h2> <p>First, let’s change the host code to make a connection with each device in the list until it is successful, rather than just blindly return the list’s first device. Instead of calling <code class="language-plaintext highlighter-rouge">hid_open</code>, let’s adapt its internals to fit our needs:</p> <p><strong><code class="language-plaintext highlighter-rouge">host.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="c1">// ...</span>

  <span class="n">hid_device</span> <span class="o">*</span><span class="n">handle</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">hid_device_info</span> <span class="o">*</span><span class="n">devices</span><span class="p">,</span> <span class="o">*</span><span class="n">current_device</span><span class="p">;</span>
  <span class="c1">// Enumerate over the Georgi devices using the VID, PID.</span>
  <span class="n">devices</span> <span class="o">=</span> <span class="n">hid_enumerate</span><span class="p">(</span><span class="n">VENDOR_ID</span><span class="p">,</span> <span class="n">PRODUCT_ID</span><span class="p">);</span>
  <span class="n">current_device</span> <span class="o">=</span> <span class="n">devices</span><span class="p">;</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">current_device</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="kt">int</span> <span class="n">usage_page</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">usage_page</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="kt">int</span> <span class="n">usage</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">usage</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Opening -- Usage (page): 0x%hX (0x%hX)...</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">usage</span><span class="p">,</span> <span class="n">usage_page</span><span class="p">);</span>
    <span class="n">handle</span> <span class="o">=</span> <span class="n">hid_open_path</span><span class="p">(</span><span class="n">current_device</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"Unable to open device</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="n">current_device</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Success!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">hid_free_enumeration</span><span class="p">(</span><span class="n">devices</span><span class="p">);</span>

  <span class="c1">// Read the Manufacturer String if handle valid</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">wchar_t</span> <span class="n">manufacturer</span><span class="p">[</span><span class="n">MAX_LENGTH</span><span class="p">];</span>
    <span class="n">hid_get_manufacturer_string</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="n">manufacturer</span><span class="p">,</span> <span class="n">MAX_LENGTH</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Manufacturer String: %ls</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">manufacturer</span><span class="p">);</span>
    <span class="n">hid_close</span><span class="p">(</span><span class="n">handle</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Unable to open any devices for 0x%hX:0x%hX</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">VENDOR_ID</span><span class="p">,</span> <span class="n">PRODUCT_ID</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// Finalize the hidapi library</span>
  <span class="n">hid_exit</span><span class="p">();</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Compiling and running the changed host file a couple of times gives us the following output:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Opening -- Usage (page): 0x6 (0x1)...
Unable to open device
Opening -- Usage (page): 0x2 (0x1)...
Unable to open device
Opening -- Usage (page): 0x1 (0x1)...
Unable to open device
Opening -- Usage (page): 0x80 (0x1)...
Unable to open device
Opening -- Usage (page): 0x1 (0xc)...
Unable to open device
Opening -- Usage (page): 0x61 (0xff60)...
Success!
Manufacturer String: g Heavy Industries
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Opening -- Usage (page): 0x61 (0xff60)...
Success!
Manufacturer String: g Heavy Industries
</span></code></pre></div></div> <p>Great! We get a successful connection every time at usage <code class="language-plaintext highlighter-rouge">FF60:61</code>, and can confidently say <em>that</em> is our target device. Now, since every connection we open exerts a time cost, let’s change the host code to skip devices that we now know will not give us a successful connection, while still handling the possibility that we may not know the usage values of other devices we may want to connect to:</p> <p><strong><code class="language-plaintext highlighter-rouge">host.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>

<span class="k">enum</span> <span class="p">{</span>
  <span class="c1">// ...</span>
  <span class="c1">// Set usage values to 0 if unknown.</span>
  <span class="n">USAGE_PAGE</span> <span class="o">=</span> <span class="mh">0xFF60</span><span class="p">,</span>
  <span class="n">USAGE</span> <span class="o">=</span> <span class="mh">0x61</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="c1">// ...</span>
  <span class="kt">int</span> <span class="n">usage_known</span> <span class="o">=</span> <span class="p">(</span><span class="n">USAGE_PAGE</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">USAGE</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">current_device</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="kt">int</span> <span class="n">usage_page</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">usage_page</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="kt">int</span> <span class="n">usage</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">usage</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">usage_known</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">usage_page</span> <span class="o">!=</span> <span class="n">USAGE_PAGE</span> <span class="o">||</span> <span class="n">usage</span> <span class="o">!=</span> <span class="n">USAGE</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"Skipping -- Usage (page): 0x%hX (0x%hX)</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">usage</span><span class="p">,</span> <span class="n">usage_page</span><span class="p">);</span>
      <span class="n">current_device</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
    <span class="n">handle</span> <span class="o">=</span> <span class="n">hid_open_path</span><span class="p">(</span><span class="n">current_device</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"Unable to open device</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">usage_known</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">current_device</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="k">continue</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
  <span class="p">}</span>

  <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <p>Compiling and running these changes a couple of times gives us the following output:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Skipping -- Usage (page): 0x6 (0x1)
Skipping -- Usage (page): 0x2 (0x1)
Skipping -- Usage (page): 0x1 (0x1)
Skipping -- Usage (page): 0x80 (0x1)
Skipping -- Usage (page): 0x1 (0xc)
Opening -- Usage (page): 0x61 (0xff60)...
Success!
Manufacturer String: g Heavy Industries
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Opening -- Usage (page): 0x61 (0xff60)...
Success!
Manufacturer String: g Heavy Industries
</span></code></pre></div></div> <p>It works! And, if you have been following along (with your own Georgi or other keyboard of choice), you will notice that successful connections are now made much faster, even if you do not hit the target device on the first try!</p> <p>So, if you ever find yourself writing custom firmware that connects to HID devices, remember to always include the usage values, as well as vendor/product IDs, to ensure you can get a stable connection.</p> <p>The complete code for the host file is below, but you can also get it from its GitHub repo <a href="https://github.com/paulfioravanti/hid_host_example">here</a>:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="c1"> // printf</span><span class="cp">
#include</span> <span class="cpf">&lt;wchar.h&gt;</span><span class="c1"> // wchar_t</span><span class="cp">
#include</span> <span class="cpf">&lt;hidapi.h&gt;</span><span class="c1"> // hid_*</span><span class="cp">
</span>
<span class="k">enum</span> <span class="p">{</span>
  <span class="n">VENDOR_ID</span> <span class="o">=</span> <span class="mh">0xFEED</span><span class="p">,</span>
  <span class="n">PRODUCT_ID</span> <span class="o">=</span> <span class="mh">0x1337</span><span class="p">,</span>
  <span class="c1">// Set usage values to 0 if unknown.</span>
  <span class="n">USAGE_PAGE</span> <span class="o">=</span> <span class="mh">0xFF60</span><span class="p">,</span>
  <span class="n">USAGE</span> <span class="o">=</span> <span class="mh">0x61</span><span class="p">,</span>
  <span class="n">MAX_LENGTH</span> <span class="o">=</span> <span class="mi">255</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>

  <span class="c1">// Initialize the hidapi library</span>
  <span class="n">hid_init</span><span class="p">();</span>

  <span class="n">hid_device</span> <span class="o">*</span><span class="n">handle</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">hid_device_info</span> <span class="o">*</span><span class="n">devices</span><span class="p">,</span> <span class="o">*</span><span class="n">current_device</span><span class="p">;</span>
  <span class="c1">// Enumerate over the Georgi devices using the VID, PID.</span>
  <span class="n">devices</span> <span class="o">=</span> <span class="n">hid_enumerate</span><span class="p">(</span><span class="n">VENDOR_ID</span><span class="p">,</span> <span class="n">PRODUCT_ID</span><span class="p">);</span>
  <span class="n">current_device</span> <span class="o">=</span> <span class="n">devices</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">usage_known</span> <span class="o">=</span> <span class="p">(</span><span class="n">USAGE_PAGE</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">USAGE</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">current_device</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="kt">int</span> <span class="n">usage_page</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">usage_page</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="kt">int</span> <span class="n">usage</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">usage</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">usage_known</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">usage_page</span> <span class="o">!=</span> <span class="n">USAGE_PAGE</span> <span class="o">||</span> <span class="n">usage</span> <span class="o">!=</span> <span class="n">USAGE</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"Skipping -- Usage (page): 0x%hX (0x%hX)</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">usage</span><span class="p">,</span> <span class="n">usage_page</span><span class="p">);</span>
      <span class="n">current_device</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Opening -- Usage (page): 0x%hX (0x%hX)...</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">usage</span><span class="p">,</span> <span class="n">usage_page</span><span class="p">);</span>
    <span class="n">handle</span> <span class="o">=</span> <span class="n">hid_open_path</span><span class="p">(</span><span class="n">current_device</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"Unable to open device</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">usage_known</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">current_device</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="k">continue</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Success!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">hid_free_enumeration</span><span class="p">(</span><span class="n">devices</span><span class="p">);</span>

  <span class="c1">// Read the Manufacturer String if handle valid</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">wchar_t</span> <span class="n">manufacturer</span><span class="p">[</span><span class="n">MAX_LENGTH</span><span class="p">];</span>
    <span class="n">hid_get_manufacturer_string</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="n">manufacturer</span><span class="p">,</span> <span class="n">MAX_LENGTH</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Manufacturer String: %ls</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">manufacturer</span><span class="p">);</span>
    <span class="n">hid_close</span><span class="p">(</span><span class="n">handle</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Unable to open any devices for 0x%hX:0x%hX</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">VENDOR_ID</span><span class="p">,</span> <span class="n">PRODUCT_ID</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// Finalize the hidapi library</span>
  <span class="n">hid_exit</span><span class="p">();</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <blockquote> <p>If you are interested in seeing other host code containing more robust error handling, and the reading and writing of custom information to and from a device, check out my <a href="https://github.com/paulfioravanti/hid_hosts">HID Hosts</a> GitHub repository.</p> </blockquote> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>I’ve written about playing <a href="https://en.wikipedia.org/wiki/Doom_(1993_video_game)">Doom</a> [1993] with steno in <em><a href="https://www.paulfioravanti.com/blog/steno-gaming-doom-typist/">Steno Gaming: Doom Typist</a></em>, but the mechanics around making communication possible between the Georgi, Elgato pedal, and <a href="https://www.openstenoproject.org/plover/">Plover</a> probably warrants its own blog post. If you’re game, you can check out the code specifics in the following GitHub repos: [HID Host][], <a href="https://github.com/paulfioravanti/steno_tape">Steno Tape</a>, and my <a href="https://github.com/paulfioravanti/qmk_keymaps/tree/master/keyboards/gboards/georgi/keymaps/paulfioravanti">Georgi firmware</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p>Yes, technically, it is a <a href="https://en.wikipedia.org/wiki/Pointer_(computer_programming)">pointer</a> to a <a href="https://en.wikipedia.org/wiki/Linked_list">linked list</a> of <a href="https://github.com/libusb/hidapi/blob/baa0dab6114e8654161478e10a20c67cf5d1a1a3/hidapi/hidapi.h#L150"><code class="language-plaintext highlighter-rouge">hid_device_info</code></a> <code class="language-plaintext highlighter-rouge">struct</code>s, but that detail can be glossed over in this context. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3" role="doc-endnote"> <p>Vendor IDs are meant to be globally unique, while product IDs are meant to be unique within the scope of a vendor ID. The <a href="https://www.usb.org/about">USB Implementers Forum</a> (USB-IF) is the <a href="https://www.usb.org/developers">“authority which assigns and maintains all USB Vendor ID Numbers”</a> (a vendor ID <a href="https://www.usb.org/getting-vendor-id">costs US$6000</a> as of this writing). Also, apparently “unauthorized use of assigned or unassigned USB Vendor ID Numbers is strictly prohibited”. However, a search of popular hobbyist keyboard firmware <a href="https://qmk.fm/">QMK</a>’s codebase reveals that <a href="https://github.com/search?q=repo%3Aqmk%2Fqmk_firmware+%22vid%22%3A+%220xFEED%22+language%3AJSON&amp;type=code&amp;l=JSON">hundreds of devices</a> aside from the Georgi use <code class="language-plaintext highlighter-rouge">0xFEED</code> as their vendor ID (it seems to be QMK’s arbitrarily assigned <a href="https://github.com/qmk/qmk_firmware/blob/ca4541699915b37cd1f253bbed51854627efd2ce/docs/faq_build.md?plain=1#L54">default vendor ID</a>). So, we can conclude that:</p> <ul> <li>the <code class="language-plaintext highlighter-rouge">0xFEED</code> vendor ID does not belong exclusively to the Georgi</li> <li>enforcement of vendor ID uniqueness is lax/non-existent</li> <li>we cannot rely on the VID/PID combo alone to open a connection to a device: we need more information to target it correctly</li> </ul> <p><a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4" role="doc-endnote"> <p>Since I could not find any references on the web that describe what an “interface” means within the context of HIDAPI, <a href="https://chat.openai.com/">ChatGPT</a> says that it “can represent a specific device or a group of similar devices that share a common way of communicating with the computer. These interfaces are identified by interface numbers and can have different features, reports, and capabilities depending on the type of HID device”. I am not sure why the Georgi would need multiple ways to communicate with the computer, but I am just going to consider this an implementation detail we do not need to concern ourselves with. Also, as an aside, I cannot believe we are at the stage where I am quoting AI… <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="clang"/><category term="HID"/><category term="hidapi"/><category term="georgi"/><category term="stenography"/><category term="steno"/><category term="keyboards"/><summary type="html"><![CDATA[Does communicating with your HID device seem flaky? You may be looking at the wrong (usage) page.]]></summary></entry><entry><title type="html">Thanks, Past-Me</title><link href="https://www.paulfioravanti.com/blog/thanks-past-me/" rel="alternate" type="text/html" title="Thanks, Past-Me"/><published>2023-04-28T15:30:00+10:00</published><updated>2023-07-24T16:17:00+10:00</updated><id>https://www.paulfioravanti.com/blog/thanks-past-me</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/thanks-past-me/"><![CDATA[<div class="post-audio"> <div class="post-audio-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/8EX3aUYehNo" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> </div> <div class="spacer"></div> <div class="text"> :studio_microphone: This post has audio narration </div> </div> <p>After joining my last <a href="https://rubyonrails.org/">Ruby on Rails</a> project as a software developer, I wanted to see if I could quickly deliver some easy wins before starting any more difficult work. So, I decided to give my client’s web application a “technical audit”.</p> <p>I had done this kind of thing before on other Rails projects, but that had been many years ago, and I can barely remember what I coded last week, let alone all the steps on some check-list I wrote in the ancient past.</p> <p>Luckily, past-me apparently had the enormous foresight to write up all the steps he thought of in a post on a previous employer’s blog: <em><a href="https://reinteractive.com/posts/304-profile-your-future-app">Profile Your Future App</a></em>.</p> <p>Some of the content is a bit outdated as of this writing, particularly with regards to a few of the external services it references (which is unsurprising, given the dynamic nature of tech), but I was able to leverage a good deal of the post’s content to improve the quality of the application I was working on, without having to <a href="https://en.wikipedia.org/wiki/Reinventing_the_wheel">reinvent the wheel</a> (and maybe some other web developer might, too).</p> <p>So, thanks past-me, ya did good! As you figured stuff out, you wrote it down, and it paid future dividends: a beneficial and repeatable process that anyone can do for themselves.</p> <p>That’s it. That’s the lesson. <a href="https://knowyourmeme.com/memes/thanks-for-coming-to-my-ted-talk">Thanks for coming to my TED blog post</a>.</p> <p>Now you, the guy writing this sentence: you reckon you can take your own advice and keep this up?</p> <h2 id="happy-50th-postiversary">Happy 50th Postiversary</h2> <p>It has only taken over 5 years of writing, at the cracking average speed of less than one post per month, but you are reading this blog’s 50th post. In muted celebration of this extremely modest achievement, I thought I’d mark the occasion with a <a href="https://en.wikipedia.org/wiki/Retrospective#Software_development">retrospective</a>.</p> <p>My initial reasons for attempting to kick-start a blog (after <a href="https://www.paulfioravanti.com/blog/hello-blog/">failing once before</a>) were:</p> <ul> <li>Using it as a knowledge repository: get stuff out of my head and <a href="https://en.wikipedia.org/wiki/Persistence_(computer_science)">persisted</a> somewhere else, so I could “confidently forget” it until (maybe) future-me needed it again</li> <li>The intrinsic value of being able to share knowledge with others, in hopes that they, too, can benefit from it</li> <li>Get better at technical writing, and writing English in general</li> <li>Directly receive reputation-building <a href="https://en.wikipedia.org/wiki/Search_engine_optimization">SEO</a> “<a href="https://www.woorank.com/en/edu/seo-guides/link-juice">link juice</a>” for stuff I write, rather than just give it away for free to other third-party sites (though these days I guess all original content is just info-<a href="https://en.wiktionary.org/wiki/chum#Etymology_2">chum</a> to be ravenously devoured and digested as <a href="https://en.wikipedia.org/wiki/Training,_validation,_and_test_data_sets#Training_data_set">training data</a> by <a href="https://en.wikipedia.org/wiki/Artificial_intelligence">AI</a> <a href="https://en.wikipedia.org/wiki/Chatbot">chatbots</a>, so who knows if creators will receive even a sip of whatever ends up substituting for link juice…)</li> </ul> <p>How did all of that go? Below are the results of my <em><a href="https://en.wikipedia.org/wiki/Navel_gazing">Omphaloskepsis</a></em> Report, though the <a href="https://www.merriam-webster.com/dictionary/TL%3BDR">TL;DR</a> could be summed up with this tweet:</p> <blockquote> <p>“deeply disgusted to discover that in order to get good at a thing I have to do it badly first” — <a href="https://twitter.com/megelison/status/1549788560756281345?ref_src=twsrc%5Etfw">Meg Elison</a> (<a href="https://twitter.com/megelison">@megelison</a>)</p> </blockquote> <h2 id="what-was-done-well">What was Done Well</h2> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2023-04-28/nils-gFeYSbDCJM0-unsplash.jpg" alt="man in black t-shirt and blue denim jeans riding motorcycle on road during daytime"/> <figcaption> Photo by <a href="https://unsplash.com/@ni_ls_h?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Nils </a> on <a href="https://unsplash.com/photos/gFeYSbDCJM0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Unsplash </a> </figcaption> </figure> </div> <p>I’m going to consider “well” in the subjective: how I generally felt I benefitted from writing the posts up to now. If I was going to attempt to consider what was done well in the objective, then <a href="https://analytics.google.com/">all signs</a> would point toward a complete pivot to only ever writing about <a href="https://www.paulfioravanti.com/blog/classic-doom-mac/">Doom on macOS</a> in the future.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2023-04-28/blog-page-views.jpg" alt="Google Analytics page views for my blog"/> <figcaption> Doomguy chugs more than his fair share of SEO juice </figcaption> </figure> </div> <p>I may really like Doom, but I don’t want to do that. So, I’d like to have a list of positives for future-me to look back on: help keep my motivation up to continue writing about potentially niche topics, especially when vanity metrics show low levels of reach and impact for a particular post. Here’s what I came up with.</p> <h3 id="certificate-of-participation">Certificate of Participation</h3> <p>Framed against a digital wasteland of abandoned blogs, I give myself a light pat on the back for demonstrating enough grit to actually ship fifty posts worth of content to the internet.</p> <p>There were plenty of times where I just did not want to start, or continue, writing a post. Mustering up the enthusiasm, or summoning enough stubbornness, to persevere in the face of any other reason I could think of, personally beneficial or not, has been tough<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>.</p> <p>I don’t advocate continuing to pay <a href="https://en.wikipedia.org/wiki/Sunk_cost">sunk costs</a> where there is no benefit, but even if no one reads this, or any of my other posts, I know I get at least some kind of immediate fixed value from finishing a post (even if just a <a href="https://en.wikipedia.org/wiki/Dopamine#Reward">dopamine</a> hit), and then hopefully some kind of variable value in the future (it gets picked up by an <a href="https://en.wikipedia.org/wiki/News_aggregator">aggregator</a>, or future-me re-reads it etc).</p> <p>Speaking of aggregators, these are the ones that picked up one or more of the previous posts from this one, and provided nice spikes in readership (and some warm fuzzies for me):</p> <table style="margin: auto; width: 50%; font-size: large; margin-bottom: 1rem;"> <thead> <tr> <th style="text-align: left">Source</th> <th style="text-align: right">Links</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><a href="https://elixirweekly.net/">Elixir Weekly</a></td> <td style="text-align: right">8</td> </tr> <tr> <td style="text-align: left"><a href="https://www.elmweekly.nl/">Elm Weekly</a></td> <td style="text-align: right">3</td> </tr> <tr> <td style="text-align: left"><a href="http://plover.stenoknight.com/">Plover Blog</a></td> <td style="text-align: right">3</td> </tr> <tr> <td style="text-align: left"><a href="https://elixir-radar.com/">Elixir Radar</a></td> <td style="text-align: right">1</td> </tr> <tr> <td style="text-align: left"><a href="https://www.graphqlweekly.com/">GraphQL Weekly</a></td> <td style="text-align: right">1</td> </tr> <tr> <td style="text-align: left"><a href="https://hnblogs.substack.com/">Hacker News Blog Newsletter</a></td> <td style="text-align: right">1</td> </tr> <tr> <td style="text-align: left"><a href="https://rubyweekly.com/">Ruby Weekly</a></td> <td style="text-align: right">1</td> </tr> <tr> <td style="text-align: left">Test Automation Weekly</td> <td style="text-align: right">1</td> </tr> <tr> <td style="text-align: left"><strong>Total</strong></td> <td style="text-align: right"><strong>18</strong></td> </tr> </tbody> </table> <p>Two of the Elixir Weekly links are from the same article, but in different newsletters, giving a hit rate of about 34% of the posts being apparently deemed worthy enough to share widely: not a huge number at all, but I’ll take it over zero!</p> <h3 id="idea-pipeline">Idea Pipeline</h3> <p>In order to combat the classic “I don’t know what to write about” problem, that serves as a convenient escape hatch to avoid expending any effort at all, I made sure to create an easily accessible place where ideas could be stored, as close as possible to the time they appear. I use <a href="https://trello.com/">Trello</a> boards and cards for this, but any tool, digital or physical, would work fine.</p> <p>An idea may just be the title of a post, a theme, keywords, random thoughts, or a fully fleshed out plan: whatever information happens to come to hand, it goes in the idea bucket. I may not action an idea at the time it materialises, or in the next few months, or even ever, but they are there to be referenced whenever it comes time to put text to web page.</p> <p>Forgetting some ideas, because I did not put them anywhere when they came up, was painful enough that even if I am in the middle of doing something else, I will make sure to put <em>something</em> down to follow up later. So, there is never an issue with <em>what</em> to write about, just the hard stuff about <em>how</em> to allocate the time and effort to actually do the work.</p> <h3 id="deep-diving">Deep Diving</h3> <p>Writing about certain topics forced me to attempt to <em>really</em> learn about them in detail. No self-imposed deadlines meant I would often happily abseil down every rabbit hole I encountered, and attempt to be as thorough as possible in surfacing information for posts.</p> <p>This could sometimes make writing a post feel like maintaining a long running <a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell">Git branch</a> in a codebase. All the voluminous information editing, shuffling, and moulding needed in order to attempt to create a coherent narrative could be taxing, and there were many times where I just wanted a post to hurry up and end so I could finally move on to something else.</p> <p>However, the goals of making a post a <a href="https://english.stackexchange.com/a/345796/23058">one and done</a> exercise, and future-me’s single point of reference for a topic<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>, enabled me to keep trudging forward, even when it ended up taking months of preparation. Most importantly, especially given the effort expended, I’m happy overall with the way that the posts have turned out, even the ones that were so niche that their audiences were tiny<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>.</p> <h3 id="stories-and-narratives">Stories and Narratives</h3> <p>Many of my posts have revolved around explaining the processes of how to use some kind of technology, show off a thing, or provide some kind of subjective advice. As well as scratching an itch, justifying the time and effort it takes to write these kinds of posts is easy within the context of being relevant to my profession or interests, and helping out future-me.</p> <p>However, I have also found great benefit in writing posts that just tell a straight story. These posts<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup> never really get much traction in analytics — I guess they are not considered as “useful” as how-to guides — but as well as being personally fulfilling to write, I believe they have helped lift the narrative quality of other posts.</p> <p>Obviously, I never set out to write boring or dry content, but I do feel that writing stories has been able to positively influence the structure and word smithing of other more prescriptive posts, and make them more interesting to read (or, at least it has for present-me looking back on them).</p> <p>So, in an attempt to get better at writing, and improve my blog “voice”, I plan to pepper in more story-based posts to counterbalance the hardcore technical-based ones.</p> <h3 id="blog-tinkering">Blog Tinkering</h3> <p>Software nerds love to tinker, and this blog has provided ample opportunities for that. From changing the theme, setting up and integrating a mailing list, and overriding <a href="https://jekyllrb.com/">Jekyll</a> templates to get pages looking <em>just</em> the way I want them to.</p> <p>The (sometimes painful) journeys that making those changes took me on either <a href="https://www.paulfioravanti.com/tags/jekyll/">became posts</a>, or are in my idea pipeline for future posts, creating a <a href="https://www.dictionary.com/browse/virtuous-circle">virtuous circle</a> of content generation. Jekyll may not be the coolest blog kid on the block, but there are enough people using it that someone out there will have a similar problem to one that a post addresses, making its creation worthwhile.</p> <h3 id="guest-posting">Guest Posting</h3> <p>Although I mentioned earlier about wanting to keep SEO link juice to myself, there are times where I think it is worth giving it away to get your work in front of an audience you do not have, yet want to reach, in order to accomplish some goal.</p> <p>Back in 2021, I reached out to <a href="https://www.zsa.io/">ZSA</a> to ask if they would consider supporting <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/feature_stenography.md#keycode-reference-idkeycode-reference">QMK stenography keys</a> in their <a href="https://configure.zsa.io/">Oryx</a> keyboard configurator. I hoped that by doing so, the barrier to entry to use <a href="https://en.wikipedia.org/wiki/Stenotype">stenography</a> on their popular keyboards could be significantly lowered, encouraging more people to give it a try.</p> <p>I showed them my <em><a href="https://www.paulfioravanti.com/blog/starting-stenography-ergodox/">Starting Stenography with an Ergodox</a></em> post, which led to collaborating with the ZSA team over the following few months during development of the feature, and culminated in writing its announcement post: <em><a href="https://blog.zsa.io/2107-steno-tutorial/">Stenography with ZSA Keyboards: A Tutorial</a></em>.</p> <p>That whole process was a lot of work, potentially benefitted(?) a for-profit company, no compensation was asked or offered, and, of course, I get no direct link juice (though I did make sure to relevantly link as many of my own posts in it as possible without being spammy [I hope…]). But, getting steno out into the minds and hands of a wider audience than I ever could by myself was the overarching goal, and I think it succeeded there, making the whole exercise worthwhile. I am also proud of the end result, and collaborating with the ZSA team was a really great experience.</p> <p>I do see doing something like this as the exception, rather than the rule, though. I have been approached by other organisations about writing for-pay articles for their blogs based on what they have read here (which, in itself, is flattering). But, the numbers offered just do not personally justify the sheer amount of effort required for creating what I consider a good technical post (not just the writing, but likely also development of complimenting assets like working software programs and videos etc).</p> <p>This means I would rather not get paid, and keep a post on my blog in order to maintain ownership, than sell it for some <a href="https://en.wiktionary.org/wiki/going_rate">going rate</a>. I definitely consider this a luxury<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>.</p> <h2 id="what-could-be-done-better">What could be Done Better</h2> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2023-04-28/matthew-henry-kX9lb7LUDWc-unsplash.jpg" alt="grayscale photogaphy of man sitting on concrete bench"/> <figcaption> Photo by <a href="https://unsplash.com/@matthewhenry?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Matthew Henry </a> on <a href="https://unsplash.com/photos/kX9lb7LUDWc?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Unsplash </a> </figcaption> </figure> </div> <p>Not everything in the competitive and glamorous world of writing personal blog posts is glowing praise and fawning over your words. Things can go wrong, opportunities are potentially missed, and sometimes unwitting self-sabotage takes place.</p> <p>Here is a selection of points where I am cognisant of some kind of shortcoming, though I am sure there are more I have just not noticed (feel free to bring any others to my attention).</p> <h3 id="cadence-and-releasing">Cadence and Releasing</h3> <p>I write posts on a very sporadic schedule. Regardless of having an idea pipeline, my urge and ability to write fluctuated significantly: some months I would be blessed with periods of extended <a href="https://en.wikipedia.org/wiki/Flow_(psychology)">flow</a>, and be able to release up to three posts — others, zero (and sometimes that drought could last for many months, like the massive gap between this post and the previous one).</p> <p>On those months where I was able to write multiple posts, in my rush to get them out the digital door and off my plate, I would sometimes release them on consecutive days, giving the initially-released post no room to “breathe” before the next one barreled through. I do not have any evidence that this resulted in either post losing any short-term readership, but I think there may be the potential for that. Therefore, I do not intend to do releases in quick succession again, unless there is a compelling reason to do so.</p> <p>Much like I have an inbound idea pipeline that stacks up and waits for me to action them, I now understand that having an outbound post pipeline is just as important, in order to give the impression of having some sort of cadence, and buy me time when flow is in short supply.</p> <h3 id="promotion">Promotion</h3> <p>When I release a post, my next item of business is to try and get people to read it. I currently do this by:</p> <ul> <li>writing out a short message to send to my mailing list members</li> <li>posting links to social media: specifically, <a href="https://twitter.com/paulfioravanti">Twitter</a>, <a href="https://www.linkedin.com/in/paulfioravanti/">LinkedIn</a>, and <a href="https://www.facebook.com/">Facebook</a></li> </ul> <p>Different kinds of posts seem to resonate with people on different platforms: tech posts seem to get more traction on Twitter (aggregators are especially more likely to pick them up if they are hashtagged correctly), while personal stories get more interaction on Facebook, where people tend to know me personally.</p> <p>Promoting to these places has generally been fine, but I wonder whether I am missing out on promotion opportunities by not also aiming at more specific targets like relevant <a href="https://www.reddit.com/">Reddit</a> subreddits, <a href="https://slack.com/">Slack</a>/<a href="https://discord.com/">Discord</a> communities, LinkedIn groups, or maybe even <a href="https://news.ycombinator.com/">Hacker News</a>.</p> <p>I am sure many of these communities will have their own rules and etiquette around sharing self-serving content, possibly including being a regularly contributing community member (or maybe they just outright ban it). I do not want to come off as a spammer or leech, so I will have to overcome my laziness and figure out if any avenues are open to me here, and pick ones that seem the most appropriate.</p> <p>Regarding the mailing list, it is very subtly shown on the page, and although options like having some <a href="https://en.wikipedia.org/wiki/Modal_window">modal window</a> pop up and shove it in your face are available (something that apparently has been shown to increase conversions), I know I hate them, so I will assume you do as well, and, therefore, that is not something I would consider.</p> <h3 id="theming">Theming</h3> <p>This blog currently uses a theme: <a href="https://mmistakes.github.io/minimal-mistakes/">Minimal Mistakes</a>. I have benefitted significantly from having it, as it takes care of all the stuff I am not good at, like design. However, much like all sites that use themes, this blog looks really similar, if not the same, as other sites that also use the same theme.</p> <p>This issue is not hugely painful for me right now, since I am more focused on just writing content, but it would be nice for this site to have at least a bit more of a unique skin. I do feed myself by creating websites after all, but my viewpoint on this blog using a framework (Jekyll) and theme has been “why re-create the (blog framework/<a href="https://en.wikipedia.org/wiki/Content_management_system">CMS</a>-shaped) wheel when I can leverage the good work of others?”. Maybe I just need to do some more interesting customisations within this sandbox before investing the time and effort in doing a re-write.</p> <h3 id="voice">Voice</h3> <p>As an experiment, I decided to try adding voice narration to some of my posts. Personally, I got a kick out of doing them, but their <a href="https://www.youtube.com/">YouTube</a> metrics would seem to indicate that they have been greeted mostly with crickets<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup>.</p> <p>This is not surprising at all, and matches the expectations I had for it. By all accounts it is a failed experiment, but regardless of that, I am going to keep doing it.</p> <p>Aside from it being fun, I did get some feedback from a non-native English speaking peer, who said they used them for listening practice, which I was thrilled by! It just goes to show that your users will consume your content in ways that you will not expect!</p> <h3 id="monetisation">Monetisation</h3> <p>Every time I look at the “Pages and screens” report on <a href="https://analytics.google.com/">Google Analytics</a>, I always see, for every page, a display of “<strong>Total revenue: $0.00</strong>”.</p> <p><a href="https://www.google.com/">Google</a> <em>knows</em> I do not have ads on any of my pages, so it could choose to just <em>not</em> display this information, but it does anyway. Of course, this has the likely intended effect of making me think that Google sees some wasted potential, and perhaps I <em>could</em> make some pocket money from my posts, even if just the Doom for macOS one.</p> <p>However, consulting my blog bible, <em><a href="https://pragprog.com/titles/actb2/technical-blogging-second-edition/">Technical Blogging, Second Edition</a></em>, helped give me some clarity by providing a bunch of tips that brought my monetisation ponderings crashing straight back to earth, including this one that stops me dead in my tracks:</p> <blockquote> <p>Don’t place ads on your blog until you have at least 10,000 pageviews per month.</p> </blockquote> <p>My best single page is but a tenth of that, with the rest not even worth a mention. Even if I did reach that goal, the risk/reward ratio of running ads, particularly against a technical audience, would seem to skew heavily towards continuing to blog just for fun, which is fine by me.</p> <h2 id="actions-for-improvement">Actions for Improvement</h2> <div class="centered-image" style="width: 80%"> <figure> <img src="/assets/images/2023-04-28/alayna-tam-xmIrHafFlP0-unsplash.jpg" alt="person in yellow hoodie sitting on rock near lake and snow covered mountain during daytime"/> <figcaption> Photo by <a href="https://unsplash.com/@alayna_michelle?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Alayna Tam </a> on <a href="https://unsplash.com/photos/xmIrHafFlP0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Unsplash </a> </figcaption> </figure> </div> <p>After all this reflection, I think the best actions I can take for improvement are the following, in order of priority and immediate impact:</p> <ul> <li>Space out post releases by <em>at least</em> a week</li> <li>Establish a regular blogging habit, plan for once a month</li> <li>Attempt to submit a post to at least one social network I have not used before</li> <li>Increase the ratio of narrative-based posts</li> <li>Maybe consider revamping the site, if I have nothing better to do…</li> </ul> <p>Here’s hoping that it yields results of some kind. Did I miss anything? I love feedback, so let me know!</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>This post was started on September 9, 2022, and has been one of the grindiest posts so far: delayed for some good reasons, but also procrastinated on for a bunch of excuses. Self-reflection is quite hard, it would seem. But, I made a pact with myself: I cannot proceed with any other post, no matter how interesting or timely, until this one gets out the door. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p>Except for the times I would write about the same tech in <a href="https://www.paulfioravanti.com/blog/python-bitcoin-libraries-elixir/">multiple</a> <a href="https://www.paulfioravanti.com/blog/c-plus-plus-bitcoin-libraries-elixir/">languages</a>… or when some tech went through a major <a href="https://www.paulfioravanti.com/blog/elm-phoenix-13/">version</a> <a href="https://www.paulfioravanti.com/blog/elm-phoenix-14-webpack/">upgrade</a>… or when writing about <a href="https://www.paulfioravanti.com/blog/speak-at-meetups/">two</a> <a href="https://www.paulfioravanti.com/blog/organise-meetups/">sides</a> of the same topic… or when the topic was just too big and needed to be split <a href="https://www.paulfioravanti.com/blog/internationalisation-phoenix-liveview/">into</a> <a href="https://www.paulfioravanti.com/blog/internationalisation-phoenix-live-components/">multiple</a> <a href="https://www.paulfioravanti.com/blog/internationalisation-phoenix-live-layouts/">parts</a>… so, I made peace with embracing the meta, and allowing the posts to <a href="https://www.youtube.com/watch?v=yFqFLo_bYq0">rhyme</a> sometimes. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3" role="doc-endnote"> <p>There were times where I would want to make changes to a post after publishing, from minor typo fixes to more major updates involving significant amounts of content. So, even if I was not happy with a post, just because it is on the internet, does not mean it cannot be iterated on (however, I tend to consider posts with audio narration, like this one, frozen in time upon release so that voice and text always match). Anyone actually interested in seeing what a post looked like on its first release can just trawl through the <a href="https://github.com/paulfioravanti/paulfioravanti.github.io/commits/release">blog’s commit history</a>. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4" role="doc-endnote"> <p>Posts like <em><a href="https://www.paulfioravanti.com/blog/persons-character/">A Person’s Character (人という字は)</a></em>, <em><a href="https://www.paulfioravanti.com/blog/mums-meetup/">Mum’s Meetup</a></em>, and <em><a href="https://www.paulfioravanti.com/blog/welcome-back-overwork/">“Welcome back”</a></em>. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:5" role="doc-endnote"> <p>Which sounds very lofty; more realistically, though, the first-world problem is likely to be that the going rate is just not high enough for me, nor others I know who work in information technology that have their own blogs and share this view. This is also probably reflective of my limitations as a writer: if I was faster at generating content, and could pump out articles easily and naturally, then the time spent to going rate compensation ratio might look more enticing. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:6" role="doc-endnote"> <p>As of this writing, the top narration performer has a whopping 7 plays, while the least popular one languishes at 0 plays. <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="meta"/><category term="blogging"/><summary type="html"><![CDATA[Past-me wrote stuff down that benefited future-me. Present-me needs to keep paying that forward.]]></summary></entry><entry><title type="html">Sharing AppleScript Handlers</title><link href="https://www.paulfioravanti.com/blog/sharing-applescript-handlers/" rel="alternate" type="text/html" title="Sharing AppleScript Handlers"/><published>2022-07-05T08:30:00+10:00</published><updated>2024-01-17T12:46:00+11:00</updated><id>https://www.paulfioravanti.com/blog/sharing-applescript-handlers</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/sharing-applescript-handlers/"><![CDATA[<p>Being able to share code between files is a great way to put programming logic “<a href="https://en.wikipedia.org/wiki/Single_source_of_truth">in its right place</a>”, and prevent single files from containing hundreds or thousands of lines of code.</p> <p>A very basic example of sharing code in <a href="https://www.python.org/">Python</a> could be having a directory called <code class="language-plaintext highlighter-rouge">code/</code>, and in it, a file called <code class="language-plaintext highlighter-rouge">greetings.py</code>. This file contains very important business logic about how to say “hello”:</p> <p><strong><code class="language-plaintext highlighter-rouge">code/greetings.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello there!</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>Now, say I have a <code class="language-plaintext highlighter-rouge">greeter.py</code> file in the same directory, who has no idea how to say “hello”, and wants to leverage the specialised knowledge its neighbour file has on how to do it. It can do so easily by <code class="language-plaintext highlighter-rouge">import</code>ing the <code class="language-plaintext highlighter-rouge">hello</code> function from the <code class="language-plaintext highlighter-rouge">greetings</code> file, and using it:</p> <p><strong><code class="language-plaintext highlighter-rouge">code/greeter.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">greetings</span> <span class="kn">import</span> <span class="n">hello</span>

<span class="nf">hello</span><span class="p">()</span>
</code></pre></div></div> <p>Running the <code class="language-plaintext highlighter-rouge">greeter</code> program outputs what you would expect:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python code/greeter.py
<span class="go">Hello there!
</span></code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">from greetings import hello</code> line is able to find the <code class="language-plaintext highlighter-rouge">greetings</code> file thanks to Python’s <a href="https://docs.python.org/3/library/sys.html#sys.path"><code class="language-plaintext highlighter-rouge">sys.path</code></a>, a “list of strings that specifies the search path for modules”, which includes the directory of the script being run: in this case, the <code class="language-plaintext highlighter-rouge">code/</code> directory. Makes sense.</p> <p>Many programming languages have similar mechanisms to allow sharing code in simple, unobstructive ways. <a href="https://en.wikipedia.org/wiki/AppleScript">AppleScript</a> <em>can</em> share code, but certainly not in an intuitive way like Python. The extra steps required to do so compelled me to make a note of them somewhere, in order to not have to scour the internet to figure this out again.</p> <p>So, I will illustrate this sharing process by <a href="https://en.wikipedia.org/wiki/Code_refactoring">refactoring</a> out <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH">handlers</a> (read: <a href="https://en.wikipedia.org/wiki/Subroutine">functions</a>) into separate files using an example from <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/src/command">my stenography dictionaries</a>, where I have employed AppleScript to control my Mac using <a href="https://www.artofchording.com/introduction/how-steno-works.html">stenographic chords</a> (don’t worry, the <a href="https://en.wikipedia.org/wiki/Stenotype">stenography</a> context here is not important).</p> <h2 id="contextual-refreshing">Contextual Refreshing</h2> <p>I have an AppleScript file that performs a keyboard shortcut for a “refresh”.</p> <p>The most common <a href="https://en.wikipedia.org/wiki/Use_case">use case</a> for a “refresh” on a computer would probably be refreshing a browser window, and its keyboard shortcut on <a href="https://en.wikipedia.org/wiki/MacOS">macOS</a> is ⌘R (<a href="https://en.wikipedia.org/wiki/Command_key">Command</a>-R). Many other applications use the same ⌘R shortcut for their own interpretation of “refresh”, so contextually, it is quite a safe one to use.</p> <p>However, when I have the very specific use case of using the <a href="https://www.vim.org/">Vim</a> text editor in an <a href="https://iterm2.com/">iTerm2</a> terminal, I need a “refresh” to mean “refresh the <a href="https://github.com/ctrlpvim/ctrlp.vim">ctrlp.vim</a> fuzzy file finder’s cache, so it picks up the existence of any new files”, and the shortcut for that is F5 (<a href="https://en.wikipedia.org/wiki/Function_key">Function Key</a>-5).</p> <p>So, the script needs to figure out what current the “active” application is, and then “press” the appropriate keyboard shortcut (either ⌘R, or F5). Here is what that looks like in my code:</p> <p><strong><code class="language-plaintext highlighter-rouge">src/command/actions/refresh.applescript</code></strong></p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">on</span> <span class="nb">run</span><span class="w">
  </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">getActiveApp</span><span class="p">()</span><span class="w">

  </span><span class="k">if</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="s2">"iTerm2"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="nv">performiTerm2Refresh</span><span class="p">()</span><span class="w">
  </span><span class="k">else</span><span class="w">
    </span><span class="nv">performRefresh</span><span class="p">(</span><span class="nv">activeApp</span><span class="p">)</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">if</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nb">run</span><span class="w">

</span><span class="k">on</span> <span class="nv">performiTerm2Refresh</span><span class="p">()</span><span class="w">
  </span><span class="k">set</span><span class="w"> </span><span class="nv">processName</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">getiTermProcessName</span><span class="p">()</span><span class="w">

  </span><span class="k">if</span><span class="w"> </span><span class="nv">processName</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s2">"vim"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="nv">performVimRefresh</span><span class="p">()</span><span class="w">
  </span><span class="k">else</span><span class="w">
    </span><span class="nb">display</span><span class="w"> </span><span class="nv">notification</span><span class="w"> </span><span class="s2">"Nothing to refresh."</span><span class="w"> </span><span class="nv">with</span><span class="w"> </span><span class="na">title</span><span class="w"> </span><span class="s2">"Error"</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">if</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">performiTerm2Refresh</span><span class="w">

</span><span class="k">on</span> <span class="nv">performVimRefresh</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="s2">"iTerm2"</span><span class="w">
    </span><span class="c1"># 96 = F5</span><span class="w">
    </span><span class="na">key code</span><span class="w"> </span><span class="mi">96</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">performVimRefresh</span><span class="w">

</span><span class="k">on</span> <span class="nv">performRefresh</span><span class="p">(</span><span class="nv">activeApp</span><span class="p">)</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="s2">"r"</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">performRefresh</span><span class="w">

</span><span class="k">on</span> <span class="nv">getActiveApp</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="nb">return</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getActiveApp</span><span class="w">

</span><span class="k">on</span> <span class="nv">getiTermProcessName</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"iTerm2"</span><span class="w">
    </span><span class="nb">return</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">current</span><span class="w"> </span><span class="nv">session</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">current</span><span class="w"> </span><span class="na">window</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getiTermProcessName</span><span class="w">
</span></code></pre></div></div> <p>In this file there are six handlers, with the <code class="language-plaintext highlighter-rouge">on run</code> handler at the top being the entry point for when the script is run. The first four handlers contain code that is <em>specific</em> to “refreshing”, but the final two handlers, <code class="language-plaintext highlighter-rouge">getActiveApp()</code> and <code class="language-plaintext highlighter-rouge">getiTermProcessName()</code>, contain code that is general enough that other scripts could leverage them. Therefore, they are the perfect candidates for extraction into some other file, where they can be shared.</p> <p>Let’s remove them from <code class="language-plaintext highlighter-rouge">refresh.applescript</code>, and put them into a “utilities” file:</p> <p><strong><code class="language-plaintext highlighter-rouge">src/command/actions/util.applescript</code></strong></p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">on</span> <span class="nv">getActiveApp</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="nb">return</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getActiveApp</span><span class="w">

</span><span class="k">on</span> <span class="nv">getiTermProcessName</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"iTerm2"</span><span class="w">
    </span><span class="nb">return</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">current</span><span class="w"> </span><span class="nv">session</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">current</span><span class="w"> </span><span class="na">window</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getiTermProcessName</span><span class="w">
</span></code></pre></div></div> <p>Okay, so now the big question: how can <code class="language-plaintext highlighter-rouge">refresh.applescript</code> use the code that now lives in <code class="language-plaintext highlighter-rouge">util.applescript</code>?</p> <h2 id="creating-shared-libraries">Creating Shared Libraries</h2> <p>AppleScript cannot just reach into neighbouring files with a line like <code class="language-plaintext highlighter-rouge">from util import getActiveApp</code>. What needs to occur is the metamorphosis of the utilities script into what AppleScript calls a <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_script_objects.html#//apple_ref/doc/uid/TP40000983-CH207-SW6">Script Library</a>, which involves:</p> <ul> <li>Creating a compiled version of the script with the <a href="https://ss64.com/osx/osacompile.html"><code class="language-plaintext highlighter-rouge">osacompile</code></a> command line tool (the compiled script will have a <a href="https://fileinfo.com/extension/scpt"><code class="language-plaintext highlighter-rouge">.scpt</code></a> file extension, instead of <code class="language-plaintext highlighter-rouge">.applescript</code>)</li> <li>Putting the compiled script in a designated “Script Libraries” folder, whose locations are numerous (see previous <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_script_objects.html#//apple_ref/doc/uid/TP40000983-CH207-SW6">Script Library</a> link), but the one I have seen cited most often, and that <em>did</em> work for me, is in the user Library directory, specifically: <code class="language-plaintext highlighter-rouge">~/Library/Script Libraries/</code></li> </ul> <p>After those steps are done, we can use the utility handlers again, so let’s give it a shot!</p> <p>First, create the compiled script:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">osacompile -o util.scpt util.applescript
</span></code></pre></div></div> <p>Now, move the newly created <code class="language-plaintext highlighter-rouge">util.scpt</code> script to the Script Libraries directory. Since that directory gets used by other programs as well, let’s silo the file in its own directory called <code class="language-plaintext highlighter-rouge">steno-dictionaries</code>:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">mkdir -p ~/Library/Script Libraries/steno-dictionaries
mv util.scpt ~/Library/Script Libraries/steno-dictionaries
</span></code></pre></div></div> <p>Now, we can change <code class="language-plaintext highlighter-rouge">refresh.applescript</code> to use the handlers in the newly-minted Script Library:</p> <p><strong><code class="language-plaintext highlighter-rouge">src/command/actions/refresh.applescript</code></strong></p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">property</span><span class="w"> </span><span class="nv">Util</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nv">script</span><span class="w"> </span><span class="s2">"steno-dictionaries/util"</span><span class="w">

</span><span class="k">on</span> <span class="nb">run</span><span class="w">
  </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">Util</span>'s <span class="nv">getActiveApp</span><span class="p">()</span><span class="w">

  </span><span class="c1"># ...</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nb">run</span><span class="w">

</span><span class="k">on</span> <span class="nv">performiTerm2Refresh</span><span class="p">()</span><span class="w">
  </span><span class="k">set</span><span class="w"> </span><span class="nv">processName</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">Util</span>'s <span class="nv">getiTermProcessName</span><span class="p">()</span><span class="w">

  </span><span class="c1"># ...</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">performiTerm2Refresh</span><span class="w">

</span><span class="c1"># ...</span><span class="w">
</span></code></pre></div></div> <p>Done! Since Shared Libraries are compiled, this enables us to reference them as a static <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_fundamentals.html#//apple_ref/doc/uid/TP40000983-CH218-SW5">Property</a> (here named <code class="language-plaintext highlighter-rouge">Util</code>), allowing for commands to be sent to it using the <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_script_objects.html#//apple_ref/doc/uid/TP40000983-CH207-SW3">possessive syntax</a> (<code class="language-plaintext highlighter-rouge">'s</code>).</p> <h2 id="shared-libraries-at-scale">Shared Libraries at Scale</h2> <p>The example above is all well and good for compiling a single Shared Library, but performing those commands for multiple files gets tiresome quite quickly.</p> <p>In order to automate this in my <a href="https://github.com/paulfioravanti/steno-dictionaries">steno-dictionaries repo</a>, I wrote some <a href="https://en.wikipedia.org/wiki/Shell_script">shell scripts</a> (that live in its <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/bin"><code class="language-plaintext highlighter-rouge">bin/</code> directory</a>) that “bootstrap” the process of making the AppleScript code in the repository ready to use after being <a href="https://git-scm.com/docs/git-clone">cloned</a>. They ensure that running one command (<code class="language-plaintext highlighter-rouge">./bin/bootstrap</code>) will, in the following order:</p> <ul> <li>Create a <code class="language-plaintext highlighter-rouge">~/Library/Script Libraries/steno-dictionaries</code> directory</li> <li>Compile all AppleScript files that will become Script Libraries into <code class="language-plaintext highlighter-rouge">.scpt</code> files</li> <li>Move the Script Library <code class="language-plaintext highlighter-rouge">.scpt</code> files to <code class="language-plaintext highlighter-rouge">~/Library/Script Libraries/steno-dictionaries</code></li> <li>Then, compile all other AppleScript files that reference the Script Libraries (but are not, themselves, Script Libraries) into <code class="language-plaintext highlighter-rouge">.scpt</code> files</li> </ul> <blockquote> <p>(I’m assuming that running <code class="language-plaintext highlighter-rouge">.scpt</code> files are faster than <code class="language-plaintext highlighter-rouge">.applescript</code> files since they are compiled, but I cannot seem to find conclusive evidence to back up that assumption on the internet, which is weird…).</p> </blockquote> <p>The <code class="language-plaintext highlighter-rouge">.scpt</code> scripts are executed by shell commands that run <a href="https://ss64.com/osx/osascript.html"><code class="language-plaintext highlighter-rouge">osascript</code></a> commands, which are contained in steno chord entries in the repo’s <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/src/command"><code class="language-plaintext highlighter-rouge">commands</code> directory</a>. The one that runs the “refresh” script looks like this:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash <span class="nt">-ci</span> <span class="s1">'osascript $STENO_DICTIONARIES/src/command/actions/refresh.scpt'</span>
</code></pre></div></div> <blockquote> <p>The shell commands run in <a href="https://www.gnu.org/software/bash/manual/html_node/Interactive-Shell-Behavior.html">interactive mode</a> for <a href="https://github.com/paulfioravanti/steno-dictionaries/blob/main/dictionaries/commands.md">reasons</a>.</p> </blockquote> <h2 id="caring-about-sharing">Caring about Sharing</h2> <p>I really wish that sharing code in AppleScript was not as complex as it currently is, but I do not see that changing at all, assuming that AppleScript itself even survives into the future.</p> <p>The revamped <a href="https://developer.apple.com/">Apple Developer site</a> would seem to ignore AppleScript’s existence altogether (all the documentation links used in this post seem to come from the archive, implying they are now legacy and unmaintained…), but I do not see any alternative candidate language being put forward for macOS system automation programming.</p> <p>Personally, I would be happy to change everything I have written into <a href="https://www.swift.org/">Swift</a>, if that was possible. But, for now, I need AppleScript, and if you do too, hopefully this post has been able to serve as some reference.</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="apple"/><category term="scripting"/><summary type="html"><![CDATA[Navigating AppleScript's awkward handshakes between files.]]></summary></entry><entry><title type="html">“Welcome back”</title><link href="https://www.paulfioravanti.com/blog/welcome-back-overwork/" rel="alternate" type="text/html" title="“Welcome back”"/><published>2022-07-03T12:50:00+10:00</published><updated>2022-07-03T12:50:00+10:00</updated><id>https://www.paulfioravanti.com/blog/welcome-back-overwork</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/welcome-back-overwork/"><![CDATA[<div class="post-audio"> <div class="post-audio-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/_nkqjga6doM" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> </div> <div class="spacer"></div> <div class="text"> :studio_microphone: This post has audio narration </div> </div> <p>In the late <a href="https://en.wiktionary.org/wiki/noughties">noughties</a>, I worked for an American software company in Japan.</p> <p>That period in Tokyo, just pre-<a href="https://en.wikipedia.org/wiki/Bankruptcy_of_Lehman_Brothers">Lehman Shock</a>, felt like a mini tech boom: the company had managed to hit the jackpot by selling a colossal software and professional services deal to a huge Japanese company.</p> <p>Money from sales expense accounts flowed freely, even into the beers of the engineers; all in an attempt to foster goodwill, encourage a successful project implementation, and keep the customer happy.</p> <p>However, I do not recall anyone on the project ever being happy.</p> <p>The customer was not happy, because the software and its ecosystem did not work as they expected, for reasons which were obvious to them, but perhaps not to anyone outside Japan<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>.</p> <p>The project implementation team were not happy, because the responsibility to bridge the gap on these issues fell directly on them.</p> <p>During the worst periods, we were working literal 18-22 hour days. There were periods where I had no time to actually go home, and had to get my partner to physically bring me changes of clothes to the office; I had to grab showers, and maybe a couple of hours sleep, at my teammate’s apartment close by.</p> <p>Many weeks were spent on a schedule of getting an earful of frustration from the customer about the software product during the day (as well as from our own sales staff, who did not want to have their commissions jeopardised), then getting on calls with the US support and development teams throughout the night, in hopes they could create <a href="https://en.wikipedia.org/wiki/Patch_(computing)">patches</a> for the product. If they could, we would apply them, re-adapt our implementation to account for them, then rinse and repeat this cycle of insanity: we were very figuratively repairing the aeroplane, and replacing its parts, mid-flight.</p> <p>On one particular night, when I was actually able to make it home, my company-issued <a href="https://en.wikipedia.org/wiki/BlackBerry">BlackBerry</a> summoned me to a 2:00am conference call with one of the US regional offices to discuss the usual product issues found by the customer, which I joined lying flat on the floor.</p> <p>A lot of the conversation content was out of my depth, since I lacked background context from previous projects. But, when Japan-related questions finally came up, I was able to chime in and attempt to provide something of value, at which point my project teammate said the words that I can still hear clearly to this day:</p> <blockquote style="font-size: xx-large"> <p>“Welcome back”</p> </blockquote> <p>Confused, I asked what he was talking about, and his response impacted like a fireworks display of every red flag I had ignored about this project and the company.</p> <p>I was duly informed that I had <em>fallen asleep</em> on the call, and our colleagues across the <a href="https://en.wikipedia.org/wiki/Pacific_Ocean">Pacific</a> had decided to broadcast my snoring <em>office-wide</em> on their speakerphone for laughs.</p> <p>As far as I was concerned, I was <em>fully conscious</em>, alert, and focused on the discussions. But, it would seem that even in my dreams I couldn’t escape this waking nightmare of a project.</p> <p>Eventually, though, the project did end (“successfully”, so that everyone saved face), and I began formulating an exit strategy.</p> <p>Not fast enough to beat the start of a new assignment, though, which was shaping up to be even worse than the previous one: the project owner was a horrid person who, among many terrible traits, could not seem to grasp the concept of using a <a href="https://en.wikipedia.org/wiki/Deployment_environment#Staging">staging environment</a> to preview the current state of a website being actively developed on.</p> <p>He insisted that <em>every page of the <strong>website</strong></em> be <strong><em>printed out on paper</em></strong> periodically, and <em>put in a <strong>3-ring binder</strong></em> for his review, where he would <em><strong>manually mark out “corrections”</strong> he wanted with a <strong>pen</strong></em>!</p> <p>I just…yeah, no thanks.</p> <p>Even without a new employer to join, I knew I was severely burnt out, and just needed to leave <em>immediately</em>. Regardless of my youth, I could not ignore the toll the work took on me physically, and spent the following few months recovering before even thinking of looking for a new job.</p> <p>The fire of the trenches may have forged some great friendships between myself and former colleagues that still last to this day, but I do regret giving so much to a company, while receiving so comparatively little in return, in order to achieve such an inconsequential objective, that was not appreciated, which then required me to use my own time to heal the damage it caused.</p> <p>Unlike the software we implemented, which is long gone, the visceral mental rulebook for work that resulted from my experience at the company continues to serve me well (and has collected a few more entries over the years). With regards to overwork, my rules are quite simple:</p> <ol> <li>Do not overwork. It is just not worth it.</li> <li>Do not violate Rule 1. If you are foolish enough to do so, the incentives received had better take into consideration all the opportunity costs of that extra work time, the impact to physical and mental health, and the time needed to recover: all of which are higher than you likely think, so go check yourself and read Rule 1 again.</li> </ol> <p>What cannot reasonably be done today, can be done tomorrow; work is never “done”. A contract for employment is not an agreement to indentured servitude. Charity is for charities and other good causes, not for-profit organisations.</p> <p>I hope that you keep your own relationship with work healthy, and can leverage this cautionary tale to avoid ever being “welcomed back”.</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>Issues that I can specifically remember with the system included:</p> <ul> <li>Display, formatting, and encoding issues related to <a href="https://en.wikipedia.org/wiki/DBCS">double-byte character sets</a> and <a href="https://en.wikipedia.org/wiki/Half-width_kana">half-width <em>kana</em></a> (imagine a system that had problems displaying, say, English capital letters…)</li> <li>Inability to relate <em><a href="https://en.wikipedia.org/wiki/Furigana">furigana</a></em> readings to <em><a href="https://en.wikipedia.org/wiki/Kanji">kanji</a></em>, meant ordering of words would be based on their <a href="https://en.wikipedia.org/wiki/Unicode">Unicode</a> <a href="https://en.wikipedia.org/wiki/Code_point">code points</a>, rather than their <em><a href="https://en.wikipedia.org/wiki/Goj%C5%ABon">gojūon</a></em> ordering (imagine a system that couldn’t sort words alphabetically…)</li> <li>Garbled text (<em><a href="https://en.wikipedia.org/wiki/Mojibake">mojibake</a></em>) display when attempting to send emails to early Japanese mobile phones (<a href="https://en.wikipedia.org/wiki/Gal%C3%A1pagos_syndrome#Mobile_phones">Galápagos phones</a>) due to not being able to handle <a href="https://en.wikipedia.org/wiki/Japanese_language_and_computers#Character_encodings">Japanese character encodings</a> like <a href="https://en.wikipedia.org/wiki/ISO/IEC_2022#ISO-2022-JP">ISO-2022-JP</a> (imagine a system that only sent out emails in <a href="https://en.wikipedia.org/wiki/Dingbat">dingbat</a> font…)</li> <li>Limited ability to customise the software product for their specific business processes (which smells to me like they were oversold on the software product’s <a href="https://en.wikipedia.org/wiki/Extensibility">extensibility</a>)</li> <li>Poorly translated Japanese documentation, if there was any at all</li> </ul> <p><a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="japan"/><category term="work"/><category term="overwork"/><category term="software"/><category term="japanization"/><category term="j10n"/><category term="feature-phones"/><category term="日本"/><category term="ガラケー"/><summary type="html"><![CDATA[A short story of overwork from the software trenches of Tokyo.]]></summary></entry><entry><title type="html">Flexbox Furigana</title><link href="https://www.paulfioravanti.com/blog/flexbox-furigana/" rel="alternate" type="text/html" title="Flexbox Furigana"/><published>2022-06-25T10:30:00+10:00</published><updated>2022-06-28T09:00:00+10:00</updated><id>https://www.paulfioravanti.com/blog/flexbox-furigana</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/flexbox-furigana/"><![CDATA[<p><em><a href="https://en.wikipedia.org/wiki/Furigana">Furigana</a></em> are annotations used to indicate the Japanese reading, or pronunciation, of Chinese <em><a href="https://en.wikipedia.org/wiki/Kanji">kanji</a></em> characters.</p> <p>As a simple example, let’s say we have a character like this<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>:</p> <div class="japanese-hero"> 車 </div> <p><em>Furigana</em> for the <em>kanji</em>, written with <em><a href="https://en.wikipedia.org/wiki/Hiragana">hiragana</a></em><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>, can be placed above it<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>:</p> <div class="japanese-hero" style="padding-top: 20px;"> <ruby lang="ja"> 車 <rp>(</rp> <rt style="ruby-align: center; text-align: center; font-size: medium;"> くるま </rt> <rp>)</rp> </ruby> </div> <p>This is all well and good for Japanese speakers, but what if I wanted English-speakers to be able to read along as well? This can be done by adding the character’s pronunciation using Latin script (<em><a href="https://en.wikipedia.org/wiki/Romanization_of_Japanese">romaji</a></em>) as another <em>furigana</em>-style annotation:</p> <div class="japanese-hero"> <ruby lang="ja" class="japanese"> <ruby lang="ja"> 車 <rp>(</rp> <rt style="ruby-align: center; text-align: center; font-size: medium;"> くるま </rt> <rp>, </rp> </ruby> <rt style="font-style: italic; font-size: medium;"> kuruma </rt> <rp>)</rp> </ruby> </div> <p>Okay, but what does this word actually mean? We could put an English translation to the right of the word, or pile on <em>yet another</em> annotation for the English meaning<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>:</p> <div class="japanese-hero"> <ruby lang="en" class="japanese"> <ruby lang="ja" class="japanese"> <ruby lang="ja"> 車 <rp>(</rp> <rt style="ruby-align: center; text-align: center; font-size: medium;"> くるま </rt> <rp>, </rp> </ruby> <rt style="font-style: italic; font-size: medium;"> kuruma </rt> <rp>, </rp> </ruby> <rt lang="en" style="font-weight: bold; text-align: center;"> car </rt> <rp>) </rp> </ruby> </div> <p>For single words, this “full-suite” of annotations could be considered acceptable, but for complete sentences, where the objective is to have a non-Japanese speaker read along <ruby lang="ja">phonetically<rp>(</rp><rt style="">fuh·neh·ti·kuh·lee</rt><rp>)</rp></ruby>, I think any translation needs its own dedicated section.</p> <p>I did exactly this in a previous blog post, <em><a href="https://www.paulfioravanti.com/blog/persons-character/">A Person’s Character (人という字は)</a></em>, where I wanted to show the <ruby lang="ja">pronunciation<rp>(</rp><rt style="">/pɹəˌnʌn.siˈeɪ.ʃən/</rt><rp>)</rp></ruby> and meaning of some lines of dialogue from the television drama <em><a href="https://en.wikipedia.org/wiki/Kinpachi-sensei">Kinpachi-sensei</a></em>. The intention was to enable English speakers to follow the Japanese dialogue using the <em>romaji</em> annotations, and <em>then</em> read the translation:</p> <blockquote> <div class="japanese-with-furigana-romaji"> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">君<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">きみ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> Kimi</rt> </ruby> <ruby lang="ja" class="japanese"> たち <rt class="romaji" style="font-size: 50%"> tachi</rt> </ruby> <ruby lang="ja" class="japanese"> いい <rt class="romaji" style="font-size: 50%"> ii</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu</rt> </ruby> <ruby lang="ja" class="japanese"> か <rt class="romaji" style="font-size: 50%"> ka~.</rt> </ruby> <ruby lang="ja" class="japanese"> 〜。 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> Hito</rt> </ruby> <ruby lang="ja" class="japanese"> と <rt class="romaji" style="font-size: 50%"> to</rt> </ruby> <ruby lang="ja" class="japanese"> いう <rt class="romaji" style="font-size: 50%"> iu</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">字<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">じ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> ji</rt> </ruby> <ruby lang="ja" class="japanese"> は <rt class="romaji" style="font-size: 50%"> wa</rt> </ruby> <ruby lang="ja" class="japanese"> ねぇ <rt class="romaji" style="font-size: 50%"> nē,</rt> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> ひとり <rt class="romaji" style="font-size: 50%"> hitori</rt> </ruby> <ruby lang="ja" class="japanese"> の <rt class="romaji" style="font-size: 50%"> no</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">「人」<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:8px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> "hito"</rt> </ruby> <ruby lang="ja" class="japanese"> が <rt class="romaji" style="font-size: 50%"> ga</rt> </ruby> <ruby lang="ja" class="japanese"> もう <rt class="romaji" style="font-size: 50%"> mō</rt> </ruby> <ruby lang="ja" class="japanese"> ひとり <rt class="romaji" style="font-size: 50%"> hitori</rt> </ruby> <ruby lang="ja" class="japanese"> の <rt class="romaji" style="font-size: 50%"> no</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">「人」<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:8px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> "hito"</rt> </ruby> <ruby lang="ja" class="japanese"> を <rt class="romaji" style="font-size: 50%"> o</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">支えて<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:3px;">ささ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> sasaete</rt> </ruby> <ruby lang="ja" class="japanese"> いる <rt class="romaji" style="font-size: 50%"> iru</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">字<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">じ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> ji</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu.</rt> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> <ruby lang="ja" class="japanese"> つまり <rt class="romaji" style="font-size: 50%"> Tsumari,</rt> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> と <rt class="romaji" style="font-size: 50%"> to</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> が <rt class="romaji" style="font-size: 50%"> ga</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-compound-word"> <ruby lang="ja" class="japanese"> <ruby lang="ja">支え<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:3px;">ささ</rt><rp>)</rp></ruby> <rt class="romaji" style="font-size: 50%"> sasae</rt> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">合ってる<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:8px;">あ</rt><rp>)</rp></ruby> <rt class="romaji" style="font-size: 50%"> atteru</rt> </ruby> </span> </ruby> <ruby lang="ja" class="japanese"> から <rt class="romaji" style="font-size: 50%"> kara</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> なん <rt class="romaji" style="font-size: 50%"> nan</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu.</rt> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> Hito</rt> </ruby> <ruby lang="ja" class="japanese"> は <rt class="romaji" style="font-size: 50%"> wa</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> に <rt class="romaji" style="font-size: 50%"> ni</rt> </ruby> <ruby lang="ja" class="japanese"> よって <rt class="romaji" style="font-size: 50%"> yotte</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">支えられ<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:3px;">ささ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> sasaerare,</rt> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> の <rt class="romaji" style="font-size: 50%"> no</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">間<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:5px;">あいだ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> aida</rt> </ruby> <ruby lang="ja" class="japanese"> で <rt class="romaji" style="font-size: 50%"> de</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人間<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:6px;">にんげん</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> ningen</rt> </ruby> <ruby lang="ja" class="japanese"> として <rt class="romaji" style="font-size: 50%"> toshite</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">磨かれて<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:4px;">みが</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> migakarete</rt> </ruby> <ruby lang="ja" class="japanese"> いくん <rt class="romaji" style="font-size: 50%"> ikun</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu.</rt> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> </div> <br/> Can I have your attention, please. So, the character for "person" consists of one person holding up and sustaining another person. In other words, it is a "person" precisely <em>because</em> a person and another person are supporting each other. A person gets support from other people and their community, and through that support, grows and develops as a human. </blockquote> <p>Figuring out the idiosyncrasies of how to mark-up and display all of these annotations in the way I wanted using <a href="https://en.wikipedia.org/wiki/HTML">HTML</a> and <a href="https://en.wikipedia.org/wiki/CSS">CSS</a>, and then developing a way to extract that logic out into functionality that could be shared across multiple <a href="https://daringfireball.net/projects/markdown/">Markdown</a>-based blog posts using <a href="https://shopify.github.io/liquid/">Liquid</a>, took me far more time than I expected, and became the catalyst for writing this particular blog post.</p> <p>So, the following is my <a href="https://en.wiktionary.org/wiki/brain_dump">brain dump</a> on what I learned about using annotations on the web.</p> <h2 id="annotation-markup">Annotation Markup</h2> <div class="centered-image" style="width: 60%;"> <figure style="margin-bottom: 0; margin-top: 20px;"> <img src="/assets/images/2022-06-25/Furigana_example.png" alt="Japanese word meaning 'furigana' with above smaller orange phonetic hiragana called 'furigana' helping to pronounce it."/> </figure> <figcaption style="margin-bottom: 0.75em;"> Image by Kang Seonghoon, Public domain, via <a href="https://commons.wikimedia.org/wiki/File:Furigana_example.svg"> Wikimedia Commons </a> </figcaption> </div> <p><em>Furigana</em> is a type of <a href="https://en.wikipedia.org/wiki/Ruby_character">Ruby character</a> annotation<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>, and is marked up in HTML using the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby"><code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code></a> tag.</p> <p>Searching the internet for how to mark-up <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> elements leads to a significant amount of conflicting information. The <a href="https://www.w3.org/TR/2001/REC-ruby-20010531/Overview.html.utf-8">W3 Ruby Annotation</a> document mentions a selection of markup tags that can appear inside a <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tag:</p> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt"><code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code></a>: ruby text (the annotation)</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp"><code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code></a>: ruby parenthesis (for when a browser does not support ruby annotations and the ruby text gets rendered inline)</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rb"><code class="language-plaintext highlighter-rouge">&lt;rb&gt;</code></a>: ruby base (the text that is being annotated)</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rtc"><code class="language-plaintext highlighter-rouge">&lt;rtc&gt;</code></a>: ruby text container (a container for <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> elements when markup is “complex”)</li> <li><code class="language-plaintext highlighter-rouge">&lt;rbc&gt;</code>: ruby base container (a container for <code class="language-plaintext highlighter-rouge">&lt;rb&gt;</code> elements when markup is “complex”)</li> </ul> <p>Each of the tag links in the list above is from the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML">Mozilla HTML documentation</a>, a trustworthy source for this kind of information (in my opinion), and they say that the <code class="language-plaintext highlighter-rouge">&lt;rb&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;rtc&gt;</code>, and <code class="language-plaintext highlighter-rouge">&lt;rbc&gt;</code> tags are <a href="https://en.wikipedia.org/wiki/Deprecation">deprecated</a>, and should be avoided. In order to future-proof <em>furigana</em> annotations, it would seem that only three tags should be used: container <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags, along with child <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tags.</p> <p>So, for the “car” <em>kanji</em> from the example above, <ruby lang="ja">車<rp>(</rp><rt style="">くるま</rt><rp>)</rp></ruby>, the markup could look like the following:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
  車
  <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;rt&gt;</span>くるま<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <blockquote> <p>What are those <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tags for? In the event that a browser does not support ruby annotations, the code above will display as:</p> <div class="japanese-hero" style="margin-top: -20px; font-size: xx-large;"> 車(くるま) </div> <figure style=" float: right; margin-bottom: 0; margin-left: 10px; margin-top: 10px; width: 40%; "> <img src="/assets/images/2022-06-25/browser-dev-tools.jpg" alt="Ruby &lt;rt&gt; tag base CSS styles in Chrome dev tools"/> </figure> <p>I could not find any built-in functionality that would force a modern browser to “pretend” it does not support annotations, but I was able to follow the <a href="https://www.w3.org/TR/css-ruby-1/#default-inline">Inlining Ruby Annotations</a> section of <a href="https://www.w3.org/TR/css-ruby-1/">CSS Ruby Annotation Layout Module</a>, and add styling via the browser developer tools to achieve the desired display behaviour:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">rp</span><span class="o">,</span> <span class="nt">rt</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">inline</span><span class="p">;</span>
  <span class="nl">white-space</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>
  <span class="nl">font</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>
  <span class="nl">text-emphasis</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div> </div> </blockquote> <p>Given that the <a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-ruby-element">HTML spec for the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> element</a> says that a <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tag can contain “one or more <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> elements”, you may be forgiven for thinking that adding the extra <em>romaji</em> annotation would be a case of perhaps appending it beneath the <em>furigana</em>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
  車
  <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;rt&gt;</span>くるま<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>, <span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;rt&gt;</span>kuruma<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero" style="padding-top: 40px;"> <ruby lang="ja"> 車 <rp>(</rp> <rt>くるま</rt> <rp>, </rp> <rt>kuruma</rt> <rp>)</rp> </ruby> </div> <p>Not great. We can, however, rearrange the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> child elements, and leverage CSS <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox">Flexbox</a> styling, to exhert more control over the visuals (we will keep styling <a href="https://www.w3schools.com/html/html_css.asp">inline</a> for demonstration purposes moving forward):</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column-reverse;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;rt&gt;</span>kuruma<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>, <span class="nt">&lt;/rp&gt;</span>
  車
  <span class="nt">&lt;rt&gt;</span>くるま<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style=" display: inline-flex; flex-direction: column-reverse; "> <rp>(</rp> <rt>kuruma</rt> <rp>, </rp> 車 <rt>くるま</rt> <rp>)</rp> </ruby> </div> <p>This displays in a similar way to the initial example at the beginning of the post (though the default gap between the <em>kanji</em> and <em>furigana</em> is a bit concerning…). However, I think the meaning behind the child elements of the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> parent tag have become muddled.</p> <p>What is annotating what? Is 車 annotating <em>kuruma</em>, along with くるま annotating 車? Technically, it seems these semantics are valid, but is there is another way to communicate the desired annotations via markup?</p> <blockquote> <p>Note, also, that we have headed into exploitation territory for the meaning of the <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tag to make sure that we get <strong>車(くるま, kuruma)</strong> displayed when annotations are not supported (commas are not parentheses, after all). I do not currently know of a “better” way to mark this up to allow for a similar kind of display.</p> </blockquote> <p>The code examples in the <a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-ruby-element">HTML spec for the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> element</a> show that “a nested <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> element” can be used for inner annotations. In our case, this could mean that the markup should indicate that:</p> <ul> <li>くるま annotates 車 (one <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> inner nested element)</li> <li><em>kuruma</em> annotates the <ruby lang="ja">車<rp>(</rp><rt style="">くるま</rt><rp>)</rp></ruby> compound (another <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> outer nesting element)</li> </ul> <p>Let’s see how this could look in markup:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    車
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>くるま<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>kuruma<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 車 <rp>(</rp> <rt>くるま</rt> <rp>)</rp> </ruby> <rt>kuruma</rt> </ruby> </div> <p>Looks acceptable to me, and I think the meaning of the markup is conveyed in a clearer way.</p> <blockquote> <p>Nesting <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags like this means we have to give up the ability to display the <em>furigana</em> and <em>romaji</em> together [<strong>車(くるま, kuruma)</strong>], when annotations are not supported. But, I am prepared to accept this compromise because the fallback display looks good enough for the rare times it will probably ever be viewed:</p> <div class="japanese-hero" style="font-size: xx-large;"> <div>車(くるま)</div> <div>kuruma</div> </div> </blockquote> <p>Before concluding that we have the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> markup and styling to use as a foundation to build with, let’s test it with a few other <em>kanji</em> scenarios.</p> <h2 id="single-word-multiple-kanji">Single Word, Multiple <em>Kanji</em></h2> <p>Not every word in Japanese can be written with a single <em>kanji</em>; many require multiple <em>kanji</em> together in a compound. So, let’s test the current markup’s display of <em>kanji</em> compounds by changing the “car” into an “automobile”:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    自動車
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>じどうしゃ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>jidōsha<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 自動車 <rp>(</rp> <rt>じどうしゃ</rt> <rp>)</rp> </ruby> <rt>jidōsha</rt> </ruby> </div> <p>This looks like it displays as expected. However, pedanticism is going to get the best of me here: even though the <em>furigana</em> is correct for the entire word, they <em>don’t quite</em> line up perfectly above the individual characters they are annotating the reading for.</p> <p>Let’s see if we can fix that by adding more <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code>/<code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tag sets:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    自
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>じ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    動
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>どう<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    車
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>しゃ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>
    jidōsha
  <span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 自 <rp>(</rp> <rt>じ</rt> <rp>)</rp> 動 <rp>(</rp> <rt>どう</rt> <rp>)</rp> 車 <rp>(</rp> <rt>しゃ</rt> <rp>)</rp> </ruby> <rt> jidōsha </rt> </ruby> </div> <p>Ah, much better! The difference may be minor, but I think it’s important!</p> <blockquote> <p>Doing this, unfortunately, “breaks” the <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> fallback display even more, as the <em>furigana</em> readings are now displayed broken down not by full word, but by character:</p> <div class="japanese-hero" style="font-size: xx-large;"> <div>自 (じ) 動 (どう) 車 (しゃ)</div> <div>jidōsha</div> </div> <p>At this point, I think attempting to handle the fallback display gracefully is going to be prioritised to a distant second compared to getting the <em>furigana</em> displaying well for “normal” modern browser usage.</p> </blockquote> <h2 id="single-word-alternating-kanji-and-kana">Single Word, Alternating <em>Kanji</em> and <em>Kana</em></h2> <p><a href="https://www.wasabi-jpn.com/japanese-grammar/japanese-compound-verbs/">Compound verbs</a> in Japanese are a good example of words that alternate between <em>kanji</em> and <em><a href="https://en.wikipedia.org/wiki/Kana">kana</a></em> in their construction. For example, in the annotations for the word <em>norikomu</em> (乗り込む), meaning “to get into (a vehicle)”, I would expect there to be <em>furigana</em> over 乗 and 込, but not over り or む. As for the <em>romaji</em>, I think a single annotation under the word would suffice.</p> <p>Let’s see if we can re-use the code from the <em>kanji</em> compound to achieve the effect we want:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    乗
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    り
    込
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    む
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>
    norikomu
  <span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> <rt> norikomu </rt> </ruby> </div> <p>Hmm, not quite right: that second <em>furigana</em> positioning is incorrect, and there is an awkward space between 乗り and 込む. Perhaps each half of this word needs to be its own <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> element? Let’s give that a try:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    乗
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    り
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    込
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    む
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>norikomu<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り </ruby> <ruby lang="ja"> 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> <rt>norikomu</rt> </ruby> </div> <p>The <em>furigana</em> positioning is fixed, but since we now have three child elements under the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tag, the <code class="language-plaintext highlighter-rouge">flex-direction: column</code> styling is displaying them all vertically, which is not the result we want.</p> <p>In order to get them to display as one set, we will need to wrap a container around the 乗り and 込む <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags. Yet another <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tag seems like it could be overkill here, so, instead, let’s try a plain old <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span"><code class="language-plaintext highlighter-rouge">&lt;span&gt;</code></a> tag, and give it some Flexbox styling as well:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"display: inline-flex;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
      乗
      <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
      <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      り
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
      込
      <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
      <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      む
    <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;rt&gt;</span>norikomu<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <span style="display: inline-flex;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り </ruby> <ruby lang="ja"> 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> </span> <rt>norikomu</rt> </ruby> </div> <p>Looks good to me! If we <em>did</em> want to split the <em>romaji</em>, so the annotation was under each part of the word, we have the option of changing the tag nesting around to achieve that effect:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"display: inline-flex;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
      乗
      <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
      <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      り
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;rt&gt;</span>nori<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
      込
      <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
      <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      む
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;rt&gt;</span>komu<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
<span class="nt">&lt;/span&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <span style="display: inline-flex; justify-content: center;"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り </ruby> <rt>nori</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> <rt>komu</rt> </ruby> </span> </div> <p>Great! We now know there are options around the display for <em>romaji</em>, for potential readability and/or aesthetic reasons.</p> <h2 id="styled-furigana">Styled <em>Furigana</em></h2> <p>Speaking of aesthetics, does <em>furigana</em> still display as expected if the CSS <code class="language-plaintext highlighter-rouge">font-style</code> changes, like how everything gets italicised on this page when the content is within <code class="language-plaintext highlighter-rouge">&lt;blockquote&gt;</code> tags? Let’s find out with the phrase <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">自<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:0;">じ</rt><rp>)</rp></ruby> <ruby lang="ja">動<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:0;">どう</rt><rp>)</rp></ruby> <ruby lang="ja">車<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:0;">しゃ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> jidōsha</rt> </ruby><ruby lang="ja" class="japanese"> に <rt class="romaji" style="font-size: 50%"> ni</rt> </ruby><ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">乗り<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:5px;">の</rt><rp>)</rp></ruby> <ruby lang="ja">込む<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:7px;">こ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> norikomu</rt> </ruby> (“to get into the automobile”):</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;blockquote&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"align-items: baseline; display: inline-flex;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
        自
        <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
        <span class="nt">&lt;rt&gt;</span>じ<span class="nt">&lt;/rt&gt;</span>
        <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
        動
        <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
        <span class="nt">&lt;rt&gt;</span>どう<span class="nt">&lt;/rt&gt;</span>
        <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
        車
        <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
        <span class="nt">&lt;rt&gt;</span>しゃ<span class="nt">&lt;/rt&gt;</span>
        <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;/ruby&gt;</span>
      <span class="nt">&lt;rt&gt;</span>jidōsha<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
      に
      <span class="nt">&lt;rt&gt;</span>ni<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"display: inline-flex;"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
          乗
          <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
          <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
          <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
          り
        <span class="nt">&lt;/ruby&gt;</span>
        <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
          込
          <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
          <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
          <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
          む
        <span class="nt">&lt;/ruby&gt;</span>
      <span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;rt&gt;</span>norikomu<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/blockquote&gt;</span>
</code></pre></div></div> <blockquote> <div class="japanese-hero"> <div style="align-items: baseline; display: inline-flex;"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 自 <rp>(</rp> <rt>じ</rt> <rp>)</rp> 動 <rp>(</rp> <rt>どう</rt> <rp>)</rp> 車 <rp>(</rp> <rt>しゃ</rt> <rp>)</rp> </ruby> <rt>jidōsha</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> に <rt>ni</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <span style="display: inline-flex;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り </ruby> <ruby lang="ja"> 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> </span> <rt>norikomu</rt> </ruby> </div> </div> </blockquote> <p>Well, it seems that annotations do not really understand italics; they look a tiny bit off, don’t they? It would be nice to be able to nudge them a bit to the right on an individual character basis.</p> <p>Luckily, this is a simple matter of just adding in some <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-align"><code class="language-plaintext highlighter-rouge">text-align</code></a> styling in the <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> tags:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;blockquote&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"..."</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"..."</span><span class="nt">&gt;</span>
      <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
        自
        <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
        <span class="nt">&lt;rt</span> <span class="na">style=</span><span class="s">"text-align: right;"</span><span class="nt">&gt;</span>じ<span class="nt">&lt;/rt&gt;</span>
        <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>
      <span class="nt">&lt;/ruby&gt;</span>
      <span class="nt">&lt;rt&gt;</span>jidōsha<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="c">&lt;!-- ... --&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/blockquote&gt;</span>
</code></pre></div></div> <blockquote> <div class="japanese-hero"> <div style="align-items: baseline; display: inline-flex;"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> <span> 自 </span> <rp>(</rp> <rt style="text-align: right;">じ</rt> <rp>)</rp> <span> 動 </span> <rp>(</rp> <rt style="text-align: right;">どう</rt> <rp>)</rp> <span> 車 </span> <rp>(</rp> <rt style="text-align: right;">しゃ</rt> <rp>)</rp> </ruby> <rt>jidōsha</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> に <rt>ni</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <span style="display: inline-flex;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt style="text-align: right;">の</rt> <rp>)</rp> り </ruby> <ruby lang="ja"> 込 <rp>(</rp> <rt style="text-align: right;">こ</rt> <rp>)</rp> む </ruby> </span> <rt>norikomu</rt> </ruby> </div> </div> </blockquote> <p>This looks a tiny bit better, though it seems to be more effective for single character <em>furigana</em> than those for compound characters. Pushing the <em>furigana</em> any further to the right would involve adding some <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left"><code class="language-plaintext highlighter-rouge">padding-left</code></a> attributes to the <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> tag (which could push the <em>kanji</em> into places you may not want), so feel free to experiment on getting the alignment just right for your tastes.</p> <p>Finally, let’s just confirm the markup works for some exceptional circumstances.</p> <h2 id="long-and-short-furigana">Long and Short <em>Furigana</em></h2> <p>There are some words in Japanese where up to five syllables can be represented by a single <em>kanji</em>. Let’s use the markup with <em>uketamawaru</em> a word that fits these conditions, and means “to be told” or “to receive (an order)”:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    承
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>うけたまわ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    る
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>uketamawaru<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 承 <rp>(</rp> <rt>うけたまわ</rt> <rp>)</rp> る </ruby> <rt>uketamawaru</rt> </ruby> </div> <p>I think this display is <em>okay</em>, given the awkwardness of the <em>furigana</em> to <em>kanji</em> ratio. But, that gap between 承 and る just seems too big to me, and makes me wonder whether allowing for more flexibility in the size of the <em>furigana</em> annotation would make it less unwieldy.</p> <p>Let’s see what happens if we give the <em>furigana</em> a smaller absolute CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size"><code class="language-plaintext highlighter-rouge">font-size</code></a> value:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    承
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt</span> <span class="na">style=</span><span class="s">"font-size: small;"</span><span class="nt">&gt;</span>うけたまわ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    る
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>uketamawaru<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 承 <rp>(</rp> <rt style="font-size: small;">うけたまわ</rt> <rp>)</rp> る </ruby> <rt>uketamawaru</rt> </ruby> </div> <p>Much better, I think, and it can be adjusted to preference on a per-character basis.</p> <p>Now, what about the opposite scenario, when there are more <em>kanji</em> than <em>furigana</em> characters? This will only really happen with so-called <a href="https://en.wikipedia.org/wiki/Kanji#Special_readings">Special Readings</a>, which occur frequently with geographical or human names. So, let’s try the markup with a good example of this, the surname <em>Hozumi</em>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    八月一日
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>ほずみ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>Hozumi<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 八月一日 <rp>(</rp> <rt>ほずみ</rt> <rp>)</rp> </ruby> <rt>Hozumi</rt> </ruby> </div> <p>I think this display of ほずみ<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup> looks fine. The spacing of the <em>furigana</em> may look a bit strange, but since there is no correlation between the annotation and the pronunciation of each individual <em>kanji</em>, having them spread out evenly across the top of the word, or center-aligned, is probably the most logical way to display them.</p> <h2 id="markup-reuse">Markup Reuse</h2> <p>As you can see from the chunky markup blocks above, annotations can take up a lot of coding space. Personally, I do not want to have to manually write <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags every time I want to insert a Japanese word with any kind of annotation into my blog posts, so I wanted a way to reuse that markup.</p> <p><a href="https://jekyllrb.com/">Jekyll</a> is the engine that currently powers this blog, and it allows the usage of <a href="https://shopify.github.io/liquid/">Liquid</a>, a templating language, which has enabled me to put <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> code into functions that take parameters to fine-tune how annotations should display. These functions are littered throughout the <a href="https://raw.githubusercontent.com/paulfioravanti/paulfioravanti.github.io/release/_posts/2022-06-25-flexbox-furigana.md">code for this blog post</a>, as well as other Japanese language-related posts, and fall into two main groups.</p> <h3 id="basic-ruby-tags">Basic Ruby Tags</h3> <p>These are functions that wrap around <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags for purposes of general annotation, and are not specific to Japanese (though they can certainly be used that way). Some examples used in this blog post that you may have noticed are:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>ruby.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"phonetically"</span><span class="w"> </span><span class="na">annotation</span><span class="o">=</span><span class="s2">"fuh·neh·ti·kuh·lee"</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>ruby.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"pronunciation"</span><span class="w"> </span><span class="na">annotation</span><span class="o">=</span><span class="s2">"/pɹəˌnʌn.siˈeɪ.ʃən/"</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>ruby.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"車"</span><span class="w"> </span><span class="na">annotation</span><span class="o">=</span><span class="s2">"くるま"</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <h3 id="ruby-tags-for-japanese">Ruby Tags for Japanese</h3> <p>There are also functions that take in parameters which allow all the fine-tuning customisations to <em>furigana</em> and <em>romaji</em> we have seen in the examples above, and are hence specific for use with Japanese. Under the hood, they all leverage the <code class="language-plaintext highlighter-rouge">{% include ruby.html %}</code> function. Some examples used in this post are:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>japanese.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"自,動,車"</span><span class="w">
                         </span><span class="na">furigana</span><span class="o">=</span><span class="s2">"じ,どう,しゃ"</span><span class="w">
                         </span><span class="na">romaji</span><span class="o">=</span><span class="s2">"jidōsha"</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>japanese.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"に"</span><span class="w"> </span><span class="na">romaji</span><span class="o">=</span><span class="s2">"ni"</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>japanese.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"乗り,込む"</span><span class="w">
                         </span><span class="na">furigana</span><span class="o">=</span><span class="s2">"の,こ"</span><span class="w">
                         </span><span class="na">romaji</span><span class="o">=</span><span class="s2">"norikomu"</span><span class="w">
                         </span><span class="na">furigana-align</span><span class="o">=</span><span class="s2">"left"</span><span class="w">
                         </span><span class="na">furigana-left-padding</span><span class="o">=</span><span class="s2">"5px,7px"</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>Going through the details of these functions is something I will leave up to the interested reader<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup>. You can find all the code in the <a href="https://github.com/paulfioravanti/paulfioravanti.github.io/tree/release/_includes"><code class="language-plaintext highlighter-rouge">_includes/</code> directory</a> of this blog’s codebase.</p> <h2 id="much-ado-about-annotations">Much Ado About Annotations</h2> <p>For such small text, the coding, display, debugging, and <a href="https://en.wikipedia.org/wiki/Code_refactoring">refactoring</a> of <em>furigana</em> has taken up a significant amount of my time and brain space. However, I still do not <em>really</em> know if I am doing it “right”.</p> <p>The developers over at the <a href="https://japanese.stackexchange.com/">Japanese Language Stack Exchange</a>, whom I assume are experts at all things Japanese for the web, would seem to eschew <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> tags for <code class="language-plaintext highlighter-rouge">&lt;span&gt;</code> tags in order to represent <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;rb&gt;</code> values for their cool <em>furigana</em> pop-ups:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">title=</span><span class="s">""</span> <span class="na">class=</span><span class="s">"ruby-rp popups"</span> <span class="na">style=</span><span class="s">"..."</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"rb"</span><span class="nt">&gt;</span>終幕<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"rt"</span> <span class="na">style=</span><span class="s">"..."</span><span class="nt">&gt;</span>さいご<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <p>However, <a href="https://www3.nhk.or.jp/news/easy/">NHK Easy News</a> <em>does</em> use <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> tags in the same way as the examples in this post. However, they, too, have opted to not use <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tags (perhaps they considered them to be legacy/unnecessary…?).</p> <p><a href="https://news.yahoo.co.jp/">Yahoo News Japan</a> does not support <em>furigana</em> annotations at all, preferring instead to display <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code>-style parenthesised <em>kanji</em> readings inline (perhaps because they are a bit <a href="https://en.wikipedia.org/wiki/Web_2.0#Web_1.0">Web 1.0</a>-in-the-tooth, and still want to support browsing on <ruby lang="ja"><a href="https://en.wikipedia.org/wiki/Gal%C3%A1pagos_syndrome#Mobile_phones">Galápagos phones</a><rp>(</rp><rt style="text-align: center">ガラケー</rt><rp>)</rp></ruby>, which display pages using <a href="https://en.wikipedia.org/wiki/I-mode">cHTML</a>, a subset of HTML that <a href="https://www.docomo.ne.jp/service/developer/make/content/browser/html/tag/">does not support <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags</a>).</p> <p>Regardless, this post represents everything I think I know about <em>furigana</em> for the web, and now you know it, too. If new information comes up, or the specification for use of <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code>-related tags changes, I am definitely happy to revise any content. If there is something I have missed, please reach out and let me know!</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>All Japanese character displays were confirmed to work as expected on <a href="https://www.google.com/chrome/">Google Chrome</a>. So, if you use another browser, and explanations do not quite match the display, that would be why. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p><em>Hiragana</em> is generally used for <em>furigana</em>, but you can also see <em><a href="https://en.wikipedia.org/wiki/Katakana">katakana</a></em> used to annotate some <a href="https://en.wikipedia.org/wiki/Furigana#Names">surnames and place names</a>, as well as convey <a href="https://en.wikipedia.org/wiki/Furigana#Punning_and_double_meaning">double meanings and linguistic puns</a>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3" role="doc-endnote"> <p>Placed above when the <em>kanji</em> is written left-to-right horizontally (<em><a href="https://en.wikipedia.org/wiki/Horizontal_and_vertical_writing_in_East_Asian_scripts#Japanese">yokogaki</a></em>), but placed to the right when written right-to-left vertically (<em><a href="https://en.wikipedia.org/wiki/Horizontal_and_vertical_writing_in_East_Asian_scripts#Japanese">tategaki</a></em>). <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4" role="doc-endnote"> <p>Or, you could use a browser extension like <a href="https://addons.thunderbird.net/en-us/firefox/addon/rikaichan/">Rikaichan</a> or <a href="https://chrome.google.com/webstore/detail/rikaikun/jipdnfibhldikgcjhfnomkfpcebammhp?hl=en">Rikaikun</a>, which display pop-up kanji readings and English translations when you mouse over them, making any lack of annotations irrelevant. For purposes of this post, we’ll pretend they do not exist (I still absolutely recommend using them, though!). <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:5" role="doc-endnote"> <p>The name of which is from an old British typography type that had a height of 5.5 <a href="https://en.wikipedia.org/wiki/Point_(typography)">points</a>, and not to be confused with anything related to the <a href="https://www.ruby-lang.org/en/">Ruby</a> programming language. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:6" role="doc-endnote"> <p>As well as <ruby lang="ja" class="japanese"> ほずみ <rt class="romaji" style="font-size: 50%"> Hozumi</rt> </ruby>, 八月一日 can be read as <ruby lang="ja" class="japanese"> ほづみ <rt class="romaji" style="font-size: 50%"> Hozumi</rt> </ruby>, <ruby lang="ja" class="japanese"> やぶみ <rt class="romaji" style="font-size: 50%"> Yabumi</rt> </ruby>, and <ruby lang="ja" class="japanese"> はっさく <rt class="romaji" style="font-size: 50%"> Hassaku</rt> </ruby>. <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:7" role="doc-endnote"> <p>It was tough to keep my own interest up with Liquid since I found using it so frustrating, even after changing my mindset to thinking of it as <a href="https://ideawrights.com/shopify-associative-arrays/">“smart HTML rather than dumb Ruby”</a>. Nevertheless, I got what I wanted in the end after significant trial and error; hopefully, you can save yourself some time and irritation by using the code if you have similar use cases. <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="japan"/><category term="japanese"/><category term="日本語"/><category term="振り仮名"/><category term="ふりがな"/><category term="annotation"/><category term="blog"/><category term="jekyll"/><category term="meta"/><summary type="html"><![CDATA[Styling _kanji_ readings is a big subject for such small text.]]></summary></entry><entry><title type="html">AppleScript Records: Strings as Keys</title><link href="https://www.paulfioravanti.com/blog/applescript-records-string-keys/" rel="alternate" type="text/html" title="AppleScript Records: Strings as Keys"/><published>2022-06-10T14:30:00+10:00</published><updated>2022-06-14T10:15:00+10:00</updated><id>https://www.paulfioravanti.com/blog/applescript-records-string-keys</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/applescript-records-string-keys/"><![CDATA[<p>I am a <a href="https://en.wikipedia.org/wiki/MacOS">macOS</a> user, and my attempts at creating programs to control my computer have necessitated working with <a href="https://en.wikipedia.org/wiki/AppleScript">AppleScript</a>. Like every programming language, it has its idiosyncrasies, but one in particular sent me down a <a href="https://en.wiktionary.org/wiki/rabbit_hole">rabbit hole</a>, which I hope this post can help you avoid should you find yourself in similar circumstances.</p> <p>Many programming languages have a built-in <a href="https://en.wikipedia.org/wiki/Key%E2%80%93value_database">key-value</a> data structure, which are known by different names: <a href="https://ruby-doc.org/core/Hash.html">hashes</a>, <a href="https://hexdocs.pm/elixir/Map.html">maps</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">objects</a>, <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a> etc. The AppleScript structure equivalent is called a <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_classes.html#//apple_ref/doc/uid/TP40000983-CH1g-BBCDGEAH">record</a>, and they look outwardly similar to those of other languages:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nv">product</span><span class="p">:</span><span class="s2">"pen"</span><span class="p">,</span><span class="w"> </span><span class="nv">price</span><span class="p">:</span><span class="mf">2.34</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>However, a big difference is that while many other languages will allow you to use any kind of data type as a key (<a href="https://en.wikipedia.org/wiki/String_(computer_science)">strings</a>, <a href="https://en.wikipedia.org/wiki/Integer">integers</a> etc), record keys can only be <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_fundamentals.html#//apple_ref/doc/uid/TP40000983-CH218-SW5">Properties</a>, which are <a href="http://books.gigatux.nl/mirror/applescriptdefinitiveguide/applescpttdg2-CHP-13-SECT-11.html">“effectively tokens created by AppleScript at compile time”</a>, and essentially act like <a href="https://en.wikipedia.org/wiki/Constant_(computer_programming)">constants</a> (which also means there’s no chance to, say, “<a href="https://api.rubyonrails.org/classes/String.html#method-i-constantize">constantize</a>” a string received at run time). Therefore, this kind of record is not legal:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="s2">"product"</span><span class="p">:</span><span class="s2">"pen"</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">:</span><span class="mf">2.34</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>The result of this is that a script must always know in advance what keys it plans to use to look up values in a record: no lookup is possible using, say, some variable that references a string.</p> <p>This is unfortunate, because I wanted to perform dynamic lookups on a record by fetching values from it based on some string I would receive from the result of a <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH">handler</a> (function) call. Here is a code snippet indicating what I <em>attempted</em> to write in order to perform a “zoom in”, which would send different shortcut keystrokes depending on what application was currently in focus:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Chrome Zoom In keyboard shortcut is ⌘+, while Postman is ⌘=</span><span class="w">
</span><span class="c1"># NOTE: This record will raise a syntax error.</span><span class="w">
</span><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="s2">"Google Chrome"</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Postman"</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">
</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="c1"># returns a string like "Google Chrome" for the application currently in focus</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="c1"># Fetch the appropriate "zoom in" value from the record based on the `activeApp` key</span><span class="w">
</span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w">

</span><span class="c1"># Perform the keyboard shortcut</span><span class="w">
</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span></code></pre></div></div> <p>I initially thought that perhaps the reason for the error was because the record key properties follow the rules of <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_lexical_conventions.html#//apple_ref/doc/uid/TP40000983-CH214-SW4">Identifiers</a>, which have a limited set of characters they are allowed to use (that do not include spaces). But…</p> <blockquote> <p>“AppleScript provides a loophole […]: identifiers whose first and last characters are vertical bars (|) can contain any characters”.</p> </blockquote> <p>So, I figured that changing the record definition to:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">|</span><span class="nv">Google</span><span class="w"> </span><span class="nv">Chrome</span><span class="err">|</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="err">|</span><span class="nv">Postman</span><span class="err">|</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>or</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">|</span><span class="s2">"Google Chrome"</span><span class="err">|</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="err">|</span><span class="s2">"Postman"</span><span class="err">|</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>would work. Alas, they did not. The workaround for getting this code running correctly was to fall back to a traditional <code class="language-plaintext highlighter-rouge">if</code> statement:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">

</span><span class="k">if</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="s2">"Google Chrome"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="s2">"+"</span><span class="w">
</span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="s2">"Postman"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="s2">"="</span><span class="w">
</span><span class="k">else</span><span class="w">
  </span><span class="nb">display</span><span class="w"> </span><span class="nv">notification</span><span class="w"> </span><span class="s2">"Cannot zoom in"</span><span class="w"> </span><span class="nv">with</span><span class="w"> </span><span class="na">title</span><span class="w"> </span><span class="s2">"Error"</span><span class="w">
  </span><span class="nb">return</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">if</span><span class="w">

</span><span class="c1"># Perform the keyboard shortcut</span><span class="w">
</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span></code></pre></div></div> <p>At this point, the sane thing to do is to accept that you now have working code that is fit for purpose, and move on.</p> <p>But, I could not shake the feeling that there <em>must</em> be a way for string keys to work, even though hours of internet searching turned up nothing. How could every other programming language I know of do this, but not AppleScript? It did not make sense to me.</p> <p>So, I asked the <a href="https://twitter.com">bird site</a> in a <a href="https://twitter.com/paulfioravanti/status/1517743540784168960?s=20&amp;t=ai1eJAVRQpkoQ2bwoL8W0Q">last ditch attempt</a>, and it delivered in the form of <a href="http://piyocast.com/as/">Takaaki Naganoya</a>, whose efforts in creating a <a href="https://twitter.com/Piyomaru/status/1517769013488918528">solution</a> using the <a href="https://developer.apple.com/documentation/foundation">Foundation</a> framework led me to be able to change the original code to:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">use</span><span class="w"> </span><span class="nb">AppleScript</span><span class="w"> </span><span class="nb">version</span><span class="w"> </span><span class="s2">"2.4"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">framework</span><span class="w"> </span><span class="s2">"Foundation"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">scripting</span><span class="w"> </span><span class="nv">additions</span><span class="w">

</span><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">|</span><span class="nv">Google</span><span class="w"> </span><span class="nv">Chrome</span><span class="err">|</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="err">|</span><span class="nv">Postman</span><span class="err">|</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">

</span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKeysDict</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="se">¬
</span><span class="w">    </span><span class="nb">current application</span>'s <span class="nv">NSDictionary</span>'s <span class="nv">dictionaryWithDictionary</span><span class="p">:</span><span class="nv">zoomInKeys</span><span class="w">

</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">

</span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="p">(</span><span class="nv">zoomInKeysDict</span>'s <span class="nv">valueForKey</span><span class="p">:</span><span class="nv">activeApp</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nv">anything</span><span class="w">

</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span></code></pre></div></div> <p>Now, this code <em>works</em>. But, the <a href="https://en.wiktionary.org/wiki/shotgun_approach">shotgun approach</a> of bringing in a whole framework and other random handlers just to solve this small problem, coupled with the awkward readability of some of the <a href="https://en.wikipedia.org/wiki/API">API</a>s (looking at you, <code class="language-plaintext highlighter-rouge">dictionaryWithDictionary</code>), means that I think the code is now more difficult to understand, for very negligible benefit. So, <code class="language-plaintext highlighter-rouge">if</code> statements it is.</p> <p>If I wanted to dive even further down the rabbit hole, I could have attempted adapting Takaaki’s <a href="https://twitter.com/Piyomaru/status/1517770289597513730">other solution</a> to the same problem, which was done in vanilla AppleScript, without using Foundation. But, at this point, I think I’m good.</p> <p>If you are interested in seeing how I ended up using AppleScript for my own use case of mapping <a href="https://en.wikipedia.org/wiki/Stenotype">stenography</a> chords to macOS keyboard shortcuts, check out my <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/src/command">steno dictionaries GitHub repository</a>.</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="hash"/><category term="dictionary"/><category term="apple"/><category term="scripting"/><summary type="html"><![CDATA[Not as straightforward as you may think.]]></summary></entry></feed>