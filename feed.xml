<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://www.paulfioravanti.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://www.paulfioravanti.com/" rel="alternate" type="text/html"/><updated>2021-11-22T16:58:37+11:00</updated><id>https://www.paulfioravanti.com/feed.xml</id><title type="html">Floor and Varnish</title><subtitle>The permanent drafts folder for brain dumps of Paul Fioravanti</subtitle><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><entry><title type="html">Mum’s Meetup</title><link href="https://www.paulfioravanti.com/blog/mums-meetup/" rel="alternate" type="text/html" title="Mum’s Meetup"/><published>2021-11-17T13:05:00+11:00</published><updated>2021-11-17T13:05:00+11:00</updated><id>https://www.paulfioravanti.com/blog/mums-meetup</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/mums-meetup/">&lt;p&gt;When you run a meetup, one of the more difficult things to gauge can be whether you’re actually doing it right.&lt;/p&gt; &lt;p&gt;Feedback can be elusive, so it can be hard to know if this event that you put on has some value for, or is meaningful to, the people that come along.&lt;/p&gt; &lt;p&gt;One day, though, I did get some feedback about a meetup from the most unlikely of places, and it helped reframe my views on the importance of community and human connection.&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;I have written posts encouraging participation in meetups before (&lt;em&gt;&lt;a href=&quot;https://www.paulfioravanti.com/blog/speak-at-meetups/&quot;&gt;Speak at a Meetup&lt;/a&gt;&lt;/em&gt;, and &lt;em&gt;&lt;a href=&quot;https://www.paulfioravanti.com/blog/organise-meetups/&quot;&gt;Organise a Meetup&lt;/a&gt;&lt;/em&gt;), but of all my attempts at evangelising this, I think I am most proud of having gotten one particular person into the meetup game:&lt;/p&gt; &lt;p&gt;My mother.&lt;/p&gt; &lt;p&gt;When Mum retired after a long career in education, I worried about how she would fill her days.&lt;/p&gt; &lt;p&gt;Work constituted an important part of her life, and kept her constantly busy. With her children occupied with their own lives, no other family, few close friends who were, themselves, still working, and no specific hobbies that involved socialising, what would she do with herself?&lt;/p&gt; &lt;p&gt;I was organising the &lt;a href=&quot;https://www.meetup.com/en-AU/Ruby-On-Rails-Oceania-Sydney&quot;&gt;Ruby on Rails Oceania Sydney&lt;/a&gt; meetup at the time, and suggested that she try finding some communities that interested her, and go along to their events.&lt;/p&gt; &lt;p&gt;Making new friends is harder as you get older, so she was hesitant at first. But, after talking up the benefits that I got from meetup participation after moving to a new city where I knew no one, she took the plunge.&lt;/p&gt; &lt;p&gt;It was an over-50s social meetup, and on her first timid steps into the event space, the organiser rushed over, welcomed her with a big smile, and introduced her to some of the other members of the group.&lt;/p&gt; &lt;p&gt;First impressions from the initial meetup were so good that Mum started regularly attending almost immediately. All the new people she met at the meetup, the places they went to, and the activities they did together, became a staple feature of our conversations.&lt;/p&gt; &lt;p&gt;Frequent participation at the meetup events led Mum to become well-known and trusted. It was not long before she was invited into the leadership team, started running specific events for members, and eventually took on more responsibility as one of the main meetup organisers.&lt;/p&gt; &lt;p&gt;And when Mum runs a meetup, much like when she ran a single-parent household, you will find no &lt;a href=&quot;https://www.merriam-webster.com/dictionary/half%20measure&quot;&gt;half measures&lt;/a&gt;: multiple social events every week, from pub gatherings to cultural excursions to dinner parties.&lt;/p&gt; &lt;p&gt;Between running her own events, helping others run theirs, scouting new venues for future potential meetups, handling new memberships (including dealing with financials), general &lt;a href=&quot;https://en.wiktionary.org/wiki/herd_cats&quot;&gt;cat herding&lt;/a&gt;, and managing the drama found in large social groups of people with various personalities and temperaments, there is no doubt I would define it as a full-time job.&lt;/p&gt; &lt;p&gt;Mum and I essentially became peers in this meetup space, though the amount of effort involved in her meetups leaves my own credentials as a so-called “organiser” of some &lt;a href=&quot;https://www.merriam-webster.com/dictionary/dinky&quot;&gt;dinky&lt;/a&gt; technical meetups once a month in the dust!&lt;/p&gt; &lt;p&gt;I am glad to have been shown up, though, as Mum’s passion and enthusiasm for meetup organisation and bringing people together led to her to become a happier, and even more outgoing, person.&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;We held Mum’s wake in the same pub we celebrated her 60th birthday some years earlier.&lt;/p&gt; &lt;p&gt;More than a hundred people crammed into the room we had reserved to farewell Mum&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, and I delivered a tearful eulogy to a group of unfamiliar faces.&lt;/p&gt; &lt;p&gt;But, they all knew Mum from the meetup.&lt;/p&gt; &lt;p&gt;Over the course of the afternoon, I got to meet many of them, and receive their memories of Mum, each recount a small gift to my mourning soul.&lt;/p&gt; &lt;p&gt;One, though, in particular, stood out:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;“Your Mum saved my life.”&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;I smiled politely, but as if to immediately quash any potential thoughts of hyperbole, they continued on that no, really, they were mentally in a very dark place when they first went on a whim to one of Mum’s meetups.&lt;/p&gt; &lt;p&gt;But, Mum took care of them immediately, got them talking to others, which led to conversations that grew into friendships.&lt;/p&gt; &lt;p&gt;And that’s what kept them going, enabling them to be there, at the wake, on that day.&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;So, I got to take that feedback, on behalf of Mum, and attempt to apply it to my own meetups. Getting together to nerd out over programming languages seems unlikely to save a life in my mind, but, ultimately, who’s to say?&lt;/p&gt; &lt;p&gt;You may not know, nor ever know, the impact on others of whatever you put out in the world. I think as long as the effort is worth the intrinsic value you get from it, it’s okay to just keep on doing it.&lt;/p&gt; &lt;p&gt;In times of plague, it has admittedly been tough to keep up a feeling of community when we are all apart, and the interface to meetups is the same as every work meeting you have been forced to attend on &lt;a href=&quot;https://zoom.us/&quot;&gt;Zoom&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;But, I hope that having persevered with them, even in a remote format, is considered better than not, and that once we reach whatever ends up passing for normality, real human connection (and maybe even shared :pizza:?) can come back to meetups.&lt;/p&gt; &lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt; &lt;ol&gt; &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt; &lt;p&gt;Early 2019, pre-normalisation of social distancing &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt;</content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="meetups"/><summary type="html">Organising a meetup gave my Mum a new lease on life.</summary></entry><entry><title type="html">A Person’s Character (人という字は)</title><link href="https://www.paulfioravanti.com/blog/persons-character/" rel="alternate" type="text/html" title="A Person’s Character (人という字は)"/><published>2021-10-17T16:14:00+11:00</published><updated>2021-10-17T20:40:00+11:00</updated><id>https://www.paulfioravanti.com/blog/persons-character</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/persons-character/">&lt;p&gt;The father of the bride was making his wedding toast. He recounted how his daughter had left Japan alone to embark on an adventure to Australia, where she met the man she would eventually marry.&lt;/p&gt; &lt;p&gt;I stood beside the father, translating his speech to English for the benefit of the Australian locals in attendance. I am not a professional interpreter by any means, but I thought I was doing pretty well.&lt;/p&gt; &lt;p&gt;The speech continued, with the father suggesting that since the bridegroom was also a Japanese far from home, the couple could leverage their shared experiences, and support each other as they move forward and grow in their new life together.&lt;/p&gt; &lt;p&gt;The father then did something that completely threw me off guard.&lt;/p&gt; &lt;p&gt;He raised his two hands up to form a representation of “&lt;a href=&quot;https://en.wiktionary.org/wiki/%E4%BA%BA&quot;&gt;人&lt;/a&gt;”, the &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Kanji&quot;&gt;kanji&lt;/a&gt;&lt;/em&gt; character for “person”, kind of like this:&lt;/p&gt; &lt;div class=&quot;centered-image&quot;&gt; &lt;figure&gt; &lt;img src=&quot;/assets/images/2021-10-17/person-hands.jpg&quot; alt=&quot;Hands in the shape of the Japanese character for person&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;He then said:&lt;/p&gt; &lt;blockquote style=&quot;font-size: xx-large;&quot;&gt; &lt;p&gt;&lt;ruby&gt;人&lt;rt&gt;ひと&lt;/rt&gt;&lt;/ruby&gt;の&lt;ruby&gt;漢字&lt;rt&gt;かんじ&lt;/rt&gt;&lt;/ruby&gt;はこうだからね。&lt;br /&gt; (&lt;em&gt;Hito no kanji wa kou dakara ne&lt;/em&gt;)&lt;br /&gt; &lt;strong&gt;The &lt;em&gt;kanji&lt;/em&gt; for “person” looks like this.&lt;/strong&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;The Japanese in the audience smiled knowingly and laughed politely.&lt;/p&gt; &lt;p&gt;I stopped and looked at the father, waiting for some further information that could help me contextualise what seemed like a complete &lt;a href=&quot;https://www.merriam-webster.com/dictionary/non%20sequitur&quot;&gt;non sequitur&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;He looked back at me, hands still raised, waiting for his cue to continue after my interpretation.&lt;/p&gt; &lt;p&gt;With no further assistance, nor any real idea of how to proceed through this awkward pause, I felt I had no other choice but to also raise my hands into a “人” shape, and just translate what had been said literally:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;“The &lt;em&gt;kanji&lt;/em&gt; for person looks like this…¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯”&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;With a sympathetic shrug of the shoulders to the audience, who were clearly as confused as I was, we continued on. Translation of the rest of the speech went fine, but this “人” issue really stuck with me.&lt;/p&gt; &lt;p&gt;What did I miss that was so intuitively obvious to the Japanese in attendance, but left me completely blindsided?&lt;/p&gt; &lt;h2 id=&quot;kinpachi-sensei&quot;&gt;Kinpachi-sensei&lt;/h2&gt; &lt;p&gt;The answer lies with &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Kinpachi-sensei&quot;&gt;Kinpachi-sensei&lt;/a&gt;&lt;/em&gt; (&lt;a href=&quot;https://ja.wikipedia.org/wiki/3%E5%B9%B4B%E7%B5%84%E9%87%91%E5%85%AB%E5%85%88%E7%94%9F&quot;&gt;3&lt;ruby&gt;年&lt;rt&gt;ねん&lt;/rt&gt;&lt;/ruby&gt;B&lt;ruby&gt;組金八先生&lt;rt&gt;ぐみきんぱちせんせい&lt;/rt&gt;&lt;/ruby&gt;&lt;/a&gt;, &lt;em&gt;San-nen B-gumi Kinpachi-sensei&lt;/em&gt;), a long-running Japanese television drama that portrays a variety of social issues faced by junior high school students.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tetsuya_Takeda&quot;&gt;Tetsuya Takeda&lt;/a&gt; (&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E6%AD%A6%E7%94%B0%E9%89%84%E7%9F%A2&quot;&gt;&lt;ruby&gt;武田&lt;rt&gt;たけだ&lt;/rt&gt;&lt;/ruby&gt;&lt;ruby&gt;鉄矢&lt;rt&gt;てつや&lt;/rt&gt;&lt;/ruby&gt;&lt;/a&gt;) plays the titular role of school teacher Kinpachi Sakamoto, who sometimes illustrates points of morality to his students by deconstructing parts of &lt;em&gt;kanji&lt;/em&gt; characters to reveal their deeper hidden meanings.&lt;/p&gt; &lt;p&gt;During a scene in &lt;em&gt;Kinpachi-sensei&lt;/em&gt;’s &lt;a href=&quot;https://www.tbs.co.jp/tbs-ch/item/d1111/&quot;&gt;4th special episode&lt;/a&gt;, aired in 1985, Kinpachi writes “人” on the classroom blackboard, and says to his students:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;ruby&gt;君&lt;rt&gt;きみ&lt;/rt&gt;&lt;/ruby&gt;たちいいですか〜。 &lt;ruby&gt;人&lt;rt&gt;ひと&lt;/rt&gt;&lt;/ruby&gt;という&lt;ruby&gt;字&lt;rt&gt;じ&lt;/rt&gt; &lt;/ruby&gt;はねぇ、ひとりの「人」がもうひとりの「人」を&lt;ruby&gt;支&lt;rt&gt;ささ&lt;/rt&gt; &lt;/ruby&gt;えている字です。つまり、人と人が&lt;ruby&gt;支&lt;rt&gt;ささ&lt;/rt&gt; &lt;/ruby&gt;え&lt;ruby&gt;合&lt;rt&gt;あ&lt;/rt&gt; &lt;/ruby&gt;ってるから人なんです。人は人によって支えられ、人の&lt;ruby&gt;間&lt;rt&gt;あいだ &lt;/rt&gt;&lt;/ruby&gt;で&lt;ruby&gt;人間&lt;rt&gt;にんげん&lt;/rt&gt;&lt;/ruby&gt;として&lt;ruby&gt;磨&lt;rt&gt;みが&lt;/rt&gt; &lt;/ruby&gt;かれていくんです。&lt;br /&gt;&lt;/p&gt; &lt;p&gt;Can I have your attention, please. So, the character for “person” consists of one person holding up and sustaining another person. In other words, it is a “person” precisely &lt;em&gt;because&lt;/em&gt; a person and another person are supporting each other. A person gets support from other people and their community, and through that support, grows and develops as a human.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;So, our expectations about the composition of this character are flipped on learning this new information: “人” is not a single character or “person”, but rather one person, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt;, leaning into another person, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt;, to form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;人&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For English speakers, the sentiment above perhaps has recognisable echoes of the African proverb &lt;a href=&quot;https://en.wikipedia.org/wiki/It_takes_a_village&quot;&gt;“It takes a village to raise a child”&lt;/a&gt;. But for Japanese, it resonated within the context of marriage, where two people “become one”.&lt;/p&gt; &lt;p&gt;For the father of the bride, his daughter and new son-in-law would be leaning on each other for support as they begin their life together, not as two individuals, but as one family unit.&lt;/p&gt; &lt;p&gt;Hence, “人” represented the new form their relationship had evolved into.&lt;/p&gt; &lt;h2 id=&quot;the-power-of-人&quot;&gt;The Power of 人&lt;/h2&gt; &lt;p&gt;The kicker to this romantic notion? It was &lt;a href=&quot;https://news.yahoo.co.jp/articles/709a167033b56d303ec2f93ce5609892e7309d62&quot;&gt;a complete lie&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Takeda confirmed as much in an appearance he made in 2021 on The Wide Show (&lt;a href=&quot;https://www.fujitv.co.jp/widna-show/&quot;&gt;ワイドナショー&lt;/a&gt;), a Japanese news and entertainment television program.&lt;/p&gt; &lt;p&gt;But, the meme has had decades to burrow into the collective consciousness of a generation, and regardless of the generally accepted &lt;a href=&quot;https://en.wiktionary.org/wiki/%E4%BA%BA/derived_terms#Glyph_origin&quot;&gt;glyph origin of 人&lt;/a&gt; to be a “side view of a standing man, highlighting the arms and legs” (known before Takeda made his admission, of course), I would wager we will see “人” appear again at future weddings.&lt;/p&gt; &lt;p&gt;If I had my time again at that speech, knowing what I know now, I think I would offer up the following translation for “the &lt;em&gt;kanji&lt;/em&gt; for ‘person’ looks like this”:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;strong&gt;[Hold both hands apart in a straight “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt;” formation]&lt;/strong&gt;: “The bride and groom, once two individuals…“&lt;br /&gt; &lt;strong&gt;[Bring hands together to form “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;人&lt;/code&gt;”]&lt;/strong&gt;: “…have come together to become a single family unit, leaning on each other for support as they begin their new life together, forming this, the Japanese character for ‘person’.”&lt;br /&gt; &lt;strong&gt;[Push hands slightly forward]&lt;/strong&gt;: “These two have become one”.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;It’s certainly not a literal translation, nor an academic one, nor one that directly infers how the character of “人” is derived. Rather, it’s just a short bit of fanciful flourish that I think conveys enough meaning for the time given without having to impart all the details given in this blog post.&lt;/p&gt; &lt;p&gt;So, if you ever somehow find yourself in a similar wedding-speech-interpreting situation, feel free to use or riff on my translation, and hopefully that will at least reduce your number of potential awkward pauses by one.&lt;/p&gt;</content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="japanese"/><category term="日本語"/><summary type="html">&quot;人&quot; may be the _kanji_ for person, but its simplicity masks a deeper meaning.</summary></entry><entry><title type="html">Pipe a Codebase into Ruby</title><link href="https://www.paulfioravanti.com/blog/pipe-codebase-into-ruby/" rel="alternate" type="text/html" title="Pipe a Codebase into Ruby"/><published>2021-10-10T20:50:00+11:00</published><updated>2021-10-10T20:50:00+11:00</updated><id>https://www.paulfioravanti.com/blog/pipe-codebase-into-ruby</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/pipe-codebase-into-ruby/">&lt;p&gt;&lt;a href=&quot;https://twitter.com/alistairtweed&quot;&gt;Alistair Tweed&lt;/a&gt; asked an interesting question on the &lt;a href=&quot;https://ruby.org.au/&quot;&gt;Ruby Australia&lt;/a&gt; &lt;a href=&quot;https://ruby-au-join.herokuapp.com/&quot;&gt;Slack&lt;/a&gt;, which I thought deserved a more permanent home over being banished to &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;’s archives:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Can anyone help me with getting user input when piping code to Ruby?&lt;br /&gt; The command I’m using is:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hello | ruby &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt; file contains the following code:&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;World&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;p&gt;When using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt;, the output is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello, World!&lt;/code&gt;&lt;br /&gt; When using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDIN.read&lt;/code&gt;, the output is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello, !&lt;/code&gt;&lt;br /&gt; The problem is that the script doesn’t stop to allow the user to type in a value. Any ideas?&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;I do not think I had previously considered running a &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; program in this way, but regardless of whether I ever would or not, I was curious about how this question could be answered.&lt;/p&gt; &lt;p&gt;All the examples below will be for the &lt;a href=&quot;https://www.gnu.org/software/bash/&quot;&gt;Bash&lt;/a&gt; shell unless specified.&lt;/p&gt; &lt;h2 id=&quot;why-dont-you-just&quot;&gt;Why don’t you just…?&lt;/h2&gt; &lt;p&gt;First, though, let’s just address some potential “why don’t you just…?” questions around the use of &lt;a href=&quot;https://en.wikipedia.org/wiki/Pipeline_(Unix)&quot;&gt;piping&lt;/a&gt; in this scenario.&lt;/p&gt; &lt;div class=&quot;centered-image&quot;&gt; &lt;figure&gt; &lt;img src=&quot;/assets/images/2021-10-10/treachery-of-images-unix.jpg&quot; alt=&quot;The Treachery of Images Unix parody&quot; /&gt; &lt;figcaption&gt; This is not a Unix pipe. From &lt;a href=&quot;https://www.reddit.com/r/ProgrammerHumor/comments/1vyuny/ceci_nest_pas_une_pipe/&quot;&gt; r/ProgrammerHumor &lt;/a&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Yes, we could &lt;em&gt;just&lt;/em&gt; change the command to pass the file directly to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;, and manually type in a name when &lt;a href=&quot;https://rubyapi.org/o/kernel#method-i-gets&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt;&lt;/a&gt; prompts for it:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby hello Mario Hello, Mario! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;We could also use &lt;a href=&quot;http://www.gnu.org/software/bash/manual/html_node/Process-Substitution.html#Process-Substitution&quot;&gt;process substitution&lt;/a&gt; to allow us to provide a name as an argument when running a command:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby hello &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Mario&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Hello, Mario! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The codebase, as it stands, only really gives unexpected results when we ignore the input prompt (ie just press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[Enter]&lt;/code&gt;):&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby hello &amp;lt;press Enter&amp;gt; Hello, &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[Enter]&lt;/code&gt; sends an empty string (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;), not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;, and since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; is a &lt;a href=&quot;https://learn.co/lessons/truthiness-in-ruby-readme&quot;&gt;truthy value in Ruby&lt;/a&gt;, when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name || &apos;World&apos;&lt;/code&gt; gets evaluated, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; gets output.&lt;/p&gt; &lt;p&gt;This could be fixed by changing final line of the code to something like:&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;World&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This allows the program to fall back to its default value when input is not provided:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby hello &amp;lt;press Enter&amp;gt; Hello, World! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;But! We are going to consider all of the above as &lt;em&gt;out of scope&lt;/em&gt; for answering this question, and we are going to take the use of a pipe as an &lt;em&gt;unchangeable&lt;/em&gt; (hard) requirement.&lt;/p&gt; &lt;h2 id=&quot;down-the-pipe&quot;&gt;Down the Pipe&lt;/h2&gt; &lt;div class=&quot;centered-image&quot;&gt; &lt;figure&gt; &lt;img src=&quot;/assets/images/2021-10-10/Mario!_(86871905).jpg&quot; alt=&quot;The Manchester Mario&quot; /&gt; &lt;figcaption&gt; The Manchester Mario. &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Mario!_(86871905).jpg&quot;&gt; Pete Birkinshaw from Manchester, UK &lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/licenses/by/2.0&quot;&gt; CC BY 2.0 &lt;/a&gt;, via Wikimedia Commons &lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Back to the problem at hand. Running the original command, we get the following:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hello | ruby Hello, World! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The codebase is being passed over to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;, so that we end up with a command that looks something like:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby &amp;lt;code&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;We want to be able to capture a reference to that code being passed over via the pipe, so that we can inject arguments into it, and create a command that looks something like:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby &amp;lt;code&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;arguments] &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;xargs&quot;&gt;xargs&lt;/h3&gt; &lt;p&gt;Whenever I want to do something potentially complex with piped-in arguments, I tend to reach for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Xargs&quot;&gt;xargs&lt;/a&gt; utility first. Let’s see what we can do with it.&lt;/p&gt; &lt;p&gt;We will start with attempting to get the most basic command running first (without any arguments), follow the trail of errors until it works, add in arguments, then rinse and repeat.&lt;/p&gt; &lt;p&gt;First let’s just try passing the code through xargs and see what happens:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hello | xargs ruby /../bin/ruby: No such file or directory &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#!/usr/bin/env (LoadError)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;It looks like we are only passing the first line of the file over to Ruby, rather than the entire file.&lt;/p&gt; &lt;p&gt;This would seem to indicate that we have a &lt;a href=&quot;https://en.wikipedia.org/wiki/Xargs#Separator_problem&quot;&gt;separator problem&lt;/a&gt;: xargs is not a line-oriented tool, but also separates on spaces.&lt;/p&gt; &lt;p&gt;Looking back at the file, it’s first line is:&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;xargs has separated on the space between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;, resulting in the error above. Fortunately, using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0&lt;/code&gt; flag deals with this problem, so let’s add it in:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hello | xargs &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt; ruby /../bin/ruby: No such file or directory &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#!/usr/bin/env ruby (LoadError)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# frozen_string_literal: true&lt;/span&gt; name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; gets&amp;amp;.strip puts &lt;span class=&quot;s2&quot;&gt;&quot;Hello, #{name || &apos;World&apos;}!&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Okay, it looks like the whole file is being passed through this time, but we are still getting the same error. It would seem that perhaps &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt; is not evaluating the code it is getting passed.&lt;/p&gt; &lt;p&gt;We can fix this by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; flag:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hello | xargs &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt; ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; Hello, World! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Great! We now have the default case working with xargs!&lt;/p&gt; &lt;p&gt;But, we still need a reference to the Ruby code being piped through so that we can then give &lt;em&gt;it&lt;/em&gt; arguments.&lt;/p&gt; &lt;p&gt;To do that, we can use xargs’ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-I&lt;/code&gt; option, and name the variable however we want. Let’s call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubycode&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hello | xargs &lt;span class=&quot;nt&quot;&gt;-0I&lt;/span&gt; rubycode ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; rubycode Hello, World! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;So far, so good. Now, what happens when we use process substitution to provide a name argument…?&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hello | xargs &lt;span class=&quot;nt&quot;&gt;-0I&lt;/span&gt; rubycode ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; rubycode &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Mario&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Hello, Mario! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Looks like we have ourselves a working command! Ship it! :shipit:&lt;/p&gt; &lt;h3 id=&quot;xargs-1&quot;&gt;!xargs&lt;/h3&gt; &lt;p&gt;Looking back at the command, I cannot help but think that using xargs is overkill for this kind of problem. The pipe is passing the code through as &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdin&lt;/code&gt;), we use xargs to “catch” it, assign it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubycode&lt;/code&gt; variable, and then pass that variable on to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Surely we can do the same thing with just plain bash code, right? Let’s give it a try by using &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html&quot;&gt;command substitution&lt;/a&gt; to capture the output of a &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Redirections.html&quot;&gt;redirection&lt;/a&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdin&lt;/code&gt; into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubycode&lt;/code&gt; variable.&lt;/p&gt; &lt;p&gt;As we did with xargs, we can then use that variable in the Ruby command:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hello | &lt;span class=&quot;nv&quot;&gt;rubycode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&amp;lt; /dev/stdin&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rubycode&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Mario&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;No output] &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Hmmm…getting no output here is unexpected.&lt;/p&gt; &lt;p&gt;And, indeed, it would seem that I have neglected to &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Command-Grouping.html&quot;&gt;group these commands together&lt;/a&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt;parentheses&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt;, so that the redirection that gets assigned to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubycode&lt;/code&gt; variable can be applied to the other command when it gets referenced in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt; command:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hello | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rubycode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&amp;lt; /dev/stdin&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rubycode&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Mario&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; Hello, Mario! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;And we are back to working again! But, we can probably make this a little bit more compact without sacrificing readability.&lt;/p&gt; &lt;p&gt;Let’s get rid of the intermediate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubycode&lt;/code&gt; variable, which removes a command, meaning no need for any grouping:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hello | ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&amp;lt; /dev/stdin&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Mario&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Hello, Mario! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Success! At this point, I think I would consider the &lt;a href=&quot;https://en.wiktionary.org/wiki/yak_shaving&quot;&gt;yak shaved&lt;/a&gt;, and leave it at that.&lt;/p&gt; &lt;p&gt;There are two other minor refactors I can think of, which we will go through below for completeness’ sake (said very loosely: “completeness” as in “all I could think of right now”, as I am sure there are more ways to do many of the commands in this post), but I personally think they sacrifice readability.&lt;/p&gt; &lt;h3 id=&quot;bonus-shave&quot;&gt;Bonus Shave&lt;/h3&gt; &lt;p&gt;The &lt;a href=&quot;https://www.gnu.org/software/coreutils/manual/html_node/cat-invocation.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt;&lt;/a&gt; command, if no arguments are provided, copies the contents of what it receives from standard input to &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_(stdout)&quot;&gt;standard output&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdout&lt;/code&gt;). This means that we do not need to grab a reference to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdin&lt;/code&gt; and redirect it, but can instead just use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt; command:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hello | ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Mario&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Hello, Mario! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;If you use &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;Z Shell&lt;/a&gt; (&lt;a href=&quot;https://www.zsh.org/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zsh&lt;/code&gt;&lt;/a&gt;), then you have the option of tapping directly into the mnemonics for Unix &lt;a href=&quot;https://en.wikipedia.org/wiki/File_descriptor&quot;&gt;file descriptors&lt;/a&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdin&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdout&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;), and &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)&quot;&gt;standard error&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stderr&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;):&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hello | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&amp;lt;&amp;amp;0&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Mario&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; Hello, Mario! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;blunt-razors&quot;&gt;Blunt Razors&lt;/h2&gt; &lt;p&gt;Our supply of yak shaving cream is depleted, and our razors are now blunt.&lt;/p&gt; &lt;p&gt;Even if you never plan to run Ruby programs in the ways outlined above, hopefully, like me, you were able to learn a bit more about shell programming!&lt;/p&gt; &lt;p&gt;Got any better commands that would make a shaven yak happier? Leave them in the comments!&lt;/p&gt;</content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="ruby"/><category term="bash"/><category term="zsh"/><category term="shell"/><category term="pipe"/><category term="unix"/><summary type="html">&quot;Pipes! Well done! I feel like Leonardo da Vinci! It&apos;s a masterpiece!&quot;</summary></entry><entry><title type="html">A Canvas of Cypress Tests</title><link href="https://www.paulfioravanti.com/blog/canvas-of-cypress-tests/" rel="alternate" type="text/html" title="A Canvas of Cypress Tests"/><published>2021-10-06T22:50:00+11:00</published><updated>2021-10-06T22:50:00+11:00</updated><id>https://www.paulfioravanti.com/blog/canvas-of-cypress-tests</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/canvas-of-cypress-tests/">&lt;p&gt;I have two different applications that essentially do the same thing. One is written using &lt;a href=&quot;https://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt; and &lt;a href=&quot;https://www.phoenixframework.org/&quot;&gt;Phoenix&lt;/a&gt;; the other, &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I am too lazy to write a separate test suite in each application’s language. I want to write just one test suite, and be able to run it against either application, without it needing to know about any technical internals.&lt;/p&gt; &lt;p&gt;Sounds a lot like I want an &lt;a href=&quot;https://en.wikipedia.org/wiki/Integration_testing&quot;&gt;integration test&lt;/a&gt; suite, something that &lt;a href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt; excels in helping you build. Let’s see how we can use it to create the testing glue between the two applications.&lt;/p&gt; &lt;h2 id=&quot;internationalisation-in-elixirelm&quot;&gt;Internationalisation in Elixir/Elm&lt;/h2&gt; &lt;p&gt;The application under test is a very simple toy application that re-creates the &lt;a href=&quot;http://tachyons.io/&quot;&gt;Tachyons&lt;/a&gt; &lt;a href=&quot;http://tachyons.io/components/layout/full-screen-centered-title/index.html&quot;&gt;Full Screen Centered Title component documentation page&lt;/a&gt;, but adds a dropdown menu to change the language of the message on screen, and in the browser title.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/2021-10-06/tachyons-elm.gif&quot; alt=&quot;Tachyons App&quot; title=&quot;Animated GIF of Tachyons page implemented in Elm&quot; /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;The application codebases, and their companion blog posts, can be found at the following locations:&lt;/p&gt; &lt;table style=&quot;display: inline-table;&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th style=&quot;text-align: left&quot;&gt;Language&lt;/th&gt; &lt;th style=&quot;text-align: left&quot;&gt;Application Codebase&lt;/th&gt; &lt;th style=&quot;text-align: left&quot;&gt;Companion Blog Post&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;Elixir/Phoenix&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/paulfioravanti/phx_i18n_example&quot;&gt;Phoenix LiveView I18n Example&lt;/a&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;&lt;a href=&quot;https://www.paulfioravanti.com/blog/internationalisation-phoenix-liveview/&quot;&gt;Internationalisation with Phoenix LiveView&lt;/a&gt;&lt;/em&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;Elm&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/paulfioravanti/elm-i18n-example&quot;&gt;Elm I18n Example&lt;/a&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;&lt;a href=&quot;https://www.paulfioravanti.com/blog/runtime-language-switching-elm/&quot;&gt;Runtime Language Switching in Elm&lt;/a&gt;&lt;/em&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/blockquote&gt; &lt;p&gt;The entire feature set consists of the following use cases:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;Initial language setting&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;When the application has a language setting, it displays a message and title in that language.&lt;/li&gt; &lt;li&gt;When the language setting is set to an unknown language, or is left blank, English is displayed.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;The language menu&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;The default state for the menu is closed.&lt;/li&gt; &lt;li&gt;If you click the current language, the menu opens.&lt;/li&gt; &lt;li&gt;When the menu is open: &lt;ul&gt; &lt;li&gt;if you click the current language, the menu closes&lt;/li&gt; &lt;li&gt;if you click anywhere else on the pager, the menu closes&lt;/li&gt; &lt;li&gt;if you click another language, the menu closes&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Changing language&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;For any language selectable in the dropdown menu, when you click that language, the display of the page will change to that language&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Language setting storage&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;If you change the application language and refresh the browser, the application will remember that change and still display in your chosen language&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;These use cases will form the blueprint for creating some &lt;a href=&quot;http://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; and &lt;a href=&quot;http://chaijs.com/&quot;&gt;Chai&lt;/a&gt;-based tests in Cypress.&lt;/p&gt; &lt;p&gt;We will start off with the third scenario, changing languages, since it will introduce us to some building blocks of Cypress testing. Initially, we will also focus on testing a single application, the Elm one.&lt;/p&gt; &lt;p&gt;Once we have some passing tests, we will leverage some of Cypress’ features to do some refactoring, make sure that the same test can exercise both the Elm and Elixir applications at the same time, and then build on our knowledge by moving on to the other scenarios&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Feel free to follow along with the finished application, located at the &lt;a href=&quot;https://github.com/paulfioravanti/cypress-i18n-example&quot;&gt;Cypress I18n Example&lt;/a&gt; Github repository.&lt;/p&gt; &lt;/blockquote&gt; &lt;h2 id=&quot;changing-language&quot;&gt;Changing Language&lt;/h2&gt; &lt;div class=&quot;centered-image&quot; style=&quot;width: 90%;&quot;&gt; &lt;figure&gt; &lt;img src=&quot;/assets/images/2021-10-06/van-gogh-wheatfield-with-cypresses-june-july-1889.jpg&quot; alt=&quot;A Wheatfield with Cypresses, Vincent Van Gogh, mid June - 2 July 1889&quot; /&gt; &lt;figcaption&gt; &quot;A Wheatfield with Cypresses&quot;, Vincent Van Gogh, mid June - 2 July 1889 &lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;After &lt;a href=&quot;https://docs.npmjs.com/cli/init/&quot;&gt;initialising a new Node JS application&lt;/a&gt;, &lt;a href=&quot;https://docs.cypress.io/guides/getting-started/installing-cypress&quot;&gt;installing Cypress&lt;/a&gt;, and making sure the Elm application is running, let’s create our first test to make sure we can switch language to Italian.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;a href=&quot;https://docs.cypress.io/api/table-of-contents&quot;&gt;Cypress’ API documentation&lt;/a&gt; is very user-friendly, so I will defer to you to reference it for any detailed explanations of Cypress-related functions you may see in the example code. I will only focus my commentary on application-specific logic, and any Cypress functionality I want to highlight.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress/integration/changing_language.spec.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Changing language&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:3000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;to Italian&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Italiano&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;displays Italian&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Multilingualizzazione in Elm&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;contain&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Centrare verticalmente con css è facile!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;A few notes about this test:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Since no language is initially set in this scenario, the application defaults to display in English&lt;/li&gt; &lt;li&gt;An Elm application runs at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000&lt;/code&gt; by default&lt;/li&gt; &lt;li&gt;Since we are testing a bare-bones toy application, many &lt;a href=&quot;https://en.wikipedia.org/wiki/HTML&quot;&gt;HTML&lt;/a&gt; tags represent unique elements on a page (eg &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; for language menu), so we are able to target them by simply using commands like &lt;a href=&quot;https://docs.cypress.io/api/commands/get&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cy.get()&lt;/code&gt;&lt;/a&gt;, rather than needing more granular targets like &lt;a href=&quot;https://www.w3schools.com/html/html_classes.asp&quot;&gt;classes&lt;/a&gt; or &lt;a href=&quot;https://www.w3schools.com/html/html_id.asp&quot;&gt;IDs&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Running the test within Cypress will look something like the following (but just note it has been slowed down significantly via &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/249#issuecomment-670028947&quot;&gt;this technique&lt;/a&gt;):&lt;/p&gt; &lt;figure&gt; &lt;img src=&quot;/assets/images/2021-10-06/change-language-italian-cypress.gif&quot; alt=&quot;Change language to Italian passing test in Cypress&quot; /&gt; &lt;/figure&gt; &lt;p&gt;Great! We have our first passing test, and a baseline case to create tests for the other scenarios. Thanks to this, testing for changing the language to Japanese is, for the most part, a reproduction job:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress/integration/changing_language.spec.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Changing language&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:3000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;to Italian&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;to Japanese&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;日本語&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;displays Japanese&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Elmにおける多言語化&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;contain&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;CSSで垂直センタリングは簡単だよ！&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The test for changing the language to English, though, will be slightly more involved, since we have to change the application language to be non-English before the test runs.&lt;/p&gt; &lt;p&gt;The Elm application attempts to set the initial language by first checking &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localStorage&lt;/code&gt;&lt;/a&gt; for a specific key/value pair. Since Cypress tests are run in a browser, we have direct access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localStorage&lt;/code&gt;, as well as other browser-related functionality.&lt;/p&gt; &lt;p&gt;We can leverage that, and the Cypress &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;before()&lt;/code&gt; &lt;a href=&quot;https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Hooks&quot;&gt;hook&lt;/a&gt;, to make sure we can set the initial language within a nested test, even before the top level &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beforeEach()&lt;/code&gt; hook visits the application URL:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress/integration/changing_language.spec.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Changing language&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:3000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;to Italian&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;to Japanese&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;to English&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Start in a non-English language.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;elm-i18n-example-language&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;English&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;displays English&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Multilingualisation in Elm&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;contain&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Vertically centering things in css is easy!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Okay, that’s our test suite for the use case done! Let’s run the tests!&lt;/p&gt; &lt;figure&gt; &lt;img src=&quot;/assets/images/2021-10-06/change-language-all-cypress.gif&quot; alt=&quot;Changing languages passing test suite in Cypress&quot; /&gt; &lt;/figure&gt; &lt;p&gt;Looks like they all pass, which is good, but looking at the test code, it does seem to look quite repetitive…&lt;/p&gt; &lt;p&gt;It might be nice to clean them up by extracting out the logic involved to perform core testing actions, and explicitly giving those extractions names, like “click language menu” or “displays Japanese” etc.&lt;/p&gt; &lt;h2 id=&quot;custom-commands&quot;&gt;Custom Commands&lt;/h2&gt; &lt;div class=&quot;centered-image&quot; style=&quot;width: 90%;&quot;&gt; &lt;figure&gt; &lt;img src=&quot;/assets/images/2021-10-06/van-gogh-wheatfield-with-cypresses-early-september-1889.jpg&quot; alt=&quot;A Wheatfield with Cypresses, Vincent Van Gogh, Early September 1889&quot; /&gt; &lt;figcaption&gt; &quot;A Wheatfield with Cypresses&quot;, Vincent Van Gogh, Early September 1889 &lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Using &lt;a href=&quot;https://docs.cypress.io/api/cypress-api/custom-commands&quot;&gt;Custom Commands&lt;/a&gt;, we can define our own methods to use in the same way that Cypress uses its own API. When we set up Cypress, it provided us a file to put them in, so let’s fill it up with some methods to clean up the tests!&lt;/p&gt; &lt;p&gt;We will start with some commands that wrap around logic related to the language menu:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress/support/commands.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;clickLanguageMenu&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;clickEnglish&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clickMenuLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;English&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;clickItalian&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clickMenuLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Italiano&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;clickJapanese&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clickMenuLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;日本語&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clickMenuLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The first argument in each of the commands is the name of the command that will become available to us in the tests, so let’s see how that looks:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress/integration/changing_language.spec.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Changing language&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:3000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickLanguageMenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;to Italian&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickItalian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;displays Italian&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Multilingualizzazione in Elm&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;contain&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Centrare verticalmente con css è facile!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This looks okay for a first refactor, so let’s go ahead and add some other commands to deal with language display, and, while we are at it, language storage:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress/support/commands.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;displaysEnglish&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Multilingualisation in Elm&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Vertically centering things in css is easy!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;displays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;displaysItalian&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Multilingualizzazione in Elm&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Centrare verticalmente con css è facile!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;displays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;displaysJapanese&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Elmにおける多言語化&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;CSSで垂直センタリングは簡単だよ！&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;displays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;displays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;contain&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;storeLanguage&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;elm-i18n-example-language&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Back in the test file, here is an example of how we can use these commands, inside the test that changes the language to English:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress/integration/changing_language.spec.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Changing language&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:3000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickLanguageMenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;to English&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Start in a non-English language.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;storeLanguage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickEnglish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;displays English&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;displaysEnglish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Not bad…for tests that only need to deal with the Elm application. But, the aim is to be lazy and re-use these tests for the Elixir application as well!&lt;/p&gt; &lt;p&gt;The Phoenix server runs by default on port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4000&lt;/code&gt;, rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3000&lt;/code&gt;, and it is application-specific information like this that we will need to dynamically inject into the tests in order to enable maximum laziness.&lt;/p&gt; &lt;p&gt;It would be handy to define this kind of information somewhere outside the test suite, where it can be referenced when needed. Luckily, Cypress has just the place for it.&lt;/p&gt; &lt;h2 id=&quot;cypress-environment-variables&quot;&gt;Cypress Environment Variables&lt;/h2&gt; &lt;p&gt;Cypress offers a few different options to define &lt;a href=&quot;https://docs.cypress.io/guides/guides/environment-variables&quot;&gt;environment variables&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The one we will use is defining an application root-level &lt;a href=&quot;https://docs.cypress.io/guides/guides/environment-variables#Option-2-cypress-env-json&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress.env.json&lt;/code&gt;&lt;/a&gt; file, which will contain static information about each application, as well as the language codes common across both applications:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress.env.json&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ENGLISH_LANGUAGE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ITALIAN_LANGUAGE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;it&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;JAPANESE_LANGUAGE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ja&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;APPLICATIONS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;elm-i18n-example&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:3000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;storageKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;elm-i18n-example-language&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;phx_i18n_example&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:4000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;storageKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;phxi18nexamplelanguage&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;As well as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;storageKey&lt;/code&gt; for each application, we have added an application &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; identifier, as there are some test commands that will need to know which application is currently under test in order to correctly perform some action.&lt;/p&gt; &lt;p&gt;Variables defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress.env.json&lt;/code&gt; can be accessed via &lt;a href=&quot;https://docs.cypress.io/api/cypress-api/env&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cypress.env&lt;/code&gt;&lt;/a&gt;, so let’s see how the changing language test file we have been working on changes in order to accommodate multiple applications:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress/integration/changing_language.spec.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;APPLICATIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JAPANESE_LANGUAGE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;APPLICATIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: changing language`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickLanguageMenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;to Italian&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickItalian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;displays Italian&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;displaysItalian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;to Japanese&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickJapanese&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;displays Japanese&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;displaysJapanese&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;to English&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Start in a non-English language.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;storeLanguage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JAPANESE_LANGUAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickEnglish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;displays English&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;displaysEnglish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;And, we now have a passing set of tests that cover both applications!&lt;/p&gt; &lt;figure&gt; &lt;img src=&quot;/assets/images/2021-10-06/change-language-all-apps-cypress.gif&quot; alt=&quot;Changing languages passing test suite in Cypress for both apps&quot; /&gt; &lt;/figure&gt; &lt;p&gt;Note how the address in the browser changes from the Elm application on port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3000&lt;/code&gt;, to the Phoenix application on port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4000&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;While we did not need to make any changes regarding the way that the language menu and language options are clicked between the applications, there are slight differences in how each application displays messages for a language, and how it remembers a language choice.&lt;/p&gt; &lt;p&gt;As mentioned above, this has resulted in the need for some custom commands to accept the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; parameter from the config, so let’s see how it is being used.&lt;/p&gt; &lt;h2 id=&quot;application-dependent-commands&quot;&gt;Application-Dependent Commands&lt;/h2&gt; &lt;p&gt;First up are the “displays language” set of commands. They have all changed in the same way, so we will just have a look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displaysEnglish&lt;/code&gt; as an example (check the application codebase for details of the other commands):&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress/support/commands.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ELM_APP_NAME&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;APPLICATIONS&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;displaysEnglish&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ELM_APP_NAME&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Multilingualisation in Elm&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Multilingualisation in Phoenix&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Vertically centering things in css is easy!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;displays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The only display difference between the two applications is the page title content, so we do a simple &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator&quot;&gt;ternary expression&lt;/a&gt; to decide which title to use.&lt;/p&gt; &lt;p&gt;How about storing the language for future reference? Although I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localStorage&lt;/code&gt; for the Elm application, I opted to instead use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies&quot;&gt;cookies&lt;/a&gt; in the Phoenix application, so that I could keep as much logic as possible in Elixir, and not have to write any Javascript in &lt;a href=&quot;https://hexdocs.pm/phoenix_live_view/js-interop.html#client-hooks&quot;&gt;LiveView Hooks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Cypress has an easy-to-use &lt;a href=&quot;https://docs.cypress.io/api/commands/setcookie&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setCookie&lt;/code&gt;&lt;/a&gt; API, and so adapting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;storeLanguage&lt;/code&gt; custom command to handle the Phoenix application was very straightforward:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress/support/commands.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ELM_APP_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;storageKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ELM_STORAGE_KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;storageKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PHX_STORAGE_KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;APPLICATIONS&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;storeLanguage&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ELM_APP_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ELM_STORAGE_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PHX_STORAGE_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;I did end up doing some further refactoring of the commands, like splitting them out into different files by functionality, and extracting static string values into their own file. If you are interested in those changes, see the &lt;a href=&quot;https://github.com/paulfioravanti/cypress-i18n-example/tree/main/cypress/support&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;support&lt;/code&gt; directory&lt;/a&gt; of the &lt;a href=&quot;https://github.com/paulfioravanti/cypress-i18n-example&quot;&gt;Cypress I18n Example&lt;/a&gt; application.&lt;/p&gt; &lt;h2 id=&quot;all-green&quot;&gt;All Green&lt;/h2&gt; &lt;p&gt;Most of the other tests in the suite are quite similar in format to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;changing_language.spec.js&lt;/code&gt;, and build off of functionality that we have already seen. So, I will leave it to any interested parties to have a look at the rest of the test suite in detail.&lt;/p&gt; &lt;p&gt;Suffice to say, that all the tests do pass, and you should be able to see below a test for every feature described in the use case set towards the top of this post:&lt;/p&gt; &lt;div&gt; &lt;figure&gt; &lt;img src=&quot;/assets/images/2021-10-06/full-test-suite-all-apps-cypress.gif&quot; alt=&quot;Full passing test suite in Cypress for both apps&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;There is one &lt;a href=&quot;https://www.merriam-webster.com/dictionary/gotcha&quot;&gt;gotcha&lt;/a&gt;, though, that is worth bringing up: the applications would seem to sometimes inexplicably fail to register clicks on the language menu when the suite ran at full speed. This resulted in tests randomly failing, and much frustration and confusion on my part.&lt;/p&gt; &lt;p&gt;Trawling through the &lt;a href=&quot;https://github.com/cypress-io/cypress&quot;&gt;Cypress GitHub repository&lt;/a&gt; surfaced &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1847&quot;&gt;this issue&lt;/a&gt;, seemingly indicating that there was a time where clicks were not being registered properly due to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mouseover&lt;/code&gt; events&lt;/a&gt; not being fired. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1847#issuecomment-447996153&quot;&gt;The workaround&lt;/a&gt; was to manually fire the event before clicking using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.trigger(&quot;mouseover&quot;).click()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/pull/3030&quot;&gt;This pull request&lt;/a&gt; introduced automatic firing of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mouseover&lt;/code&gt; events for clicks, but only for clickable input tags like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt;s. The language menu in our application is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag, so it does not benefit from auto-firing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mouseover&lt;/code&gt; events, but manually adding that to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clickLanguageMenu&lt;/code&gt; command fixed the issue (and gave me a new rule-of-thumb for clicking elements in Cypress):&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cypress/support/commands.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Cypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;clickLanguageMenu&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mouseover&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;cypress-vs-phoenix-tests-vs-elm-tests&quot;&gt;Cypress vs Phoenix Tests vs Elm Tests&lt;/h2&gt; &lt;div class=&quot;centered-image&quot; style=&quot;width: 90%;&quot;&gt; &lt;figure&gt; &lt;img src=&quot;/assets/images/2021-10-06/van-gogh-wheatfield-with-cypresses-late-september-1889.jpg&quot; alt=&quot;A Wheatfield with Cypresses, Vincent Van Gogh, Late September 1889&quot; /&gt; &lt;figcaption&gt; &quot;A Wheatfield with Cypresses&quot;, Vincent Van Gogh, Late September 1889 &lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Remember when I said that the reason for creating the Cypress test suite was that “I am too lazy to write a separate test suite in each application’s language”?&lt;/p&gt; &lt;p&gt;Well, writing this blog post ended up baiting me into writing them anyway.&lt;/p&gt; &lt;p&gt;I wanted to see how much of the Cypress tests I could actually replicate in the respective application languages. You can find the tests in their Github repositories:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/paulfioravanti/phx_i18n_example/tree/master/test/phx_i18n_example_web/integration&quot;&gt;Phoenix LiveView integration tests&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/paulfioravanti/elm-i18n-example/tree/master/tests&quot;&gt;Elm integration tests&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;So, how do each of these test suites fare? Let’s take a look at each language’s equivalent of the “displays English” test from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;changing_language.spec.js&lt;/code&gt; and do a bit of compare and contrast.&lt;/p&gt; &lt;h3 id=&quot;phoenix-liveview-tests&quot;&gt;Phoenix LiveView Tests&lt;/h3&gt; &lt;p&gt;Since the Phoenix application uses &lt;a href=&quot;https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html&quot;&gt;LiveView&lt;/a&gt;, which “enables rich, real-time user experiences with server-rendered HTML”, we leverage the &lt;a href=&quot;https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Phoenix.LiveViewTest&lt;/code&gt;&lt;/a&gt; module to create our tests.&lt;/p&gt; &lt;p&gt;Unlike Cypress, Phoenix tests are not run in a browser (&lt;a href=&quot;https://github.com/elixir-wallaby/wallaby&quot;&gt;Wallaby&lt;/a&gt; is the tool for that in Elixir-land). Rather, we start off with a socket connection (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conn&lt;/code&gt;, a &lt;a href=&quot;https://hexdocs.pm/plug/Plug.Conn.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt;), and use &lt;a href=&quot;https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#live/2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;live/2&lt;/code&gt;&lt;/a&gt; to spawn a stateful LiveView process (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;view&lt;/code&gt;), that we can then interact with like we would a web page:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test/phx_i18n_example_web/integration/changing_language_test.exs&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PhxI18nExampleWeb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ChangingLanguageTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PhxI18nExampleWeb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ConnCase&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Phoenix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ConnTest&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Phoenix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LiveViewTest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;conn:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;language:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;cookie:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put_req_cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;phxi18nexamplelanguage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;live&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;li&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;h1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;heading:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;cookie:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ja&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;language:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;English&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;displays English when language changed to English&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;heading:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Vertically centering things in css is easy!&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Multilingualisation in Phoenix&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Since we are not working with a browser, we have to inject the language cookie value directly into the raw connection, using &lt;a href=&quot;https://hexdocs.pm/plug/Plug.Test.html#put_req_cookie/3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;put_req_cookie/3&lt;/code&gt;&lt;/a&gt;, in order to change the LiveView’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt; (passed up to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@tag&lt;/code&gt; attribute on the test) to English.&lt;/p&gt; &lt;p&gt;From there, we perform &lt;a href=&quot;https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#render_click/1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render_click/1&lt;/code&gt;&lt;/a&gt; actions to open the language dropdown menu, select a language, and then extract the LiveView page title and heading to send into the test itself.&lt;/p&gt; &lt;p&gt;For testing LiveViews in isolation, I think these kinds of tests are absolutely fine. However, where I think Cypress does get an upper hand in this use case, and some others in the application, is, as you may expect, related to its tests being run in a browser:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;No manual injection of cookies are needed into the application; Cypress can set cookie values directly in the browser, which the application can then read in and use&lt;/li&gt; &lt;li&gt;Once the language is set, Cypress is able to &lt;a href=&quot;https://docs.cypress.io/api/commands/reload&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cy.reload()&lt;/code&gt;&lt;/a&gt; the browser to confirm that the new language is set in the cookies (check the Github repo for that test), but doing something like checking whether a cookie value has been changed in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conn&lt;/code&gt; is not feasible, and LiveViews cannot be “reloaded”&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;elm-tests&quot;&gt;Elm Tests&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://guide.elm-lang.org/architecture/&quot;&gt;The Elm Architecture&lt;/a&gt; (TEA) breaks Elm applications up into three parts:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Model — the state of your application&lt;/li&gt; &lt;li&gt;View — a way to turn your state into HTML&lt;/li&gt; &lt;li&gt;Update — a way to update your state based on messages&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When attempting to write an “integration test” in Elm, you are able to initialise a model and pass it into a view to render.&lt;/p&gt; &lt;p&gt;However, unlike a LiveView, it is not possible to trigger multiple events on a view (eg click language dropdown, then select a language) that then updates the state of a model, or the view itself, and then make assertions on it.&lt;/p&gt; &lt;p&gt;It is not even possible to do this for a single event: the only assertions we can make based off of an event being triggered are &lt;em&gt;that&lt;/em&gt; a certain type of message gets generated.&lt;/p&gt; &lt;p&gt;For example, in the test below we:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Initialise a model using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Main.init&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Change the model values to indicate that the language menu should be open (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showAvailableLanguages = True&lt;/code&gt;), and that the current language is Italian ( the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Translations.It&lt;/code&gt; type)&lt;/li&gt; &lt;li&gt;Render the model in the view and find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;English&quot;&lt;/code&gt; from the language dropdown menu&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://package.elm-lang.org/packages/elm-explorations/test/latest/Test-Html-Event#simulate&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event.Simulate&lt;/code&gt;&lt;/a&gt; a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;click&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Assert that a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg.ChangeLanguage Translations.En&lt;/code&gt; message gets generated&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tests/ChangingLanguageTest.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ChangingLanguageTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Encode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Selector&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Translations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Changing language&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changeLanguageToEnglishTest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changeLanguageToEnglishTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changeLanguageToEnglishTest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showAvailableLanguages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentLanguage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Translations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withDefault&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;changing the language to English&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sends a message to change the language to English&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;li&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;English&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simulate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ChangeLanguage&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Translations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;En&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;From here, if we want to find out what should happen when Elm receives a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg.ChangeLanguage Translations.En&lt;/code&gt; message, we need to write a specific Update-focused test which:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Initialises a model with its language setting as English (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Translations.En&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;Initialises a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg.ChangeLanguage Translations.It&lt;/code&gt; message&lt;/li&gt; &lt;li&gt;Passes the model and message into the Update function&lt;/li&gt; &lt;li&gt;Asserts that the language in the model has changed from Italian to English&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tests/UpdateTest.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UpdateTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Translations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Update&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changeLanguageTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changeLanguageTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changeLanguageTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ChangeLanguage&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Translations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Translations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;En&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Translations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Msg.ChangeLanguage&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;updates the model to the specified language&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Similar to my opinions about the Elixir tests, I think these tests are totally fine for testing parts of an Elm application in isolation.&lt;/p&gt; &lt;p&gt;There are some other Elm options to enable testing programs as more complete units, negating the need to divide up tests, like &lt;a href=&quot;https://github.com/avh4/elm-program-test&quot;&gt;elm-program-test&lt;/a&gt; (does not drive a web browser), or &lt;a href=&quot;https://github.com/justgook/elm-webdriver&quot;&gt;Elm-WebDriver&lt;/a&gt; (drives a web browser), so there are other options outside of Elm’s default testing paradigms.&lt;/p&gt; &lt;p&gt;However, for similar reasons as the Elixir tests, I think there is a strong case for involving Cypress’ power and flexibility in the testing mix for Elm applications.&lt;/p&gt; &lt;h2 id=&quot;an-aside-testing-internationalisation&quot;&gt;An Aside: Testing Internationalisation&lt;/h2&gt; &lt;p&gt;The purpose of the Phoenix and Elm I18n example applications are just that: to be toy applications that provide example implementations of using internationalisation in those languages.&lt;/p&gt; &lt;p&gt;Showing that text changes on a screen as a result of a language setting changing is their key functionality, and this is reflected in how the tests are written.&lt;/p&gt; &lt;p&gt;For a real application containing many translated text entries in different locations in multiple languages, the string-based testing used in these test suites is not really feasible. The burden of having to update tests whenever translations are updated will get tiresome quickly; translations and tests are best being able to change independent of each other.&lt;/p&gt; &lt;p&gt;Instead, it is much more helpful to have some kind of external tool that can run over your codebase and translation files to inform you on whether:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;you have any missing translations in certain languages&lt;/li&gt; &lt;li&gt;whether you have translations for strings that are not referenced in the application anymore (ie they are obsolete)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;My favourite local developer tool I have used in the past to do this has actually been a &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; gem, &lt;a href=&quot;https://glebm.github.io/i18n-tasks/&quot;&gt;i18n-tasks&lt;/a&gt;. If you do &lt;a href=&quot;https://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt; development with internationalisation, definitely add it to your toolbox.&lt;/p&gt; &lt;p&gt;There does not seem to be quite as robust a tool in the Phoenix or Elm ecosystems as of this writing, but there are other options available.&lt;/p&gt; &lt;p&gt;For a Phoenix application, it would seem that you can “verify that your &lt;a href=&quot;https://en.wikipedia.org/wiki/Gettext#Programming&quot;&gt;POT files&lt;/a&gt; are up to date with the current state of the codebase” with a &lt;a href=&quot;https://hexdocs.pm/gettext/Mix.Tasks.Gettext.Extract.html#content&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix gettext.extract&lt;/code&gt;&lt;/a&gt; task:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix gettext.extract &lt;span class=&quot;nt&quot;&gt;--check-up-to-date&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;blockquote&gt; &lt;p&gt;This task is in the &lt;a href=&quot;https://github.com/elixir-gettext/gettext/blob/becf0585b12762bddb6dd04a9f0a307c8768fa1a/lib/mix/tasks/gettext.extract.ex#L23&quot;&gt;Elixir Gettext &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch&lt;/a&gt; as of this writing, so by the time you read this, it may have been released on &lt;a href=&quot;https://hex.pm/&quot;&gt;Hex&lt;/a&gt;.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;For Elm, the situation is a bit more complex (that I go into in much more detail in &lt;em&gt;&lt;a href=&quot;https://www.paulfioravanti.com/blog/runtime-language-switching-elm/&quot;&gt;Runtime Language Switching in Elm&lt;/a&gt;&lt;/em&gt;) but I would currently recommend &lt;a href=&quot;https://github.com/ChristophP/elm-i18n-module-generator&quot;&gt;Elm i18n Gen&lt;/a&gt; to give some type safety to your translations.&lt;/p&gt; &lt;h2 id=&quot;paint-some-cypress-tests&quot;&gt;Paint some Cypress tests&lt;/h2&gt; &lt;p&gt;I have found writing and running integration tests with Cypress to be lots of fun, and think there is definitely a place for them alongside more unit-focused tests in your programming language of choice.&lt;/p&gt; &lt;p&gt;The visual feedback Cypress can provide for high-value application workflows like account sign-up, or making a payment, make the tests something that can also be shared with non-technical areas of your team or business.&lt;/p&gt; &lt;p&gt;If you have not used Cypress already, I would encourage you to give it a shot, and walk through your application in the shoes of your end users!&lt;/p&gt;</content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="javascript"/><category term="mocha"/><category term="chai"/><category term="cypress"/><category term="elixir"/><category term="phoenix"/><category term="elm"/><category term="testing"/><category term="i18n"/><summary type="html">&quot;I have a canvas of Cypress tests with apps of Elm, some Elixir, a browser like a preview of executed commands&quot;</summary></entry><entry><title type="html">Plover For the Record</title><link href="https://www.paulfioravanti.com/blog/plover-for-the-record/" rel="alternate" type="text/html" title="Plover For the Record"/><published>2021-09-04T16:00:00+10:00</published><updated>2021-09-07T14:00:00+10:00</updated><id>https://www.paulfioravanti.com/blog/plover-for-the-record</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/plover-for-the-record/">&lt;p&gt;Dictation testing involving cross-examination of a witness by lawyers in a courtroom is known colloquially in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Court_reporter&quot;&gt;court reporting&lt;/a&gt; profession as “&lt;a href=&quot;http://ilovesteno.com/2014/02/03/the-different-types-of-q-a/&quot;&gt;Q&amp;amp;A&lt;/a&gt;” (Question and Answer).&lt;/p&gt; &lt;p&gt;With &lt;a href=&quot;http://www.openstenoproject.org/&quot;&gt;Plover&lt;/a&gt; open source &lt;a href=&quot;https://en.wikipedia.org/wiki/Stenotype&quot;&gt;stenography&lt;/a&gt;, you can &lt;a href=&quot;https://en.wikipedia.org/wiki/Cosplay&quot;&gt;cosplay&lt;/a&gt; as a court reporter, show off your ability to track the communication threads of multiple participants in a courtroom conversation, and present them in official-looking transcripts of testimony.&lt;/p&gt; &lt;p&gt;So, put on your power suit and pack your briefcase, cause we’re going to go and act like we belong in the halls of justice!&lt;/p&gt; &lt;h3 id=&quot;caveat-lector&quot;&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Caveat_emptor#Caveat_lector&quot;&gt;Caveat Lector&lt;/a&gt;&lt;/em&gt;&lt;/h3&gt; &lt;p&gt;I am not a lawyer, a court reporter, nor involved in the legal profession whatsoever. I am just a stenography enthusiast who learned about the concept of Q&amp;amp;A while studying &lt;a href=&quot;https://platinumsteno.com/&quot;&gt;Platinum Steno&lt;/a&gt;’s (PS) &lt;a href=&quot;https://www.youtube.com/playlist?list=PL85Y9t9lANyArY9uTBE_kmy2cT_ECSHvU&quot;&gt;video theory lessons&lt;/a&gt; (more about that in my other blog post, &lt;em&gt;&lt;a href=&quot;https://www.paulfioravanti.com/blog/going-platinum/&quot;&gt;Going Platinum&lt;/a&gt;&lt;/em&gt;), and what is presented here is just my interpretation of what I discovered. Consequently, there is definitely a chance that I have gotten some things wrong, and if I have, please reach out via public comment below, or to me directly.&lt;/p&gt; &lt;p&gt;Plover theory itself does not contain any &lt;a href=&quot;https://sites.google.com/site/learnplover/glossary&quot;&gt;outlines&lt;/a&gt; related to Q&amp;amp;A like the ones that would seem to be contained in PS’s custom software, and are taught in their &lt;a href=&quot;https://www.youtube.com/watch?v=tEgaJ7hWIvg&amp;amp;list=PL85Y9t9lANyArY9uTBE_kmy2cT_ECSHvU&amp;amp;index=61&quot;&gt;Q&amp;amp;A lessons&lt;/a&gt;. So, in order to actively engage in those lessons, I wondered if I could attempt to recreate PS’s Q&amp;amp;A outline entries (including their formatting conventions and rules, which may be specific to them, and differ between courts in different hierarchies/states/jurisdictions/countries etc) in a custom dictionary that would work with Plover.&lt;/p&gt; &lt;p&gt;I think I was able to, and have presented the result &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Pro_bono&quot;&gt;pro bono publico&lt;/a&gt;&lt;/em&gt; in the form of:&lt;/p&gt; &lt;p&gt;:sparkles: &lt;a href=&quot;https://github.com/paulfioravanti/steno_dictionaries/blob/main/dictionaries/q-and-a.json&quot;&gt;My custom Q&amp;amp;A dictionary&lt;/a&gt; :sparkles:&lt;/p&gt; &lt;p&gt;Feel free to incorporate it into your own Plover dictionaries and give the Q&amp;amp;A lessons a shot, or just use it to follow along with the examples in this post!&lt;/p&gt; &lt;p&gt;Armed with a dictionary to use, let’s learn how to use it, while getting an introduction to Q&amp;amp;A itself!&lt;/p&gt; &lt;h2 id=&quot;ab-initio&quot;&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ab_initio&quot;&gt;Ab Initio&lt;/a&gt;&lt;/em&gt;&lt;/h2&gt; &lt;p&gt;There are, broadly, two different types of Q&amp;amp;A testing:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;2-Voice&lt;/strong&gt;: an interrogative conversation between two participants: a lawyer and a witness. The lawyer can be either for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Plaintiff&quot;&gt;plaintiff&lt;/a&gt;/prosecution, or for the defense, but this detail is usually not relevant to the scope of the conversation.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;4-Voice&lt;/strong&gt;: a cross-examination involving lawyers from each opposing party, a witness, and the courtroom judge. Handling multiple lawyers in either party is possible, so it can technically be “4-to-6-Voice”, but there are typically only four participants.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;2-Voice transcripts typically read like a simple back-and-forth question and answer session, while 4-Voice builds on this by including added complexity like:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;marking a lawyer’s “ownership” of a line of questioning&lt;/li&gt; &lt;li&gt;transcribing objections raised by lawyers, and subsequent guidance by the judge&lt;/li&gt; &lt;li&gt;specific transcribing conventions for when interruptions occur during a lawyer’s line of questioning, causing it to veer off its original path, and then the subsequent “steering” of the record back to original line of questioning once the detour has ended&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We will start off with a deep dive into using Plover for 2-Voice, and then up ante with 4-Voice.&lt;/p&gt; &lt;h2 id=&quot;2-voice&quot;&gt;2-Voice&lt;/h2&gt; &lt;div class=&quot;plover-for-the-record-image&quot;&gt; &lt;figure&gt; &lt;img src=&quot;/assets/images/2021-09-04/phoenix-and-maya.jpg&quot; alt=&quot;Phoenix Wright and Maya cosplay&quot; /&gt; &lt;figcaption&gt; Photo by &lt;a href=&quot;https://www.deviantart.com/vivienovo&quot;&gt; VivianOVO &lt;/a&gt; on &lt;a href=&quot;https://www.deviantart.com/vivienovo/art/Ace-Attorney-Maya-Fey-347872629&quot;&gt; Deviant Art &lt;/a&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;During Q&amp;amp;A, whenever someone starts speaking, you indicate this by “signing them in”, either by name, or marking them as the asker or answerer of a question.&lt;/p&gt; &lt;p&gt;For 2-Voice, names are not important, and we only care about marking the question and its answer. Questioners and answerers are “signed in” using special outlines known as question and answer “banks”, which PS defines as follows:&lt;/p&gt; &lt;table class=&quot;steno-table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Stroke&lt;/th&gt; &lt;th class=&quot;centered-heading&quot;&gt;Outline&lt;/th&gt; &lt;th class=&quot;centered-heading&quot;&gt;Keymap&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tr&gt; &lt;td&gt;Question Bank&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;STKPWHR&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;STKPWHR&lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Answer Bank&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;-FRPBLGTS&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;-FRPBLGTS&lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt;These outlines, like nearly all Q&amp;amp;A-related outlines, are not meant to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Phonetics&quot;&gt;phonetic&lt;/a&gt; (indicative of how the word sounds), nor &lt;a href=&quot;https://en.wikipedia.org/wiki/Orthography&quot;&gt;orthographic&lt;/a&gt; (indicative of how the word is spelled). So, I find it easiest to remember their form, or pattern, kind of like &lt;a href=&quot;https://en.wikipedia.org/wiki/Tetris&quot;&gt;Tetris&lt;/a&gt; blocks. Hence, I would wager the rectangular chunks here are meant to evoke an image of land masses along the side of the middle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;-key river that divides them.&lt;/p&gt; &lt;p&gt;Using these outlines, a simple question and answer could display as something like the following:&lt;/p&gt; &lt;p class=&quot;steno-transcript&quot;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Q&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Where were you on the night of January 16?&lt;br /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;I was at home, practicing steno. &lt;/p&gt; &lt;p&gt;This formatting obeys the following rules:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Questions are marked with a simple “&lt;span class=&quot;steno-transcript&quot;&gt;Q&lt;/span&gt;”, and answers with an “&lt;span class=&quot;steno-transcript&quot;&gt;A&lt;/span&gt;” (no following colons or periods)&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;steno-transcript&quot;&gt;Q&lt;/span&gt; and &lt;span class=&quot;steno-transcript&quot;&gt;A&lt;/span&gt; have a &lt;a href=&quot;https://en.wikipedia.org/wiki/Tab_key&quot;&gt;tab&lt;/a&gt; character on either side of them&lt;/li&gt; &lt;li&gt;Both questions and answers start with capital letters&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Court transcripts would seem to be written using a &lt;span class=&quot;steno-transcript&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Monospaced_font&quot;&gt;monospaced font&lt;/a&gt;&lt;/span&gt;, so we will adopt that convention as well, using the widely-available &lt;span class=&quot;steno-transcript&quot;&gt;Courier New&lt;/span&gt; font.&lt;/p&gt; &lt;h3 id=&quot;ending-punctuation&quot;&gt;Ending Punctuation&lt;/h3&gt; &lt;p&gt;The one thing that is not apparent just by looking at the example above is the convention around a speaker’s &lt;em&gt;final sentence&lt;/em&gt; punctuation before another speaker starts talking.&lt;/p&gt; &lt;p&gt;Apparently, in Q&amp;amp;A, the addition of an ending question mark (&lt;span class=&quot;steno-transcript&quot;&gt;?&lt;/span&gt;) or period (&lt;span class=&quot;steno-transcript&quot;&gt;.&lt;/span&gt;) to the &lt;em&gt;final sentence&lt;/em&gt; spoken before the speaker changes is meant to be handled by the outline that signs in the next speaker.&lt;/p&gt; &lt;p&gt;For example, when you switch from a question to an answer by stroking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-FRPBLGTS&lt;/code&gt;, that outline is expected to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Finish the question with a “&lt;span class=&quot;steno-transcript&quot;&gt;?&lt;/span&gt;”&lt;/li&gt; &lt;li&gt;Perform a &lt;a href=&quot;https://en.wikipedia.org/wiki/Newline&quot;&gt;line break&lt;/a&gt;, insert a tab, type &lt;span class=&quot;steno-transcript&quot;&gt;A&lt;/span&gt;, insert another tab, and make sure the next word will start with a capital letter&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The rule is the same when switching from an answer back to a question, but with an ending “&lt;span class=&quot;steno-transcript&quot;&gt;.&lt;/span&gt;” and a beginning &lt;span class=&quot;steno-transcript&quot;&gt;Q&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;Regarding this ending punctuation rule, PS says that the (presumably custom) software they use on their steno machines makes some kind of automatic determination about whether a question was asked or an answer given, and adds in appropriate question/answer punctuation as it deems appropriate.&lt;/p&gt; &lt;p&gt;PS does say that this determination is not perfect, and hence you may end up with question marks at the end of answers or periods that the end of questions (which may be correct for the sentence sometimes since lawyers can make statements, and witnesses can ask questions). The workaround to this issue, it would seem, is to just fix the punctuation &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Post_hoc&quot;&gt;post-hoc&lt;/a&gt;&lt;/em&gt; when you proofread your transcript.&lt;/p&gt; &lt;p&gt;Plover itself has no built-in knowledge of any kind of “Q&amp;amp;A-related ending punctuation automatic determination functionality”, so I attempted to mostly replicate the PS software logic into my custom Q&amp;amp;A dictionary, but also make a few quality-of-life improvements. The aim was to provide sensible defaults for ending punctuation, but also allow for manual overriding for when you want to explicitly specify what they should be.&lt;/p&gt; &lt;p&gt;With that in mind, here is a set of outlines I came up with to perform 2-Voice in a more flexible way:&lt;/p&gt; &lt;table class=&quot;steno-table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Stroke&lt;/th&gt; &lt;th class=&quot;centered-heading&quot;&gt;Outline&lt;/th&gt; &lt;th class=&quot;centered-heading&quot;&gt;Keymap&lt;/th&gt; &lt;th&gt;Notes&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tr&gt; &lt;td&gt;Default Question Bank&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;STKPWHR&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;STKPWHR&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous witness sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;.&lt;/span&gt;&quot; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Initial Question Bank&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;STKPWHR*&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;STKPWHR*&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Question is the first line of transcript; no previous sentence punctuation needed. &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Question Bank following question&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;STKPWHR-F&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;STKPWHR-F&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous witness sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;?&lt;/span&gt;&quot;, for when witness asks a question. &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Interrupting Question Bank&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;STKPWHR-RB&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;STKPWHR-RB&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous witness sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;--&lt;/span&gt;&quot; for when lawyer interrupts witness. &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Question Bank following statement&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;STKPWHR-R&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;STKPWHR-R&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous witness sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;.&lt;/span&gt;&quot; (same as Default Question Bank, added for completeness&apos; sake) &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Default Answer Bank&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;-FRPBLGTS&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;-FRPBLGTS&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous lawyer sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;?&lt;/span&gt;&quot; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Answer Bank following statement&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;R-FRPBLGTS&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;R-FRPBLGTS&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;.&lt;/span&gt;&quot;, for when lawyer makes a statement. &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Interrupting Answer Bank&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;WR-FRPBLGTS&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;WR-FRPBLGTS&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;--&lt;/span&gt;&quot; for when witness interrupts lawyer. &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Answer Bank following question&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;H-FRPBLGTS&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;H-FRPBLGTS&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;?&lt;/span&gt;&quot; (same as Default Answer Bank, added for completeness&apos; sake) &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt;Some further notes on this set of outlines:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;In Q&amp;amp;A, sentences would seem to only ever end in question marks, periods, or dashes. No exclamation marks, or any other type of punctuation, would seem to be used, so I did not create any outlines using them&lt;/li&gt; &lt;li&gt;I chose the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H-&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-F&lt;/code&gt; keys to delineate ending questions since they are on the higher steno row, indicating the typical upward voice inflection of a spoken question, and vice versa for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R-&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-R&lt;/code&gt; keys for statements&lt;/li&gt; &lt;li&gt;I chose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-RB&lt;/code&gt; for an ending dash as it marks the “sh” sound in the Plover “dash” outline (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TK-RB&lt;/code&gt;), and use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WR-&lt;/code&gt; is just a mirror reflection of that&lt;/li&gt; &lt;li&gt;No Initial Answer Bank outline was created since it would seem that there are never answers given without a question in Q&amp;amp;A&lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are following along with &lt;a href=&quot;https://github.com/paulfioravanti/steno_dictionaries/blob/main/dictionaries/q-and-a.json&quot;&gt;my custom Q&amp;amp;A dictionary&lt;/a&gt;, you may notice that tabs and newline characters in the entries use the special &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\t&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt; characters, rather than &lt;a href=&quot;https://github.com/openstenoproject/plover/wiki/Dictionary-Format#keyboard-shortcuts&quot;&gt;Plover keyboard shortcuts&lt;/a&gt; like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{#tab}&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{#return}&lt;/code&gt;. For example, the entry for the Default Question Bank:&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;STKPWHR&quot;: &quot;{.}{^\n\t^}{^Q^}{^\t^}{-|}&quot;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This is done simply to enable undoing the entire entry in one keystroke. Using Plover keyboard shortcuts makes what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; key can undo significantly less predictable.&lt;/p&gt; &lt;p&gt;More details about the reasons behind this can be found in Plover’s documentation on &lt;a href=&quot;https://github.com/openstenoproject/plover/wiki/Dictionary-Format#undoable-line-breaks-and-tabs&quot;&gt;Undoable Line Breaks and Tabs&lt;/a&gt;, and more details about all those other characters in the entry can be found in &lt;a href=&quot;https://github.com/openstenoproject/plover/wiki/Dictionary-Format&quot;&gt;Plover’s Dictionary Format&lt;/a&gt; documentation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;2-voice-demos&quot;&gt;2-Voice Demos&lt;/h3&gt; &lt;p&gt;In order to show my Q&amp;amp;A dictionary in action, I have recorded a few videos of myself attempting to transcribe some of PS’s initial Q&amp;amp;A lessons. Don’t expect stellar steno speeds (or much competence at all) in the videos below as I am still learning :sweat_smile:&lt;/p&gt; &lt;p&gt;The letters on the light board behind the instructor indicate who is currently speaking:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;P&lt;/strong&gt;: Plaintiff/Prosecution&lt;/li&gt; &lt;li&gt;&lt;strong&gt;W&lt;/strong&gt;: Witness&lt;/li&gt; &lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;: The Court (the Judge)&lt;/li&gt; &lt;li&gt;&lt;strong&gt;D&lt;/strong&gt;: Defense&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;There will be more variation in these lights once we get into 4-Voice.&lt;/p&gt; &lt;p&gt;The following video is of PS’s very first Q&amp;amp;A lesson, so the conversation is quite straightforward and slow. One thing to note, though, is that it begins with the questioner making a statement, necessitating use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R-FRPBLGTS&lt;/code&gt; outline.&lt;/p&gt; &lt;div class=&quot;steno-video&quot;&gt; &lt;!-- Courtesy of embedresponsively.com //--&gt; &lt;div class=&quot;responsive-video-container&quot;&gt; &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/xpJNxsOjFZs&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;figcaption&gt; Transcript: &lt;a href=&quot;https://docs.google.com/document/d/1JymsW65Q2joKCSJxNd5HS4mOX6TznrN77fGRnJKrM6o/edit?usp=sharing&quot;&gt; Platinum Steno Theory Lesson 27 Q&amp;amp;A #1 &lt;/a&gt; &lt;/figcaption&gt; &lt;/div&gt; &lt;blockquote&gt; &lt;p&gt;See &lt;a href=&quot;#appendix-a-formatting-the-record&quot;&gt;Appendix A: Formatting the Record&lt;/a&gt; for how I set up &lt;a href=&quot;https://docs.google.com/&quot;&gt;Google Docs&lt;/a&gt; to produce official-looking(?) court transcripts.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;This next video is more of the same, but note that when the witness is asked to spell their name, a technique called “stitching” is used. As apposed to &lt;a href=&quot;https://www.artofchording.com/sounds/fingerspelling.html#fingerspelling-alphabet&quot;&gt;fingerspelling&lt;/a&gt;, stitching deliberately separates letters with dashes to indicate that a speaker is verbally spelling out a word letter by letter.&lt;/p&gt; &lt;div class=&quot;steno-video&quot;&gt; &lt;!-- Courtesy of embedresponsively.com //--&gt; &lt;div class=&quot;responsive-video-container&quot;&gt; &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/y-RBNZCvQLM&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;figcaption&gt; Transcript: &lt;a href=&quot;https://docs.google.com/document/d/1NGcSJzptb7JiIB0VYg-Cv-zCHtONjtdJDgtXsMNY2J4/edit?usp=sharing&quot;&gt; Platinum Steno Theory Lesson 28 Q&amp;amp;A #2 &lt;/a&gt; &lt;/figcaption&gt; &lt;/div&gt; &lt;blockquote&gt; &lt;p&gt;See &lt;a href=&quot;#appendix-b-stitching&quot;&gt;Appendix B: Stitching&lt;/a&gt; for more about stitching, and the custom dictionary I created for it.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;In the next video, note the use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STKPWHR-F&lt;/code&gt; outline when the witness asks the lawyer a question, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R-FRPBLGTS&lt;/code&gt; for when the lawyer answers.&lt;/p&gt; &lt;div class=&quot;steno-video&quot;&gt; &lt;!-- Courtesy of embedresponsively.com //--&gt; &lt;div class=&quot;responsive-video-container&quot;&gt; &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/xl7xyRHTErY&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;figcaption&gt; Transcript: &lt;a href=&quot;https://docs.google.com/document/d/1AFuxkNO26ooOVC4zEnDHsi_CWlkOfcPuVp5nyZ8CQJY/edit?usp=sharing&quot;&gt; Platinum Steno Theory Lesson 29 Q&amp;amp;A #3 &lt;/a&gt; &lt;/figcaption&gt; &lt;/div&gt; &lt;p&gt;In the final 2-Voice demo, note the use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STKPWHR-RB&lt;/code&gt; outline when the lawyer interrupts the witness.&lt;/p&gt; &lt;div class=&quot;steno-video&quot;&gt; &lt;!-- Courtesy of embedresponsively.com //--&gt; &lt;div class=&quot;responsive-video-container&quot;&gt; &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/6MwMO76V_zA&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;figcaption&gt; Transcript: &lt;a href=&quot;https://docs.google.com/document/d/1cTU4qt0HjiGPXOBd4eN-u9nkMpJAw1CWCaa53MXucn8/edit?usp=sharing&quot;&gt; Platinum Steno Theory Lesson 30 Q&amp;amp;A #4 &lt;/a&gt; &lt;/figcaption&gt; &lt;/div&gt; &lt;p&gt;Now that we have gotten the general rules of questioning and answering down, it is time to up the ante and introduce more &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dramatis_personae&quot;&gt;dramatis personae&lt;/a&gt;&lt;/em&gt; to the conversation.&lt;/p&gt; &lt;h2 id=&quot;4-voice&quot;&gt;4-Voice&lt;/h2&gt; &lt;div class=&quot;plover-for-the-record-image&quot; style=&quot;width: 90%;&quot;&gt; &lt;figure&gt; &lt;img src=&quot;/assets/images/2021-09-04/ace-attorney-courtroom-judge.jpg&quot; alt=&quot;Phoenix, Franziska, and Judge&quot; /&gt; &lt;figcaption&gt; Photo by &lt;a href=&quot;https://www.deviantart.com/mandyneko&quot;&gt; MandyNeko &lt;/a&gt; on &lt;a href=&quot;https://www.deviantart.com/mandyneko/art/Phoenix-Wright-Case-3-5-210215863&quot;&gt; Deviant Art &lt;/a&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Courtroom cross-examination of a witness involves more than just a single legal team, but also the opposing side’s legal team, and the court itself. We are now beyond being able to sign in a speaker with just &lt;span class=&quot;steno-transcript&quot;&gt;Q&lt;/span&gt; and &lt;span class=&quot;steno-transcript&quot;&gt;A&lt;/span&gt;: we need to give the speakers names.&lt;/p&gt; &lt;p&gt;So, let’s introduce the expanded cast of characters in our courtroom drama with their designated outlines:&lt;/p&gt; &lt;table class=&quot;steno-table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Person&lt;/th&gt; &lt;th class=&quot;centered-heading&quot;&gt;Outline&lt;/th&gt; &lt;th class=&quot;centered-heading&quot;&gt;Keymap&lt;/th&gt; &lt;th&gt;Output&lt;/th&gt; &lt;th class=&quot;limited-width-heading&quot;&gt;Notes&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tr&gt; &lt;td&gt;Plaintiff Lawyer 1&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;STPHAO&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;STPHAO&lt;/span&gt; &lt;/td&gt; &lt;td&gt; &lt;span class=&quot;steno-transcript&quot;&gt;MR. STPHAO&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Known as &quot;Mr. Snoo&quot; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Plaintiff Lawyer 2&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;SKWRAO&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;SKWRAO&lt;/span&gt; &lt;/td&gt; &lt;td&gt; &lt;span class=&quot;steno-transcript&quot;&gt;MR. SKWRAO&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Known as &quot;Mr. Screw&quot; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;The Court&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;STPHAOEUFPLT&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;STPHAOEUFPLT&lt;/span&gt; &lt;/td&gt; &lt;td&gt; &lt;span class=&quot;steno-transcript&quot;&gt;THE COURT&lt;/span&gt; &lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Defense Lawyer 1&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;EUFPLT&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;EUFPLT&lt;/span&gt; &lt;/td&gt; &lt;td&gt; &lt;span class=&quot;steno-transcript&quot;&gt;MR. EUFPLT&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Known as &quot;Mr. Ifpelt&quot; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Defense Lawyer 2&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;EURBGS&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;EURBGS&lt;/span&gt; &lt;/td&gt; &lt;td&gt; &lt;span class=&quot;steno-transcript&quot;&gt;MR. EURBGS&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Known as &quot;Mr. Irbs&quot; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Witness&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;W-PBS/W-PBS&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;W-PBS W-PBS&lt;/span&gt; &lt;/td&gt; &lt;td&gt; &lt;span class=&quot;steno-transcript&quot;&gt;THE WITNESS&lt;/span&gt; &lt;/td&gt; &lt;td&gt; This is PS&apos;s designated outline &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Witness&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;SKWRAOEURBGS&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;SKWRAOEURBGS&lt;/span&gt; &lt;/td&gt; &lt;td&gt; &lt;span class=&quot;steno-transcript&quot;&gt;THE WITNESS&lt;/span&gt; &lt;/td&gt; &lt;td&gt; This is my personal alternative outline &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt;Some further notes on this set of outlines:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The pronounced “names” for each of the lawyers (“Mr. Snoo” etc) come from PS, and would seem to indicate the colloquial way they are referred to based on the literal steno pronunciation of the outline&lt;/li&gt; &lt;li&gt;In Q&amp;amp;A, it is apparently rare to have multiple lawyers on any legal team, so you will mostly be using “Mr. Snoo” and “Mr. Ifpelt”, but the full set of outlines is included in the custom Q&amp;amp;A dictionary for completeness’ sake&lt;/li&gt; &lt;li&gt;Since lawyers are humans, and humans typically have names that are not &lt;span class=&quot;steno-transcript&quot;&gt;MR. STPHAO&lt;/span&gt;, the output of the lawyer outlines can be considered placeholders. Before a Q&amp;amp;A exercise starts, if you are given the lawyer names, you can just do a simple text find-and-replace in the Q&amp;amp;A dictionary to change &lt;span class=&quot;steno-transcript&quot;&gt;MR. STPHAO&lt;/span&gt; to &lt;span class=&quot;steno-transcript&quot;&gt;MS. WEXLER&lt;/span&gt; etc where appropriate. The outlines for the judge and witness are never given specific names&lt;/li&gt; &lt;li&gt;The formatting for the output of all of these outlines is uppercase. What is not shown above, but will be shown in an extract below, is that a tab is output before the name, and then a colon and a space is output following the name&lt;/li&gt; &lt;li&gt;Plover theory has already assigned the word “irks” to Defense Lawyer 2’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EURBGS&lt;/code&gt; outline. So, &lt;em&gt;&lt;a href=&quot;https://definitions.uslegal.com/c/caveat-utilitor&quot;&gt;Caveat Utilitor&lt;/a&gt;&lt;/em&gt; that if you use the Q&amp;amp;A outline, you will be mildly inconvenienced by needing to stroke the word “irks” as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EURBG/-S&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EURBG/-Z&lt;/code&gt;&lt;/li&gt; &lt;li&gt;PS’s witness outline of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W-PBS/W-PBS&lt;/code&gt; felt a bit awkward to me, given the shapes of the other outlines, and having to stroke the same outline twice. The “lower row version” of The Court outline, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SKWRAOEURBGS&lt;/code&gt;, was not assigned to anything in Plover, so it made sense to me to assign it to the witness: the judge sits on the “high” bench, and the witness sits in the “low” dock. Both sets of outlines are included in the custom Q&amp;amp;A dictionary, so feel free to use whichever outline works for you&lt;/li&gt; &lt;li&gt;Like the question and answer bank outlines, each outlines above comes with a set of variations that marks it as the first line of the transcript, or ends the previous sentence with a period, question mark, or dash. Check out the custom dictionary itself for all those details&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This is quite a lot to take in, so let’s have a look at an example that uses the new outlines above, the question/answer ones we have already seen, and one we will have a look at later:&lt;/p&gt; &lt;p class=&quot;steno-transcript&quot;&gt; BY MR. CHAMBERS:&lt;br /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Q&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;All right. Miss Smith, where do you currently live?&lt;br /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1892 Spring Drive in Riverside.&lt;br /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Q&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Did you live at that address in July of 2018?&lt;br /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Yes, sir.&lt;br /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MR. DUGO: Your Honor, I am having a difficult time hearing the witness.&lt;br /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;THE COURT: Miss Smith, I know it is tough, but have got to keep your voice up a little bit. It is hard to hear in this courtroom, okay?&lt;br /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;THE WITNESS: Yes, your Honor. &lt;/p&gt; &lt;ul&gt; &lt;li&gt;The first line, &lt;span class=&quot;steno-transcript&quot;&gt;BY MR. CHAMBERS&lt;/span&gt;, is a byline, and indicates that the lawyer Mr. Chambers is in charge of, or owns, the current line of questioning: his questions are marked by &lt;span class=&quot;steno-transcript&quot;&gt;Q&lt;/span&gt; and the witness’s answers are marked by &lt;span class=&quot;steno-transcript&quot;&gt;A&lt;/span&gt;. We will look more at bylines next up&lt;/li&gt; &lt;li&gt;The next few lines are standard Q&amp;amp;A that we have seen before, which use the question and answer bank outlines&lt;/li&gt; &lt;li&gt;On line 6, the opposing lawyer, Mr. Dugo, interrupts the line of questioning. Mr. Dugo does not own the line of questioning, so he does not get a byline, but instead his statement is recorded inline. From this point, we have veered off the current line of questioning&lt;/li&gt; &lt;li&gt;On line 7, the judge addresses the witness, with the question also recorded inline&lt;/li&gt; &lt;li&gt;On line 8, the witness answers the question. An answer sign-in using &lt;span class=&quot;steno-transcript&quot;&gt;A&lt;/span&gt; only occurs when the witness answers a question posed by the lawyer who owns the current line of questioning. Since the witness is answering the judge’s question, and not a question posed by Mr. Chambers, it is recorded inline as &lt;span class=&quot;steno-transcript&quot;&gt;THE WITNESS&lt;/span&gt;. Whenever a witness talks out of turn without being asked a question, or is not directing an answer at the lawyer who owns the line of questioning (like at the judge here, or at the opposing lawyer), witness statements are recorded in this way&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;bylines&quot;&gt;Bylines&lt;/h3&gt; &lt;div class=&quot;plover-for-the-record-image&quot; style=&quot;width: 70%;&quot;&gt; &lt;figure&gt; &lt;img src=&quot;/assets/images/2021-09-04/briefcase-battle.jpg&quot; alt=&quot;Phoenix Wright and Miles Edgeworth briefcase battle cosplay&quot; /&gt; &lt;figcaption&gt; Photo by &lt;a href=&quot;https://www.deviantart.com/kazzu&quot;&gt; KaZzu &lt;/a&gt; on &lt;a href=&quot;https://www.deviantart.com/kazzu/art/Briefcase-Battle-80339570&quot;&gt; Deviant Art &lt;/a&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Bylines are used to indicate the lawyer that owns, or is in charge of, the current line of questioning to a witness. The outline that signs in a lawyer outputs in the following format:&lt;/p&gt; &lt;p class=&quot;steno-transcript&quot;&gt; BY &amp;lt;TITLE&amp;gt;. &amp;lt;SURNAME&amp;gt;:&lt;br /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Q&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;cursor&amp;gt; &lt;/p&gt; &lt;p&gt;It would seem that the convention is to output the lawyer’s title and surname, all in capital letters, and then output a question bank to kick off cross-examination. Like specific naming in outlines mentioned earlier, witnesses and judges also do not get bylines.&lt;/p&gt; &lt;p&gt;Whenever the lawyer begins questioning, they are signed in with a byline. If they finish questioning, and a lawyer from the opposing legal team begins questioning, they are signed in separately. If, as you saw in the transcript above, a line of questioning is interrupted, when it re-begins again, the same lawyer gets re-signed in.&lt;/p&gt; &lt;p&gt;Here is a set of outlines that can be used for bylines for Plaintiff Lawyer 1 and Defense Lawyer 1 (check the custom Q&amp;amp;A dictionary for details of the other lawyers, but they follow the same pattern):&lt;/p&gt; &lt;table class=&quot;steno-table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Stroke&lt;/th&gt; &lt;th class=&quot;centered-heading&quot;&gt;Outline&lt;/th&gt; &lt;th class=&quot;centered-heading&quot;&gt;Keymap&lt;/th&gt; &lt;th&gt;Notes&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tr&gt; &lt;td&gt;Plaintiff Lawyer 1 Initial Byline&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;STPHAO*&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;STPHAO*&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Byline is the first line of transcript; no previous sentence punctuation needed. &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Plaintiff Lawyer 1 Byline following question&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;STPHAO*F&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;STPHAO*F&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;?&lt;/span&gt;&quot; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Plaintiff Lawyer 1 Byline following statement&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;STPHAO*R&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;STPHAO*R&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;.&lt;/span&gt;&quot; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Plaintiff Lawyer 1 Byline following interruption&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;STPHAO*RB&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;STPHAO*RB&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;--&lt;/span&gt;&quot; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Defense Lawyer 1 Initial Byline&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;*EUFPLT&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;*EUFPLT&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Byline is the first line of transcript; no previous sentence punctuation needed. &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Defense Lawyer 1 Byline following question&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;H*EUFPLT&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;H*EUFPLT&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;?&lt;/span&gt;&quot; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Defense Lawyer 1 Byline following statement&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;R*EUFPLT&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;R*EUFPLT&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;.&lt;/span&gt;&quot; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Defense Lawyer 1 Byline following interruption&lt;/td&gt; &lt;td class=&quot;steno-outline&quot;&gt; &lt;span&gt;WR*EUFPLT&lt;/span&gt; &lt;/td&gt; &lt;td class=&quot;steno-font&quot;&gt; &lt;span&gt;WR*EUFPLT&lt;/span&gt; &lt;/td&gt; &lt;td&gt; Ends previous sentence with &quot;&lt;span class=&quot;steno-transcript&quot;&gt;--&lt;/span&gt;&quot; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;h2 id=&quot;4-voice-demos&quot;&gt;4-Voice Demos&lt;/h2&gt; &lt;p&gt;Now that you have been formally introduced to the cast of characters in our courtroom drama and how they interact with each other, let’s see how that all plays out in some video demos.&lt;/p&gt; &lt;p&gt;The first demo shows a basic 4-Voice example using the lawyer name placeholders. Typically, you are given the lawyer names before beginning Q&amp;amp;A so you can substitute them in.&lt;/p&gt; &lt;p&gt;Note the switching of bylines as each lawyer begins and ends their lines of questioning. Also note that when the lawyers indicate that they have no further questions, since that statement is not a question directed at the witness, it is not transcribed with a &lt;span class=&quot;steno-transcript&quot;&gt;Q&lt;/span&gt;, but as a named statement under their own byline.&lt;/p&gt; &lt;div class=&quot;steno-video&quot;&gt; &lt;!-- Courtesy of embedresponsively.com //--&gt; &lt;div class=&quot;responsive-video-container&quot;&gt; &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/vdQXdKy0im8&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;figcaption&gt; Transcript: &lt;a href=&quot;https://docs.google.com/document/d/1ggOzm94IAh5IRKLo14qdsvLnCHoBXoislsZitnF4xEQ/edit?usp=sharing&quot;&gt; Platinum Steno Theory Lesson 31 Q&amp;amp;A #5 &lt;/a&gt; &lt;/figcaption&gt; &lt;/div&gt; &lt;p&gt;The next video is more of the same, but actually using human names for the lawyers.&lt;/p&gt; &lt;div class=&quot;steno-video&quot;&gt; &lt;!-- Courtesy of embedresponsively.com //--&gt; &lt;div class=&quot;responsive-video-container&quot;&gt; &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/ccxfO0W96wA&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;figcaption&gt; Transcript: &lt;a href=&quot;https://docs.google.com/document/d/1gcfaP6JoHuu5u08zlapQqnDLA0aASk3iazaLQX0Rqko/edit?usp=sharing&quot;&gt; Platinum Steno Theory Lesson 32 Q&amp;amp;A #6 &lt;/a&gt; &lt;/figcaption&gt; &lt;/div&gt; &lt;h2 id=&quot;adjournment-sine-die&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Adjournment_sine_die&quot;&gt;Adjournment &lt;em&gt;sine die&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;There is more to learn about Q&amp;amp;A than I have been able to cover here, so if you are interested in delving even deeper, I would highly recommend checking out the following videos specifically from the &lt;a href=&quot;https://www.youtube.com/playlist?list=PL85Y9t9lANyArY9uTBE_kmy2cT_ECSHvU&quot;&gt;Platinum Steno Theory playlist&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tEgaJ7hWIvg&amp;amp;list=PL85Y9t9lANyArY9uTBE_kmy2cT_ECSHvU&amp;amp;index=61&quot;&gt;Lesson 27 QA&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ABd5JcmOmg0&amp;amp;list=PL85Y9t9lANyArY9uTBE_kmy2cT_ECSHvU&amp;amp;index=70&quot;&gt;Lesson 31&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The entire set of theory lessons is great, but if you want more information specifically on Q&amp;amp;A, then I think these are the main two you want to watch.&lt;/p&gt; &lt;p&gt;Even if you are not planning on becoming a court reporter, I think that doing these kinds of Q&amp;amp;A exercises is great dictation practice in general, and I can see the ability to be able to manage conversation threads being applicable to captioning other kinds of conversational interactions: re-assign the outlines for lawyers, the judge, and the witness to panelists, an adjudicator, and the audience, and you can now transcribe a debate!&lt;/p&gt; &lt;p&gt;If you end up giving it a try, and perhaps improve on the methods outlined here, be sure to reach out!&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Wondering where that cool steno keyboard font came from? Go get it from &lt;a href=&quot;https://github.com/Kaoffie&quot;&gt;Kathy&lt;/a&gt;’s &lt;a href=&quot;https://github.com/Kaoffie/steno_font&quot;&gt;Steno Display Font Github repository&lt;/a&gt;!&lt;/p&gt; &lt;/blockquote&gt; &lt;hr /&gt; &lt;h2 id=&quot;appendix-a-formatting-the-record&quot;&gt;Appendix A: Formatting the Record&lt;/h2&gt; &lt;p&gt;If I was going to attempt these Q&amp;amp;A exercises, I figured that I should at least also make an effort to make the resulting transcriptions feel somewhat professional, and mimic the official-looking transcripts PS provides for reference.&lt;/p&gt; &lt;p&gt;I chose &lt;a href=&quot;https://docs.google.com/&quot;&gt;Google Docs&lt;/a&gt; to do this due to its accessibility to everyone, but I am sure that you could recreate something similar on your favourite text editor or word processor software if you wanted.&lt;/p&gt; &lt;p&gt;Aside from the font and text-spacing formatting rules mentioned in the post, the court transcripts required for PS’s lessons also need to obey the following rules:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Lines must be double-spaced&lt;/li&gt; &lt;li&gt;There should be a header with the document name&lt;/li&gt; &lt;li&gt;There should be a footer with the page number&lt;/li&gt; &lt;li&gt;Line numbers must be visible on the page, with a maximum 25 lines per page&lt;/li&gt; &lt;li&gt;Line numbers must restart on each page&lt;/li&gt; &lt;li&gt;Line numbers must be added all the way to the end of the page, even if there is text only part-way through the page&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Fulfilling all the formatting requirements in Google Docs necessitated the following settings:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Line Spacing&lt;/strong&gt;: Format Menu &amp;gt; Line &amp;amp; paragraph spacing &amp;gt; Double&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Font&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Choose &lt;span class=&quot;steno-transcript&quot;&gt;Courier New&lt;/span&gt; from the font dropdown menu&lt;/li&gt; &lt;li&gt;Choose a size of 12.5 (this size and the line-spacing combination will, for the most part, ensure that you will have 25 lines per page)&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Header&lt;/strong&gt;: &lt;ul&gt; &lt;li&gt;Insert Menu &amp;gt; Headers and footers &amp;gt; Header&lt;/li&gt; &lt;li&gt;Manually type in the document name&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Footer&lt;/strong&gt;: Insert Menu &amp;gt; Page Numbers &amp;gt; Choose visual option that puts the page number on the bottom right-hand side of the document&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Indentations&lt;/strong&gt;: Left Indent: 0.5cm, Right Indent: 15.5cm&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Line Numbers&lt;/strong&gt;: &lt;ul&gt; &lt;li&gt;Not built in to Google Docs, and hence requires the free &lt;a href=&quot;https://linenumbers.app/#/?id=line-numbers-for-google-docs&quot;&gt;Line Numbers for Google Docs plugin&lt;/a&gt; (if the plugin is not available on the Google Chrome Store, follow &lt;a href=&quot;https://github.com/Line-Numbers-for-Google-Docs/chrome-extension/issues/33#issuecomment-894842650&quot;&gt;these instructions&lt;/a&gt; to install it)&lt;/li&gt; &lt;li&gt;Once installed, refresh your page and you should see its icon added to the top right section of your Google Docs page. Click on it to bring up the Line Numbering format menu&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Numbering&lt;/strong&gt;: &lt;ul&gt; &lt;li&gt;Check Show Numbering&lt;/li&gt; &lt;li&gt;Check Restart Each Page&lt;/li&gt; &lt;li&gt;Check Count by Blank Lines&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Style&lt;/strong&gt;: &lt;ul&gt; &lt;li&gt;Size: 12&lt;/li&gt; &lt;li&gt;Color: 000000&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Once you have done all of the above, you should have something approximating what I have in my documents. Feel free to further change and customise as you wish!&lt;/p&gt; &lt;h2 id=&quot;appendix-b-stitching&quot;&gt;Appendix B: Stitching&lt;/h2&gt; &lt;p&gt;When someone verbally spells words during Q&amp;amp;A, like when they spell their name for the record, s-t-i-t-c-h-i-n-g the words is the way to show this.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openstenoproject/plover/master/plover/assets/main.json&quot;&gt;Plover’s main dictionary&lt;/a&gt; has some support for stitching via the following set of outlines (note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; is the &lt;a href=&quot;https://github.com/openstenoproject/plover/wiki/Dictionary-Format#glue-operator-numbers-fingerspelling&quot;&gt;Plover glue operator&lt;/a&gt; to allow the strokes to “stick together”):&lt;/p&gt; &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;AFPL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;a-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;PW-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;b-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;KR-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;c-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;TK-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;d-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;EFPL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;e-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;TKPW-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;g-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;H-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;h-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;SKWR-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;j-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;K-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;k-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;HR-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;l-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;PH-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;m-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;TPH-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;n-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;OPLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;o-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;P-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;p-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;KW-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;q-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;R-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;r-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;S-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;s-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;T-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;t-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;SR-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;v-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;W-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;w-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;KP-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;x-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;KWR-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;y-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;You may have noticed that there are a few letters absent here. I am not sure why they are missing, but I ended up adding some of the lost letters to my own &lt;a href=&quot;https://github.com/paulfioravanti/steno_dictionaries/blob/main/dictionaries/stitching.json&quot;&gt;custom stitching dictionary&lt;/a&gt; using the following outlines:&lt;/p&gt; &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;A*EUPLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;a-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;AO*EUPLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;i-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;AO*UPLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;u-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;STKPW-PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;z-}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;A few notes about these entries:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Yes, there is already an outline for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&amp;amp;a-}&lt;/code&gt;, but I wanted one that followed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-PLT&lt;/code&gt; pattern like the rest. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APLT&lt;/code&gt; was already taken for “amount”, so I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A*EUPLT&lt;/code&gt; with the long “a” sound instead&lt;/li&gt; &lt;li&gt;For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&amp;amp;i-}&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&amp;amp;u-}&lt;/code&gt;, I wanted to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EUPLT&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPLT&lt;/code&gt;, but they were also already taken for “implement” and “ultimate”, respectively, so they, too, got elongated vowel versions of the outlines I originally wanted&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;That still leaves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&amp;amp;f-}&lt;/code&gt; missing, though. The outline I wanted to use was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TP-PLT&lt;/code&gt;, to match the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-PLT&lt;/code&gt; pattern of the other stitching outlines, but it was already reserved for the period (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{.}&lt;/code&gt;). Now, Plover already assigns 32(!) outlines to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{.}&lt;/code&gt;, so, I figured it wouldn’t miss the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TP-PLT&lt;/code&gt; outline if I overrode it and gave it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&amp;amp;f-}&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This ended up being the catalyst to create my &lt;a href=&quot;https://github.com/paulfioravanti/steno_dictionaries/blob/7191ce5a00/dictionaries/overrides/briefs.json&quot;&gt;custom brief overrides dictionary&lt;/a&gt;, for cases where I have a difference of opinion from Plover’s outline allocation, and want to assign an outline to some other word.&lt;/p&gt; &lt;p&gt;For good measure, I also snuck in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;AO*EPLT&quot;: &quot;{&amp;amp;e-}&quot;&lt;/code&gt; to the overrides dictionary, just to make sure that &lt;em&gt;all&lt;/em&gt; stitching entries would follow the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-PLT&lt;/code&gt; pattern. Plover assigns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AO*EPLT&lt;/code&gt; to “empty”, but since I do not associate the word “empty” with a long “e”, I was happy to re-assign the outline.&lt;/p&gt; &lt;h3 id=&quot;flipping-the-script&quot;&gt;Flipping the Script&lt;/h3&gt; &lt;p&gt;After using the stitching outlines above for a little while, I came across the following issue: whenever a speaker finished spelling their name, I would be left with a trailing hyphen (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;) that I would have to manually delete. In some cases, it was just not possible to know in advance what the final letter of a name would be until it was said, and it would be too late to switch out the final letter with a standard fingerspelled letter.&lt;/p&gt; &lt;p&gt;When it comes to spelling spoken words, we definitely know when the beginning is, but not necessarily when the end will be. So, I thought perhaps the stitching outlines could work in the same way: use a fingerspelled letter for the first letter, and use &lt;em&gt;backwards&lt;/em&gt;-hyphened stitching for the rest of the letters, allowing a stitched word to finish at any time.&lt;/p&gt; &lt;p&gt;So, I came up with the following set of outlines that use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*PLT&lt;/code&gt; suffix, which are spread across my custom stitching and brief overrides dictionaries, but are presented here as a single set for ease of viewing:&lt;/p&gt; &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;A*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-a}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;PW*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-b}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;KR*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-c}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;TK*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-d}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;*EPLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-e}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;TP*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-f}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;TKPW*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-g}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;H*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-h}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;*EUPLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-i}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;SKWR*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-j}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;K*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-k}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;HR*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-l}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;PH*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-m}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;TPH*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-n}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;O*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-o}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;P*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-p}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;KW*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-q}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;R*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-r}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;S*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-s}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;T*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-t}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;*UPLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-u}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;SR*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-v}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;W*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-w}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;KP*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-x}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;KWR*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-y}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;STKPW*PLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&amp;amp;-z}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Which ever way you prefer to do steno stitching (if you even need to do it at all!), hopefully this has given you some food for thought on some potential options to get it working. If neither of these options suit your tastes, perhaps the &lt;a href=&quot;https://github.com/morinted/plover_stitching&quot;&gt;Plover Stitching Plugin&lt;/a&gt; may provide a more viable option.&lt;/p&gt; &lt;p&gt;G-o-o-d L-u-c-k!&lt;/p&gt;</content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="plover"/><category term="stenography"/><category term="court-reporting"/><category term="q-and-a"/><category term="cosplay"/><category term="georgi"/><summary type="html">Want to try recording legal testimony with just your computer keyboard? With Plover, court is in session.</summary></entry><entry><title type="html">Going Platinum</title><link href="https://www.paulfioravanti.com/blog/going-platinum/" rel="alternate" type="text/html" title="Going Platinum"/><published>2021-07-12T17:35:00+10:00</published><updated>2021-10-03T17:37:00+11:00</updated><id>https://www.paulfioravanti.com/blog/going-platinum</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/going-platinum/">&lt;p&gt;It took nearly 4 months, but I finally finished &lt;a href=&quot;https://platinumsteno.com/&quot;&gt;Platinum Steno&lt;/a&gt;’s &lt;a href=&quot;https://www.youtube.com/playlist?list=PL85Y9t9lANyArY9uTBE_kmy2cT_ECSHvU&quot;&gt;video theory lessons&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;It was a tough marathon, and there were many times where I had to drag myself huffing and puffing through the motions to just get to the end of a lesson.&lt;/p&gt; &lt;p&gt;Ultimately, though, I think it was &lt;em&gt;absolutely worth it&lt;/em&gt;. So, I would like to spread the word about these great lessons, but also provide some commentary, from the point of view of a hobbyist, about where I think they best fit in a steno learner’s itinerary.&lt;/p&gt; &lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt; &lt;p&gt;Platinum Steno (PS) is (was?) a provider of paid educational and training material for &lt;a href=&quot;https://en.wikipedia.org/wiki/Court_reporter&quot;&gt;court reporters&lt;/a&gt;. In February 2021, they released their entire catalogue of stenography theory and speed-building videos to &lt;a href=&quot;https://www.youtube.com/c/platinumsteno&quot;&gt;their YouTube channel&lt;/a&gt;, and made the complementary lesson materials and worksheets freely available to download from their website (though you do need to go through a checkout process for $0 to get each lesson’s materials).&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.facebook.com/platinumsteno/posts/1390445521301220&quot;&gt;This post&lt;/a&gt; on &lt;a href=&quot;https://www.facebook.com/platinumsteno&quot;&gt;their Facebook page&lt;/a&gt; would seem to explain some of the motivations for making their content widely available:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;This content should not be used to replace your existing school or program. Our intention in releasing this content was never to compete with existing programs. We decided to release this material because we felt that everyone could benefit from it, especially if it was free to the students. […] No matter where you are in your journey, we believe the content is valuable and can have a place in your practice sessions.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Being a computer programmer that loves &lt;a href=&quot;https://en.wikipedia.org/wiki/Open-source_software&quot;&gt;open-source software&lt;/a&gt;, and whose steno theory of choice is the free and open &lt;a href=&quot;http://www.openstenoproject.org/&quot;&gt;Plover&lt;/a&gt; theory, I love this sentiment and can definitely get behind it! With regards to being able to use the content “no matter where you are in your journey”, though, I think there are a few caveats here that are worth making more explicit.&lt;/p&gt; &lt;h2 id=&quot;open-content-closed-theory&quot;&gt;Open Content, Closed Theory&lt;/h2&gt; &lt;p&gt;From what I understand from conversations on the &lt;a href=&quot;https://discord.me/plover&quot;&gt;Plover Discord&lt;/a&gt;, the PS theory lessons use a “modified &lt;a href=&quot;https://www.stenedsource.com/&quot;&gt;StenEd&lt;/a&gt;” theory (Plover also &lt;a href=&quot;https://www.artofchording.com/introduction/theories-and-dictionaries.html#plover-theory&quot;&gt;“has its roots in StenEd”&lt;/a&gt;, so there is some overlap between it and PS).&lt;/p&gt; &lt;p&gt;Looking on the StenEd website, you can see that there are lots of options to buy various books and audio material. If you are a beginner, and just want to try steno before making any big monetary investments, you may think you could bypass these purchases for now, and just start learning via the YouTube videos.&lt;/p&gt; &lt;p&gt;However, you now have some new questions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Where will you get the StenEd dictionaries that map the steno outlines you find in PS’s worksheets to their English words? PS’s “modified” theory would seem to indicate there is a level of customisation to their dictionaries that would be unique to them (and hence may not be in any “official” StenEd dictionaries you could buy), and those dictionaries do not seem to have been released alongside their video lessons.&lt;/li&gt; &lt;li&gt;Where will you get the software that will translate your chorded StenEd keyboard strokes into English output? The lessons make mention of special, presumably also custom, software, which, along with chord translation, handles specific situations like chording large numbers, currency, and legal Q&amp;amp;A exercises (more about that later); this software also does not seem to have been released publicly.&lt;/li&gt; &lt;li&gt;Even if you did find that software, will it run on your computer, or do you need an expensive &lt;a href=&quot;https://en.wikipedia.org/wiki/Stenotype#Modern_hardware&quot;&gt;stenotype machine&lt;/a&gt; to run it?&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you have made the plunge to formally enrol in a steno school which uses StenEd theory, then perhaps all the issues outlined above are irrelevant, and you can, indeed, easily augment your studies with PS’s materials. This is fantastic! Definitely go for it (and feel free to ignore most of the rest of this post)!&lt;/p&gt; &lt;h2 id=&quot;delayed-gratification&quot;&gt;Delayed Gratification&lt;/h2&gt; &lt;p&gt;If you are going to go the open and free route with learning steno as a beginner, then Plover theory is currently your only viable choice. This is not a bad thing (I :heart: Plover!), and I think the theory that the PS lessons use is not really important compared to the value provided by their content.&lt;/p&gt; &lt;p&gt;Although Plover theory and &lt;a href=&quot;https://github.com/openstenoproject/plover/releases&quot;&gt;its software&lt;/a&gt;, can enable you to attempt the lessons without any upfront monetary cost (assuming you already have an &lt;a href=&quot;https://en.wikipedia.org/wiki/Rollover_(key)#n-key_rollover&quot;&gt;&lt;em&gt;N&lt;/em&gt;-Key Rollover&lt;/a&gt;-compatible keyboard), I believe a cost is borne in the &lt;em&gt;timing&lt;/em&gt; that you can reasonably start studying them, which is not at the very beginning of your steno journey.&lt;/p&gt; &lt;p&gt;Therefore, I would suggest &lt;em&gt;forgetting&lt;/em&gt; PS for now, and instead focus on just learning Plover theory, to the point where you understand it intuitively.&lt;/p&gt; &lt;p&gt;Read one or both of &lt;a href=&quot;https://sites.google.com/site/learnplover/&quot;&gt;Learn Plover!&lt;/a&gt; and &lt;a href=&quot;https://www.artofchording.com/&quot;&gt;Art of Chording&lt;/a&gt; (both recommended!), and get &lt;em&gt;lots&lt;/em&gt; of steno practice in using applications like &lt;a href=&quot;https://didoesdigital.com/typey-type/&quot;&gt;Typey Type&lt;/a&gt;, or any one of the many resources listed on &lt;a href=&quot;https://github.com/openstenoproject/plover/wiki/Learning-Stenography&quot;&gt;Plover’s Learning Resources Wiki page&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This will probably take you a few months at the very least, so go off and have fun learning! The rest of this post will happily wait for your return…&lt;/p&gt; &lt;div style=&quot;margin: auto; text-align: center; width: 90%;&quot;&gt; &lt;figure style=&quot;display: block&quot;&gt; &lt;img src=&quot;/assets/images/2021-07-12/scott-webb-habqOl7e_S8-unsplash.jpg&quot; alt=&quot;woman looking on trees&quot; /&gt; &lt;figcaption style=&quot;text-align: center;&quot;&gt; Photo by &lt;a href=&quot;https://unsplash.com/@scottwebb?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt; Scott Webb &lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/platinum?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt; Unsplash &lt;/a&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;…Welcome back! You now have a high degree of fluency in Plover, and have had lots of practice chording keystrokes, right? Great! Time to re-consider looking at PS theory lessons!&lt;/p&gt; &lt;p&gt;Wait, I’m recommending that you go &lt;em&gt;back&lt;/em&gt; to theory? Didn’t you do all that already? Yes, you did! The core steno theory concepts in PS will end up just being revision for you, and the fact that they use StenEd theory will now not be a cause for any potential confusion thanks to your solid foundation in Plover! So, you will be able to focus more on the content that the PS theory lessons provide that I think is unique to them.&lt;/p&gt; &lt;h2 id=&quot;platinum-club-benefits&quot;&gt;Platinum Club Benefits&lt;/h2&gt; &lt;p&gt;The most important elements in determining the success of any educational courses are its delivery and content, and PS excels in both of these areas.&lt;/p&gt; &lt;h3 id=&quot;delivery&quot;&gt;Delivery&lt;/h3&gt; &lt;p&gt;Jill Paxton-Brumund, the teacher of the theory lessons, is absolutely fantastic!&lt;/p&gt; &lt;p&gt;Jill’s kind-yet-no-nonsense approach made learning with her a pleasure. Her explanations of steno outlines, stories from the trenches of court reporting, and even the way she read dictation exercises to prompt you to recognise when you could use a stroke-saving brief, were all massively helpful and interesting.&lt;/p&gt; &lt;p&gt;Learning steno is hard, and can be a grind, and Jill is unapologetic in telling you that if you are having trouble learning or remembering outlines, or chording particular keystrokes, to just go back and re-practice things multiple times until they sink in.&lt;/p&gt; &lt;p&gt;I felt like Jill was my steno gym coach, encouraging me to do those extra repetitions to build up muscle memory, and rooting for me to succeed. Thank you, Jill!&lt;/p&gt; &lt;h3 id=&quot;content&quot;&gt;Content&lt;/h3&gt; &lt;p&gt;During the course of the lessons, I definitely got some value out of doing more in-depth revision of core steno concepts. More importantly, though, the lessons served as motivation for creating my own learning materials, and broadening my knowledge of steno:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The lessons contained a lot of vocabulary, including &lt;a href=&quot;https://en.wikipedia.org/wiki/Proper_and_common_nouns&quot;&gt;proper nouns&lt;/a&gt;, that I had not encountered in Plover learning materials, and in some cases were not contained in the default Plover dictionary. This became the catalyst for the creation of &lt;a href=&quot;https://github.com/paulfioravanti/steno_dictionaries&quot;&gt;my personal dictionaries&lt;/a&gt;: to augment what Plover provided with outlines that made sense to me.&lt;br /&gt; I would either take outlines directly from the PS lessons that I liked and put them in my dictionaries, or just make up outlines for new words that felt “Plover-esque” to me (doing Plover theory first helped me gain the intuition and confidence to do that).&lt;/li&gt; &lt;li&gt; &lt;p&gt;As I went through each lesson, I took the time to annotate each of the vocabulary outlines on the PS written materials with the Plover equivalents which blew out the time to finish each lesson significantly for me (feel free to do this mentally if you wish…). Sometimes, the outlines for StenEd and Plover would be the same, but when they were not, I used the following note style:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/2021-07-12/theory-edits.jpg&quot; alt=&quot;img theory-edits&quot; style=&quot;width: 50%;&quot; /&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt;An outline written as-is under a word would signify that the PS outline &lt;em&gt;cannot&lt;/em&gt; be used in Plover, and the new outline must be used. In this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PWUT/ER&lt;/code&gt; is not a valid outline for “butter” in Plover theory, so I chose my preferred Plover outline to put here: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PWAOURT&lt;/code&gt; (though the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;-flagged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PWUT/*ER&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; valid in Plover).&lt;/li&gt; &lt;li&gt;An outline written in parentheses, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt;, indicates that the PS outline is valid in Plover, but I personally prefer a different one. In this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TKEUPB/ER&lt;/code&gt; also maps to “dinner” in Plover theory, but I prefer the single-stroke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TKEURPB&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;An outline written in square-brackets, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;, indicates that the actual word does not exist in the default Plover dictionary, and so a custom outline was required to be created. As of this writing, Plover has no entry for “&lt;a href=&quot;https://en.wikipedia.org/wiki/Dobermann&quot;&gt;Doberman&lt;/a&gt;”, and although I could have used the provided &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TKOEB/ER/PHAPB&lt;/code&gt; outline since it looks reasonable, I decided to create a new one to shave off a stroke: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TKOERB/PHAPB&lt;/code&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;There is a lot of emphasis in the PS lessons on being able to stroke basic multi-word briefs with a single chord (eg “I have”, “did you”, “that he was”, “do you have the” etc). As well as building muscle memory in areas that will assist in getting higher speeds, this led to the addition of over 150 new phrase briefs to my personal dictionaries, so I hope they’ll serve me well (and maybe even you?) in the future.&lt;/li&gt; &lt;li&gt;I learned about the concept of &lt;a href=&quot;https://www.youtube.com/watch?v=tEgaJ7hWIvg&quot;&gt;Q&amp;amp;A&lt;/a&gt;, which took the form of dictation exercises involving legal cross-examination of witnesses by attorneys in a courtroom setting.&lt;br /&gt; I am not training to be a court reporter, but I had fun learning all about the conventions around writing up a legal record, including the formatting, how to “check in” attorneys with “by-lines” before they start questioning a witness, and just how the documentation of various participants in a conversation occurs (I have no idea how much commonality there is between different types of courts around the English-speaking world for legal record writing conventions).&lt;br /&gt; If, like me, you think of learning steno like learning another language, I think that the Q&amp;amp;A parts of the PS lessons could be considered their “cultural studies”. You will rarely learn a human language in isolation from all the cultural elements that helped form and shape it, and I believe this to be the case with Q&amp;amp;A as well, given steno’s long history with the legal profession.&lt;br /&gt; I also made a &lt;a href=&quot;https://github.com/paulfioravanti/steno_dictionaries/blob/main/dictionaries/q-and-a.json&quot;&gt;Q&amp;amp;A dictionary&lt;/a&gt; that, I believe, can help Plover mimic the software that PS uses for this. Hopefully it can be of assistance to any Plover users who also decide to learn some Q&amp;amp;A!&lt;br /&gt; &lt;strong&gt;UPDATE 3 Oct 2021&lt;/strong&gt;: I wrote in-depth about doing Q&amp;amp;A with Plover in another blog post, &lt;em&gt;&lt;a href=&quot;https://www.paulfioravanti.com/blog/plover-for-the-record/&quot;&gt;Plover for the Record&lt;/a&gt;&lt;/em&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;If you are a Plover steno learner looking for more educational materials after working your way through other community-created texts, then you cannot go wrong with PS’s theory lessons, especially given that there is now no barrier to entry.&lt;/p&gt; &lt;p&gt;Personally, I am still on the PS bandwagon, and have started going through their speed classes, starting at 60 words-per-minute. It is tough, even now, but I consider it to be just another stage of the marathon I am happily running as part of my steno journey.&lt;/p&gt; &lt;p&gt;Thanks to Platinum Steno for providing such a great cache of material to budding learners of stenography, and I look forward to being able to gradually improve past my QWERTY speeds, and beyond!&lt;/p&gt;</content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="plover"/><category term="stenography"/><summary type="html">New to stenography and wondering if you should do the Platinum Steno theory courses? Here&apos;s how they can fit into your learning mix.</summary></entry><entry><title type="html">Coding Test Review: Sentia</title><link href="https://www.paulfioravanti.com/blog/coding-test-review-sentia/" rel="alternate" type="text/html" title="Coding Test Review: Sentia"/><published>2021-05-09T17:50:00+10:00</published><updated>2021-08-03T15:30:00+10:00</updated><id>https://www.paulfioravanti.com/blog/coding-test-review-sentia</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/coding-test-review-sentia/">&lt;p&gt;I actually quite like coding tests.&lt;/p&gt; &lt;p&gt;Not whiteboard coding tests, or generic algorithm tests that read more like math problems (usually set by “tech recruiting platforms”, and performed under exam-like conditions), but “take-home” tests where you get to build something practical in a specific technology stack.&lt;/p&gt; &lt;p&gt;They can be fun and stimulating in the same way as answering questions on &lt;a href=&quot;https://stackoverflow.com/users/567863/paul-fioravanti&quot;&gt;Stack Overflow&lt;/a&gt;, or solving problems on learning platforms like &lt;a href=&quot;https://exercism.io/profiles/paulfioravanti&quot;&gt;Exercism&lt;/a&gt;, and can also be good fodder for your &lt;a href=&quot;https://github.com/paulfioravanti&quot;&gt;online coding portfolio&lt;/a&gt;. I find I nearly always learn something new, or a different way of doing something I may already know, that makes me re-think the way I have solved a problem.&lt;/p&gt; &lt;p&gt;In this instance, a friend sent me &lt;a href=&quot;https://www.sentia.com.au/&quot;&gt;Sentia&lt;/a&gt;’s coding test to check out, and simply because I felt like I had not begun a &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt; application from scratch in a long time, I decided to take a crack at it. So, here is my review of that attempt.&lt;/p&gt; &lt;p&gt;Here are the public links for the deployed application and codebase:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://sentiacodingtest.herokuapp.com/&quot;&gt;Sentia Coding Test application&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/paulfioravanti/sentia-coding-test&quot;&gt;Sentia Coding Test codebase&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt; &lt;p&gt;Disclaimer: I am not, nor have ever been, an employee of Sentia, nor have I ever applied for employment there, nor is this post some kind of attempt to get them to employ me; I just did their coding test for my own definition of “fun”.&lt;/p&gt; &lt;p&gt;If you are applying there, or plan to in the future, you may want to stop reading, and consider pretending that this blog post (and &lt;a href=&quot;https://github.com/search?l=Ruby&amp;amp;p=1&amp;amp;q=sentia&amp;amp;type=Repositories&quot;&gt;all the other solutions people have posted&lt;/a&gt;) does not exist, so you can greet their coding test with fresh eyes (assuming this one is still being used…)&lt;/p&gt; &lt;/blockquote&gt; &lt;h2 id=&quot;original-requirements&quot;&gt;Original Requirements&lt;/h2&gt; &lt;p&gt;You will be required to create a Ruby on Rails application with the following features below. The sample CSV data required for the test can be found &lt;a href=&quot;https://github.com/paulfioravanti/sentia-coding-test/blob/main/test/fixtures/files/SentiaCodingTestData.csv&quot;&gt;here&lt;/a&gt;. This application can be built in 1 hour.&lt;/p&gt; &lt;p&gt;Below is a list of user stories and requirements for each section of this application.&lt;/p&gt; &lt;h3 id=&quot;part-1&quot;&gt;PART 1&lt;/h3&gt; &lt;p&gt;As a user, I should be able to upload this sample CSV and import the data into a database.&lt;/p&gt; &lt;p&gt;IMPORTER REQUIREMENTS&lt;/p&gt; &lt;ol&gt; &lt;li&gt;The data needs to load into 3 tables. &lt;strong&gt;People&lt;/strong&gt;, &lt;strong&gt;Locations&lt;/strong&gt; and &lt;strong&gt;Affiliations&lt;/strong&gt;&lt;br /&gt;&lt;/li&gt; &lt;li&gt;A &lt;strong&gt;Person&lt;/strong&gt; can belong to many &lt;strong&gt;Locations&lt;/strong&gt;&lt;br /&gt;&lt;/li&gt; &lt;li&gt;A &lt;strong&gt;Person&lt;/strong&gt; can belong to many &lt;strong&gt;Affiliations&lt;/strong&gt;&lt;br /&gt;&lt;/li&gt; &lt;li&gt;A &lt;strong&gt;Person&lt;/strong&gt; without an &lt;strong&gt;Affiliation&lt;/strong&gt; should be skipped&lt;br /&gt;&lt;/li&gt; &lt;li&gt;A &lt;strong&gt;Person&lt;/strong&gt; should have both a &lt;em&gt;first_name&lt;/em&gt; and &lt;em&gt;last_name&lt;/em&gt;. All fields need to be validated except for &lt;em&gt;last_name&lt;/em&gt;, &lt;em&gt;weapon&lt;/em&gt; and &lt;em&gt;vehicle&lt;/em&gt; which are optional.&lt;br /&gt;&lt;/li&gt; &lt;li&gt;Names and Locations should all be titlecased&lt;/li&gt; &lt;/ol&gt; &lt;h3 id=&quot;part-2&quot;&gt;PART 2&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;As a user, I should be able to view these results from the importer in a table.&lt;/li&gt; &lt;li&gt;As a user, I should be able to paginate through the results so that I can see a maximum of 10 results at a time.&lt;/li&gt; &lt;li&gt;As a user, I want to type in a search box so that I can filter the results I want to see.&lt;/li&gt; &lt;li&gt;As a user, I want to be able to click on a table column heading to reorder the visible results.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Once the test has been completed. Please upload to Git Repo/Google Drive/DropBox or zip and email over back to &lt;em&gt;&amp;lt;person&amp;gt;&lt;/em&gt; at &lt;em&gt;&amp;lt;person’s email&amp;gt;&lt;/em&gt;. ∎&lt;/p&gt; &lt;p&gt;The sample &lt;a href=&quot;https://en.wikipedia.org/wiki/Comma-separated_values&quot;&gt;CSV&lt;/a&gt; file contains the following data from a galaxy far, far away….&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Location&lt;/th&gt; &lt;th&gt;Species&lt;/th&gt; &lt;th&gt;Gender&lt;/th&gt; &lt;th&gt;Affiliations&lt;/th&gt; &lt;th&gt;Weapon&lt;/th&gt; &lt;th&gt;Vehicle&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Darth Vader&lt;/td&gt; &lt;td&gt;Death Star, Tatooine&lt;/td&gt; &lt;td&gt;Human&lt;/td&gt; &lt;td&gt;Male&lt;/td&gt; &lt;td&gt;Sith&lt;/td&gt; &lt;td&gt;Lightsaber&lt;/td&gt; &lt;td&gt;Tiefighter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Chewbacca&lt;/td&gt; &lt;td&gt;kashyyk&lt;/td&gt; &lt;td&gt;Wookie&lt;/td&gt; &lt;td&gt;m&lt;/td&gt; &lt;td&gt;Rebel Alliance&lt;/td&gt; &lt;td&gt;Bowcaster&lt;/td&gt; &lt;td&gt;Millennium Falcon&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;yoda&lt;/td&gt; &lt;td&gt;Yoda’s Hutt&lt;/td&gt; &lt;td&gt;Unknown&lt;/td&gt; &lt;td&gt;Male&lt;/td&gt; &lt;td&gt;Jedi Order&lt;/td&gt; &lt;td&gt;Lightsaber&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Sheev Palpatine&lt;/td&gt; &lt;td&gt;Naboo&lt;/td&gt; &lt;td&gt;Human&lt;/td&gt; &lt;td&gt;Male&lt;/td&gt; &lt;td&gt;Galactic Republic&lt;/td&gt; &lt;td&gt;Lightsaber&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Princess Leia&lt;/td&gt; &lt;td&gt;Alderaan&lt;/td&gt; &lt;td&gt;Human&lt;/td&gt; &lt;td&gt;Female&lt;/td&gt; &lt;td&gt;Rebel Alliance, Galactic Republic&lt;/td&gt; &lt;td&gt;Blaster Pistol&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;jabba the Hutt&lt;/td&gt; &lt;td&gt;Tatooine&lt;/td&gt; &lt;td&gt;Hutt&lt;/td&gt; &lt;td&gt;Male&lt;/td&gt; &lt;td&gt;Hutt Clan&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;Jabba’s Sale Barge&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Kylo Ren&lt;/td&gt; &lt;td&gt;chandrila&lt;/td&gt; &lt;td&gt;Human&lt;/td&gt; &lt;td&gt;Male&lt;/td&gt; &lt;td&gt;First Order&lt;/td&gt; &lt;td&gt;Lightsaber&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Obi-Wan Kenobi&lt;/td&gt; &lt;td&gt;Stewjon&lt;/td&gt; &lt;td&gt;Human&lt;/td&gt; &lt;td&gt;M&lt;/td&gt; &lt;td&gt;Jedi Order&lt;/td&gt; &lt;td&gt;Lightsaber&lt;/td&gt; &lt;td&gt;Jedi Starfighter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;luke skywalker&lt;/td&gt; &lt;td&gt;Tatooine&lt;/td&gt; &lt;td&gt;Human&lt;/td&gt; &lt;td&gt;M&lt;/td&gt; &lt;td&gt;Rebel Alliance, Jedi Order&lt;/td&gt; &lt;td&gt;Lightsaber~!@@@&lt;/td&gt; &lt;td&gt;X-wing Starfighter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Jar Jar Binks&lt;/td&gt; &lt;td&gt;Naboo&lt;/td&gt; &lt;td&gt;Gungan&lt;/td&gt; &lt;td&gt;Male&lt;/td&gt; &lt;td&gt;Galactic Republic, Gungan Grand Army&lt;/td&gt; &lt;td&gt;Energy Ball&lt;/td&gt; &lt;td&gt;Gungan Bongo Submarine&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;R2-D2&lt;/td&gt; &lt;td&gt;Naboo&lt;/td&gt; &lt;td&gt;Astromech Droid&lt;/td&gt; &lt;td&gt;Other&lt;/td&gt; &lt;td&gt;Rebel Alliance, Galactic Republic&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;X-wing Starfighter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Han Solo&lt;/td&gt; &lt;td&gt;Corellia&lt;/td&gt; &lt;td&gt;Human&lt;/td&gt; &lt;td&gt;Male&lt;/td&gt; &lt;td&gt;Rebel Alliance&lt;/td&gt; &lt;td&gt;Blaster Pistol&lt;/td&gt; &lt;td&gt;Millennium Falcon&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Boba Fett&lt;/td&gt; &lt;td&gt;Kamino&lt;/td&gt; &lt;td&gt;Human&lt;/td&gt; &lt;td&gt;m&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;Blaster&lt;/td&gt; &lt;td&gt;Slave 1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Rey&lt;/td&gt; &lt;td&gt;Jakku&lt;/td&gt; &lt;td&gt;Human&lt;/td&gt; &lt;td&gt;f&lt;/td&gt; &lt;td&gt;Jedi Order&lt;/td&gt; &lt;td&gt;Lightsaber&lt;/td&gt; &lt;td&gt;Rey’s Speeder&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;padme amidala&lt;/td&gt; &lt;td&gt;naboo&lt;/td&gt; &lt;td&gt;Human&lt;/td&gt; &lt;td&gt;Female&lt;/td&gt; &lt;td&gt;Galactic Republic&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;Naboo N-1 Starfigher&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C-3PO&lt;/td&gt; &lt;td&gt;Tatooine&lt;/td&gt; &lt;td&gt;Protocol Droid&lt;/td&gt; &lt;td&gt;Other&lt;/td&gt; &lt;td&gt;The Resistance&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;-1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Mace Windu&lt;/td&gt; &lt;td&gt;Haruun Kal&lt;/td&gt; &lt;td&gt;Human&lt;/td&gt; &lt;td&gt;Male&lt;/td&gt; &lt;td&gt;Jedi Order&lt;/td&gt; &lt;td&gt;Lightsaber&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Lando calrissian&lt;/td&gt; &lt;td&gt;Cloud City&lt;/td&gt; &lt;td&gt;Human&lt;/td&gt; &lt;td&gt;Male&lt;/td&gt; &lt;td&gt;Rebel Alliance&lt;/td&gt; &lt;td&gt;Blaster Pistol&lt;/td&gt; &lt;td&gt;Millennium Falcon&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h2 id=&quot;elephant&quot;&gt;:elephant:&lt;/h2&gt; &lt;p&gt;First thing’s first: let’s address the &lt;a href=&quot;https://en.wikipedia.org/wiki/Elephant_in_the_room&quot;&gt;elephant in the requirements&lt;/a&gt;:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;This application can be built in 1 hour.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;If this is true, then I am a &lt;strong&gt;&lt;em&gt;terrible&lt;/em&gt;&lt;/strong&gt; developer.&lt;/p&gt; &lt;p&gt;It took me a fair bit longer than that to write working code as-per requirements, debug the requirements (more on that later…), get it deployed somewhere on the internet, and refactor the code to a state where I would be happy to submit it for public consumption and criticism (I was &lt;em&gt;still&lt;/em&gt; refactoring it while writing this post).&lt;/p&gt; &lt;p&gt;If the intention is for someone to complete as many of the requirements as they can &lt;em&gt;within&lt;/em&gt; that fixed 1 hour time frame, with the end result considered through the lens of that artificial constraint, then that should be made explicit.&lt;/p&gt; &lt;p&gt;Regardless, I think it would probably be for the best to just remove that line, and allow candidates attempting this test to just focus on submitting their best attempt, and keep &lt;a href=&quot;https://en.wikipedia.org/wiki/Impostor_syndrome&quot;&gt;imposter syndrome&lt;/a&gt; at bay for that little bit longer.&lt;/p&gt; &lt;h2 id=&quot;general-approach&quot;&gt;General Approach&lt;/h2&gt; &lt;p&gt;Since the requirements around this application focus on it being a Ruby on Rails application, I decided to go as “vanilla” as possible with Rails.&lt;/p&gt; &lt;p&gt;This meant no explicit addition by me of any custom &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;Javascript&lt;/a&gt;, or any front-end frameworks that use it, to help out with things like filtering or sorting information.&lt;/p&gt; &lt;p&gt;I also tried to add the least amount of third-party non-Rails-default gems as possible, only using:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/alassek/activerecord-pg_enum&quot;&gt;ActiveRecord::PGEnum&lt;/a&gt;, due to its nice developer ergonomics in dealing with &lt;a href=&quot;https://www.postgresql.org/docs/current/datatype-enum.html&quot;&gt;Postgres Enumerated Types&lt;/a&gt; (more about why they were even needed later…)&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/drapergem/draper&quot;&gt;Draper&lt;/a&gt; for &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorators&lt;/a&gt;: I really do not like using &lt;a href=&quot;https://api.rubyonrails.org/classes/ActionController/Helpers.html&quot;&gt;Rails helpers&lt;/a&gt; for &lt;a href=&quot;https://en.wikipedia.org/wiki/Presentation_logic&quot;&gt;presentation logic&lt;/a&gt;, preferring instead to keep it attached to the object being rendered; raw data can come from the &lt;a href=&quot;https://guides.rubyonrails.org/active_record_basics.html&quot;&gt;Rails model&lt;/a&gt; class, while transforming that data for display in a &lt;a href=&quot;https://guides.rubyonrails.org/action_view_overview.html&quot;&gt;Rails view&lt;/a&gt; can come from a decorator&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/kaminari/kaminari&quot;&gt;Kaminari&lt;/a&gt; for &lt;a href=&quot;https://en.wikipedia.org/wiki/Pagination&quot;&gt;pagination&lt;/a&gt;, as I think it is currently the best gem for it&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;user-interface&quot;&gt;User Interface&lt;/h2&gt; &lt;p&gt;Since interface design and making things pretty in general is a weak-point for me, I used this test as an excuse to give &lt;a href=&quot;https://tailwindcss.com/&quot;&gt;Tailwind CSS&lt;/a&gt; a try in order to style everything on the page (I have used &lt;a href=&quot;https://tachyons.io/&quot;&gt;Tachyons&lt;/a&gt; before on other toy projects, so I am generally positive to the &lt;a href=&quot;https://tailwindcss.com/docs/utility-first&quot;&gt;utility-first CSS&lt;/a&gt; concept), as well as use &lt;a href=&quot;https://tailwindui.com/&quot;&gt;Tailwind UI&lt;/a&gt; to (hopefully) grab ready-made code for certain types of components.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/2021-05-09/screenshot.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt; &lt;p&gt;For the most part, this was true for the following parts of the app:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;data table&lt;/li&gt; &lt;li&gt;upload button&lt;/li&gt; &lt;li&gt;search bar&lt;/li&gt; &lt;li&gt;pagination widget&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;But, as would be expected, it was not all quite as simple as &lt;a href=&quot;https://en.wikipedia.org/wiki/Plug_and_play&quot;&gt;plug and play&lt;/a&gt;. Integrating Tailwind into the Kaminari-generated pagination views probably took the most amount of time. But, I got there in the end, and am generally pleased with how it looks for the time spent on it.&lt;/p&gt; &lt;p&gt;For the most part, I left any long Tailwind-mnemonic-filled class strings as they were in the Rails view files. However, when those strings became too long, and generally difficult to read, I extracted them into separate &lt;a href=&quot;https://sass-lang.com/documentation/syntax&quot;&gt;SCSS&lt;/a&gt; files using Tailwind’s &lt;a href=&quot;https://tailwindcss.com/docs/functions-and-directives#apply&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@apply&lt;/code&gt;&lt;/a&gt; directive (see files under the &lt;a href=&quot;https://github.com/paulfioravanti/sentia-coding-test/tree/main/app/javascript/stylesheets&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/javascript/stylesheets/&lt;/code&gt;&lt;/a&gt; directory). I think I will likely continue to use this kind of strategy in the future with Tailwind class strings.&lt;/p&gt; &lt;p&gt;Overall, I am happy to have been able to stand on the Tailwind ecosystem’s shoulders to build out the user interface, and will definitely consider using it again in future projects.&lt;/p&gt; &lt;h2 id=&quot;data-issues&quot;&gt;Data Issues&lt;/h2&gt; &lt;p&gt;Turning our gaze towards the provided dataset that the application must be able to import, there is no doubt that the CSV file deliberately contains some corrupt/bad data that you are meant to be able to &lt;a href=&quot;https://en.wikipedia.org/wiki/Defensive_programming&quot;&gt;program defensively&lt;/a&gt; against.&lt;/p&gt; &lt;p&gt;My general intentions were to only &lt;em&gt;not&lt;/em&gt; import an entry where the requirements specifically said not to (i.e. a person without an affiliation should be skipped), and where the data could not be &lt;em&gt;reasonably&lt;/em&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_wrangling&quot;&gt;munged&lt;/a&gt; into an acceptable format.&lt;/p&gt; &lt;div style=&quot;margin: auto; text-align: center; width: 90%;&quot;&gt; &lt;figure style=&quot;display: block&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-09/perhaps-archives-incomplete.jpg&quot; alt=&quot;80sfy.com screenshot&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;h3 id=&quot;mis-spellings&quot;&gt;Mis-spellings&lt;/h3&gt; &lt;p&gt;So, this meant that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lightsaber~!@@@&lt;/code&gt; could just be stripped of non-alphanumeric characters and become a valid &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lightsaber&lt;/code&gt; weapon, but there were also issues around mis-spellings in the data, where I needed to give the application more knowledge around what kind of values it could expect to find in the CSV file, and what those values actually &lt;em&gt;should&lt;/em&gt; be.&lt;/p&gt; &lt;p&gt;This occurred in the form of a &lt;a href=&quot;https://ruby-doc.org/core/Hash.html&quot;&gt;Hash&lt;/a&gt; that maps values known to be found in the CSV file to their correct values:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/services/data_importer/enum_field_parser.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;MISSPELLINGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Yoda&apos;s Hutt&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Yoda&apos;s Hut&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Naboo N-1 Starfigher&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Naboo N-1 Starfighter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jabba&apos;s Sale Barge&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jabba&apos;s Sail Barge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tiefighter&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TIE Fighter&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;I am pretty sure that &lt;a href=&quot;https://en.wikipedia.org/wiki/Yoda&quot;&gt;Yoda&lt;/a&gt; does not own a pet &lt;a href=&quot;https://en.wikipedia.org/wiki/Jabba_the_Hutt&quot;&gt;Jabba&lt;/a&gt;, nor is Jabba’s &lt;a href=&quot;https://starwars.fandom.com/wiki/Sail_barge&quot;&gt;mode of transport&lt;/a&gt; a retail outlet.&lt;/p&gt; &lt;p&gt;Anyway, it is not possible for me to tell whether the introduction of these mis-spellings was deliberate in order to see if a candidate picked up on them, but I am going to wager that these &lt;em&gt;were&lt;/em&gt; actually just typos, and the necessity for this kind of handling was not intentional.&lt;/p&gt; &lt;h3 id=&quot;value-validity&quot;&gt;Value Validity&lt;/h3&gt; &lt;p&gt;Under &lt;a href=&quot;https://en.wikipedia.org/wiki/C-3PO&quot;&gt;C-3PO&lt;/a&gt;’s entry, the value for the Vehicle is given as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;: an obvious ploy to make sure that you do not actually store this value in a Person’s vehicle field.&lt;/p&gt; &lt;p&gt;However, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; is not a valid entry, it then stands to reason that I cannot trust &lt;em&gt;any&lt;/em&gt; of those values in the file, and, therefore, need to give the application advance knowledge on &lt;em&gt;what&lt;/em&gt; vehicles it can accept as valid.&lt;/p&gt; &lt;p&gt;This meant that for a Person entry, I ended up making &lt;em&gt;every value&lt;/em&gt; provided for a non-name-related field an &lt;a href=&quot;https://en.wikipedia.org/wiki/Enumerated_type&quot;&gt;enumerated type&lt;/a&gt;: both in the application, and at the database level.&lt;/p&gt; &lt;p&gt;The fact that there was the spelling mistake for Yoda’s location also made me assign enumerated types for the names of Locations and Affiliations. The application really does have too much advance knowledge of the limited scope of valid values it could get from the CSV file, but I did not see any other way around this while still ensuring data correctness.&lt;/p&gt; &lt;h3 id=&quot;names&quot;&gt;Names&lt;/h3&gt; &lt;p&gt;The requirements assume that the name values in the CSV file can be split out into &lt;em&gt;first_name&lt;/em&gt; and &lt;em&gt;last_name&lt;/em&gt;, which, taken at face value, they certainly can.&lt;/p&gt; &lt;p&gt;However, this leads to the issue of having a table that looks like this for some values:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;First Name&lt;/th&gt; &lt;th&gt;Last Name&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Princess&lt;/td&gt; &lt;td&gt;Leia&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Darth&lt;/td&gt; &lt;td&gt;Vader&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Kylo&lt;/td&gt; &lt;td&gt;Ren&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Jabba&lt;/td&gt; &lt;td&gt;The Hutt&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Some nerds should have looked over this data before it went public because &lt;em&gt;&lt;a href=&quot;https://knowyourmeme.com/memes/ackchyually&quot;&gt;ackchyually&lt;/a&gt;…&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;“Princess” is a title, not a name, and “Leia” is &lt;a href=&quot;https://en.wikipedia.org/wiki/Princess_Leia&quot;&gt;Leia Organa&lt;/a&gt;’s first name&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://starwars.fandom.com/wiki/Darth&quot;&gt;“Darth” is a title&lt;/a&gt;, not a name, and “&lt;a href=&quot;https://en.wikipedia.org/wiki/Darth_Vader&quot;&gt;Vader&lt;/a&gt;” is more like a first name&lt;/li&gt; &lt;li&gt;“Ren” is not a last name, but is from &lt;a href=&quot;https://starwars.fandom.com/wiki/Knights_of_Ren&quot;&gt;Knights of Ren&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Kylo_Ren&quot;&gt;Kylo Ren&lt;/a&gt; used it more like a title once he became the inheritor of Ren’s Knights&lt;/li&gt; &lt;li&gt;“The Hutt” is not a last name, but refers to the &lt;a href=&quot;https://starwars.fandom.com/wiki/Hutt&quot;&gt;Hutt species&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;So, although not part of the requirements, I figured that this meant the application really needed to deal with the concept of name prefixes (titles etc) and &lt;a href=&quot;https://en.wikipedia.org/wiki/Suffix_(name)&quot;&gt;suffixes&lt;/a&gt; (you may have noticed their inclusion in the screenshot above).&lt;/p&gt; &lt;p&gt;Also, for names like Jabba The Hutt and &lt;a href=&quot;https://en.wikipedia.org/wiki/Jar_Jar_Binks&quot;&gt;Jar Jar Binks&lt;/a&gt;, without the application knowing in advance that “The Hutt” is a suffix, it would not be able to tell the which words in either of those names comprise the &lt;em&gt;first_name&lt;/em&gt; or &lt;em&gt;last_name&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;The ability to deal with the name situation was made a bit more straightforward thanks to Ruby 3.0’s &lt;a href=&quot;https://docs.ruby-lang.org/en/3.0.0/doc/syntax/pattern_matching_rdoc.html&quot;&gt;pattern matching&lt;/a&gt; capabilities. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_name&lt;/code&gt; method below returns an array containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[prefix, first_name, last_name, suffix]&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/services/data_importer/person_parser.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:upcase_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_parts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Darth&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Princess&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ren&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hutt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The Hutt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_parts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Something like the method above is, of course, doable without pattern matching, but I think the terseness above really helps in understanding how specific data shapes are pin-pointed, and then transformed into the desired output.&lt;/p&gt; &lt;h2 id=&quot;application-code&quot;&gt;Application Code&lt;/h2&gt; &lt;p&gt;Having spent more time with &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional&lt;/a&gt; languages like &lt;a href=&quot;https://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt; and &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; recently, I definitely found their influence creeping into the way I want to write &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I definitely do not consider this a bad thing, nor do I (subjectively) think that the code reads less Ruby/Rails-like as a result (though I have, happily, challenged some Rails conventions). But, let’s have a look at some examples of main the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt;-related controller and model of the application and you can judge for yourself.&lt;/p&gt; &lt;h3 id=&quot;controller&quot;&gt;Controller&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/controllers/people_controller.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PeopleController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sort_people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:paginate_people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:decorate_people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort_people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PeopleSorter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort_column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort_direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort_column&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@sort_column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort_column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort_direction&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@sort_direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SortDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;determine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;paginate_people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sorted_people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Paginator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paginate_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sorted_people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorate_people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paginated_people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PersonDecorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decorate_collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paginated_people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;context: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;sort_column: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort_column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;sort_columns: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort_columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;sort_direction: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort_direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;A few notes about this code:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The code that assigns to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@people&lt;/code&gt; instance variable is written in a style mimicking the &lt;a href=&quot;https://elixir-lang.org/getting-started/enumerables-and-streams.html#the-pipe-operator&quot;&gt;Elixir pipeline operator&lt;/a&gt;, through the use of Ruby’s &lt;a href=&quot;https://ruby-doc.org/core/Kernel.html#method-i-then&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel#then&lt;/code&gt;&lt;/a&gt; method (aka &lt;a href=&quot;https://ruby-doc.org/core/Kernel.html#method-i-yield_self&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel#yield_self&lt;/code&gt;&lt;/a&gt;). The collection of people that originally gets fetched from the database goes through a series of transformations (filtered via search -&amp;gt; sorted -&amp;gt; paginated -&amp;gt; decorated) before being handed off to the view, so I thought this way of writing the main controller code would indicate that most clearly and explicitly.&lt;/li&gt; &lt;li&gt;I would have liked to have had the database do the sorting for me, rather than do it in Ruby-land, but the fact that sorting needed to happen on values contained in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt;’s associations (locations and affiliations), made it untenable.&lt;br /&gt; &lt;strong&gt;UPDATE 3 August 2021&lt;/strong&gt; &lt;em&gt;Narrator: &lt;a href=&quot;https://www.paulfioravanti.com/blog/coding-test-review-sentia/#update-3-august-2021-ordering-in-the-database&quot;&gt;it wasn’t untenable&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &lt;li&gt;I originally had the implementation code for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort_direction&lt;/code&gt; up in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationController&lt;/code&gt;, since it is not specific to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt;; putting it there would, I think, be considered Rails convention for code of that nature. But, rather than counting on someone looking at a method call, which has no local definition, and then &lt;em&gt;implicitly knowing&lt;/em&gt; that its definition could come from a &lt;a href=&quot;https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)#Subclasses_and_superclasses&quot;&gt;superclass&lt;/a&gt;, I decided to extract it into a small, named service module (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SortDirection&lt;/code&gt;), so there is an &lt;em&gt;explicit&lt;/em&gt; call-out (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SortDirection.determine&lt;/code&gt;). I do not generally like using &lt;a href=&quot;https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)&quot;&gt;inheritance&lt;/a&gt;, and will try and avoid it where I can.&lt;/li&gt; &lt;li&gt;I created a small &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Paginator&lt;/code&gt; service module with the intention of keeping knowledge about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kaminari&lt;/code&gt; restricted to it. Who knows, maybe I might want to change over to something like &lt;a href=&quot;https://github.com/mislav/will_paginate&quot;&gt;will_paginate&lt;/a&gt; one day, and organising the code like this, using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Adapter_pattern&quot;&gt;Adapter pattern&lt;/a&gt;, will mean no changes will be required in the controller (yes, fine, guilty of &lt;a href=&quot;https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it&quot;&gt;YAGNI&lt;/a&gt; since this just a coding test, but I have no regrets…).&lt;/li&gt; &lt;li&gt;Both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort_column&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort_direction&lt;/code&gt; are needed in the view, as well as in the controller. I have seen many codebases use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)&quot;&gt;encapsulation&lt;/a&gt;-busting &lt;a href=&quot;https://api.rubyonrails.org/classes/AbstractController/Helpers/ClassMethods.html#method-i-helper_method&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;helper_method&lt;/code&gt;&lt;/a&gt; method to allow controllers and views to share methods (I even used it in earlier iterations of this code). However, since decorators are being used in this application, this can be avoided by explicitly passing in whatever extra controller information is needed in presentation logic via a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; hash, that is only accessible within the confines of the decorator class.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;model&quot;&gt;Model&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models/person.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PGEnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;species: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SPECIES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;gender: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GENDERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;weapon: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEAPONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;vehicle: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VEHICLES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:loyalties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:affiliations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :loyalties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:residences&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :residences&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:affiliations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;references&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:affiliations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort_column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort_columns&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SORT_COLUMNS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first_affiliation_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affiliations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;affiliation_names&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affiliations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first_location_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;location_names&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;A few notes about this code:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;All methods return data only. Nothing here is responsible for returning formatted strings, or anything else that is meant for display purposes: that is strictly the job of the decorators.&lt;/li&gt; &lt;li&gt; &lt;p&gt;For functionality related to things like searching or sorting people, for the basic implementations I have done, it would probably be considered Rails convention to have that code live in &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveSupport/Concern.html&quot;&gt;Rails concerns&lt;/a&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; those modules in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; class to make their methods available.&lt;br /&gt; Like inheritance, I really do not like using &lt;a href=&quot;https://en.wikipedia.org/wiki/Object_composition&quot;&gt;composition&lt;/a&gt; in this way, as I feel that it is too implicit as well. Perhaps if Ruby had something akin to Elixir’s &lt;a href=&quot;https://elixir-lang.org/getting-started/alias-require-and-import.html#import&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel.SpecialForms.import/2&lt;/code&gt;&lt;/a&gt;, where you could explicitly enumerate the methods to import (something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include Search, only: :search_query&lt;/code&gt;), then I would probably be more favourably inclined to them.&lt;br /&gt; So, instead, I opted for what I would consider a more Ruby-ish than Rails-ish way of separating the code, through the use of what is apparently called &lt;a href=&quot;https://en.wikipedia.org/wiki/Class_(computer_programming)#Partial&quot;&gt;partial classes&lt;/a&gt; to achieve &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;separation of concerns&lt;/a&gt;: essentially, re-opening the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; class in separate files, and putting code in small &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; modules for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Search&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sort&lt;/code&gt;, and then have the model explicitly call them (eg &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Search.query&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sort.column&lt;/code&gt;). For example:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models/person/search.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Search&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SEARCH_QUERY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;squish&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; prefix ILIKE :search OR first_name ILIKE :search OR last_name ILIKE :search OR suffix ILIKE :search OR locations.name::text ILIKE :search OR species::text ILIKE :search OR gender::text ILIKE :search OR affiliations.name::text ILIKE :search OR weapon::text ILIKE :search OR vehicle::text ILIKE :search &lt;/span&gt;&lt;span class=&quot;no&quot;&gt; SQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private_constant&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:SEARCH_QUERY&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;module_function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SEARCH_QUERY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;search: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private_constant&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Search&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;p&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt; could easily be copy and pasted back into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models/person.rb&lt;/code&gt;, but having it here “removes the clutter” from the model class itself, while still being encapsulated within it. And yes, &lt;a href=&quot;https://ruby-doc.org/core/Module.html#method-i-private_constant&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private_constant&lt;/code&gt;&lt;/a&gt; can be used with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt; to make sure that code like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person::Search&lt;/code&gt; cannot be used outside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; class.&lt;/p&gt; &lt;p&gt;See the &lt;a href=&quot;https://github.com/paulfioravanti/sentia-coding-test/tree/main/app/models/person&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models/person/&lt;/code&gt;&lt;/a&gt; directory for the other examples.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Although I do think there are areas where the coding test requirements could be improved, particularly in the data set, overall, I am left with an overall positive impression of it since it was the catalyst for me to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;play with Tailwind, which I will definitely use again in the future&lt;/li&gt; &lt;li&gt;re-think some of the ways I have been writing Rails controller and model code&lt;/li&gt; &lt;li&gt;generally learn me some new things&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;So, if you are looking to up your coding game whilst padding your online portfolio, I can definitely recommend using coding tests as a way to do so!&lt;/p&gt; &lt;h2 id=&quot;update-3-august-2021-ordering-in-the-database&quot;&gt;UPDATE 3 August 2021: Ordering in the Database&lt;/h2&gt; &lt;p&gt;My friend &lt;a href=&quot;https://twitter.com/aarondeadman&quot;&gt;Aaron&lt;/a&gt; left &lt;a href=&quot;https://www.paulfioravanti.com/blog/coding-test-review-sentia/#comment-5454123121&quot;&gt;a comment&lt;/a&gt; asking about my statement concerning ordering on associated records:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;“the fact that sorting needed to happen on values contained in a Person’s associations (locations and affiliations) made it [sorting using the database] untenable.”&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Is this a limitation of ActiveRecord? It seems like Postgres should be able to handle this but I might be missing some of the nuance.&lt;/strong&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;My rationale for not being able to sort the list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; records based on values in their associations was that those values were essentially &lt;em&gt;unknowable&lt;/em&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; query: it would only be &lt;em&gt;after&lt;/em&gt; its associations were fetched from the database that we would be able to loop over them, using Ruby in this case, to find out the exact values of the first affiliation and location names.&lt;/p&gt; &lt;p&gt;But, was this rationale correct? I could not help myself, so I took the bait and dove down this rabbit hole to find out. First, though, a minor detour down a separate, but slightly shallower, rabbit hole.&lt;/p&gt; &lt;h3 id=&quot;ordering-was-broken-anyway&quot;&gt;Ordering was broken anyway&lt;/h3&gt; &lt;p&gt;On re-opening this codebase, I realised that in my haste to be done with it, I had failed to notice that the location and affiliation names were not &lt;em&gt;always&lt;/em&gt; displaying in alphabetical order as expected.&lt;/p&gt; &lt;p&gt;There did not seem to be an obvious reason as to why…until I went for a dive in Rails’ Github repo, where it became apparent that there is a &lt;a href=&quot;https://github.com/rails/rails/issues/6769&quot;&gt;very long-running issue&lt;/a&gt; regarding ordering clauses on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_many&lt;/code&gt; relationships being ignored or lost when using an &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-includes&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes&lt;/code&gt;&lt;/a&gt; statement, which I definitely was in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person.search&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes&lt;/code&gt; would seem to &lt;a href=&quot;https://stackoverflow.com/a/11947303/567863&quot;&gt;delegate your query generation strategy to Rails itself&lt;/a&gt; (ie let Rails decide whether to load association data in a separate query, or in one big join-based query), which is a probably a good rule-of-thumb, because who could just instinctively know that? (Not me). Anyway, it would seem that this ordering issue would require some manual intervention.&lt;/p&gt; &lt;p&gt;Figuring out &lt;a href=&quot;https://blog.arkency.com/2013/12/rails4-preloading/&quot;&gt;which flavour of association preloading&lt;/a&gt; would not cause an error, give me the output I expected, and not cause any N+1 issues, was mostly trial and error. I finally got to &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-preload&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preload&lt;/code&gt;&lt;/a&gt;, and my house of cards gained a bit of stability with the following change:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models/person.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:affiliations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Great! Side quest over, and we are back to zero! Time to get back to the main mission!&lt;/p&gt; &lt;h3 id=&quot;lateral-support&quot;&gt;Lateral Support&lt;/h3&gt; &lt;p&gt;So, can &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;Postgres&lt;/a&gt; do something akin to what we have done with the current Ruby-based sorting code and essentially &lt;a href=&quot;https://heap.io/blog/postgresqls-powerful-new-join-type-lateral&quot;&gt;“loop over each entry in a result set and evaluate a subquery using that row as a parameter”&lt;/a&gt;?&lt;/p&gt; &lt;p&gt;It certainly can: with &lt;a href=&quot;https://www.postgresql.org/docs/13/queries-table-expressions.html#QUERIES-LATERAL&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LATERAL&lt;/code&gt; subqueries&lt;/a&gt;, introduced back in Postgres version 9.3, so it seems like I have not been keeping up to date with improvements in the database world! Anyway, let’s see how we can leverage it to push more query logic out of Ruby-land and into database-land.&lt;/p&gt; &lt;h4 id=&quot;add-attributes&quot;&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attribute&lt;/code&gt;s&lt;/h4&gt; &lt;p&gt;First, though, since we are now planning for the database to give us a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_affiliation_name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_location_name&lt;/code&gt;, we will be able to treat them just like any of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt;’s other fields. Therefore, let’s add some virtual &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/Attributes/ClassMethods.html#method-i-attribute&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attribute&lt;/code&gt;&lt;/a&gt;s to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; model to hold that information for when we receive it, and remove the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_x_name&lt;/code&gt; methods:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models/person.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first_affiliation_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first_location_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;create-association-queries&quot;&gt;Create association queries&lt;/h4&gt; &lt;p&gt;Now, let’s create some queries that intend to populate those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attribute&lt;/code&gt;s. Since both the queries will be similar in nature, let’s give them the same name on each model: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Affiliation.first_name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location.first_name&lt;/code&gt;. We will start with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Affiliation&lt;/code&gt; query, build it out, and then replicate the logic across to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; query.&lt;/p&gt; &lt;p&gt;For the first affiliation name of any given person, we want to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;join the people table on the given person’s ID&lt;/li&gt; &lt;li&gt;order the affiliations by their name&lt;/li&gt; &lt;li&gt;limit the number of affiliations to 1 to get only the first one&lt;/li&gt; &lt;li&gt;select only that affiliation’s name&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here is what a first cut of that method might look like:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models/affiliation.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Affiliation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;people.id = ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Let’s give it a try in a Rails console with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; whom we know has multiple affiliations, Leia Organa:&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;first_name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Leia&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Person:0x00007fd427581bc0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Affiliation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;Affiliation:0x00007fd3f70afcf8 id: nil, name: &quot;Galactic Republic&quot;&amp;gt;]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Okay, this looks like the correct information is at least being returned and populated, so it is a good start.&lt;/p&gt; &lt;p&gt;The problem now is that we cannot use this method as-is moving forward: the database is not going to be able to execute this Ruby-land method, passing in an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; parameter. We need to have the database fill it in during the course of a lateral join (which will make it &lt;em&gt;unknowable&lt;/em&gt; to Ruby). Also, since the join is over a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_many :through&lt;/code&gt; relationship, we will have to change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;joins&lt;/code&gt; target to be the join-table (in this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loyalties&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Here is how the method will need to change:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models/affiliation.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Affiliation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:loyalties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loyalties.person_id = people.id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Affiliation.first_name&lt;/code&gt; method can now &lt;em&gt;not&lt;/em&gt; be run in isolation in Ruby-land, as there is no context on where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;people.id&lt;/code&gt; comes from:&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Affiliation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doesn&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;support&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#inspect)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;people.id&lt;/code&gt; essentially stands in for a database-land local loop variable that will be “passed in” from some other (as-yet unknown) outer query that will laterally join with it, and provide the context for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;people&lt;/code&gt; table.&lt;/p&gt; &lt;p&gt;The query in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; will change in a similar way:&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:residences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;residences.person_id = people.id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;lateral-joining&quot;&gt;Lateral Joining&lt;/h4&gt; &lt;p&gt;Now that we have our association subqueries created, let’s see how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person.search&lt;/code&gt; code will change when it uses them:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models/person.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:affiliations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Lateral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:join_first_association_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DEFAULT_SORT_COLUMN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;After the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:affiliations&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:locations&lt;/code&gt; have been &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preload&lt;/code&gt;ed, the query is piped into a new method, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;join_first_association_names&lt;/code&gt;, inside of a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lateral&lt;/code&gt; module (naming things is hard…) that is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; model:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models/person/lateral.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lateral&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FIRST_ASSOCIATION_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;squish&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; JOIN LATERAL (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sql&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;) AS &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_alias&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;) ON true &lt;/span&gt;&lt;span class=&quot;no&quot;&gt; SQL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private_constant&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:FIRST_ASSOCIATION_NAME&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;module_function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;join_first_association_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_affiliation_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_location_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;private_class_method&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first_affiliation_name&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FIRST_ASSOCIATION_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Affiliation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:affiliation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first_affiliation_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;private_class_method&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first_location_name&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FIRST_ASSOCIATION_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first_location_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private_constant&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Lateral&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;There is currently no nice ActiveRecord database-agnostic API that wraps around lateral joins, so we need to resort to direct string interpolation in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIRST_ASSOCIATION_NAME&lt;/code&gt; lambda, which generates the lateral join subquery. It does the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Converts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_name&lt;/code&gt; association queries we built earlier into SQL statements and marks it as the target for the lateral join&lt;/li&gt; &lt;li&gt;Specifies the field name that the result of the query should be returned as. In this case, they have been named the same as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attribute&lt;/code&gt;s in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; model where that information is intended to be stored: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_affiliation_name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_location_name&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Specifies a &lt;a href=&quot;https://www.postgresql.org/docs/current/rowtypes.html#ROWTYPES-USAGE&quot;&gt;table alias&lt;/a&gt;, needed by the join to extract the returned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_x_name&lt;/code&gt; (otherwise it looks like the &lt;a href=&quot;https://stackoverflow.com/q/67047907/567863&quot;&gt;“lateral join is returning a value with parenthesis”&lt;/a&gt;). The names given in the methods for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;table_alias&lt;/code&gt; parameter have no special meaning. They could have been named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t2&lt;/code&gt;: they just need to be unique&lt;/li&gt; &lt;li&gt;Indicates via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ON true&lt;/code&gt; clause that there is no filtering condition, and that the full result of the lateral join should be returned, which in this case is only that single name value.&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;fixing-search&quot;&gt;Fixing Search&lt;/h4&gt; &lt;p&gt;The final major change that now needs to happen to make everything work as expected is to update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Search.query&lt;/code&gt; method in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; class with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;joins&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group&lt;/code&gt; clause, so that it can still perform searches on associated data, and is aware of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt;’s new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attribute&lt;/code&gt;s:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models/person/search.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Search&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SEARCH_QUERY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;module_function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:affiliations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SEARCH_QUERY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;search: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first_affiliation_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first_location_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private_constant&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Search&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;code-clean-up&quot;&gt;Code Clean Up&lt;/h3&gt; &lt;p&gt;Now that the database is doing the heavy lifting on ordering associations, a swath of related Ruby code can now be confidently deleted:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PeopleSorter&lt;/code&gt; module now has no reason to exist, so it can be removed&lt;/li&gt; &lt;li&gt;Since we are now paginating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person::ActiveRecord_Relation&lt;/code&gt; now, rather than an array that got returned by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PeopleSorter&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Paginator&lt;/code&gt; module that was created to wrap around the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kaminari.paginate_array&lt;/code&gt; method, can also be removed&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;These two changes have now reduced the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; code in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PeopleController&lt;/code&gt; to be just:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/controllers/people_controller.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PeopleController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort_column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort_direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:decorate_people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Less code, less to maintain! All these changes have been pushed up to the &lt;a href=&quot;https://github.com/paulfioravanti/sentia-coding-test&quot;&gt;Sentia Coding Test codebase&lt;/a&gt;, so feel free to have a browse or run the code for yourself.&lt;/p&gt;</content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="ruby"/><category term="rails"/><category term="coding-test"/><category term="star-wars"/><category term="data-parsing"/><category term="tailwind"/><category term="enum"/><category term="draper"/><category term="kaminari"/><category term="tachyons"/><category term="pattern-matching"/><category term="lateral-join"/><category term="preloading"/><summary type="html">A long SQL query in a database far, far away....</summary></entry><entry><title type="html">░▒▓ＥＬＭＳＴＨＥＴＩＣＳ▓▒░</title><link href="https://www.paulfioravanti.com/blog/elmsthetics/" rel="alternate" type="text/html" title="░▒▓ＥＬＭＳＴＨＥＴＩＣＳ▓▒░"/><published>2021-05-02T13:40:00+10:00</published><updated>2021-05-02T13:40:00+10:00</updated><id>https://www.paulfioravanti.com/blog/elmsthetics</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/elmsthetics/">&lt;p&gt;&lt;a href=&quot;http://www.80sfy.com/&quot;&gt;80sfy.com&lt;/a&gt;, by &lt;a href=&quot;http://www.digitalbloc.com/&quot;&gt;Art Sangurai&lt;/a&gt;, is a pretty cool site if you love &lt;a href=&quot;https://en.wikipedia.org/wiki/Synthwave&quot;&gt;synthwave&lt;/a&gt; music or the 1980s in general.&lt;/p&gt; &lt;p&gt;It uses a &lt;a href=&quot;https://soundcloud.com/&quot;&gt;SoundCloud&lt;/a&gt; and &lt;a href=&quot;https://giphy.com/&quot;&gt;Giphy&lt;/a&gt; combination for maximum &lt;span style=&quot;color: #ff2975; font-weight: bold;&quot;&gt;ＡＥＳＴＨＥＴＩＣ&lt;/span&gt; effect to make you &lt;span style=&quot;color: #42c6ff; font-weight: bold&quot;&gt;ＦＥＥＬ &lt;/span&gt; all the nostalgias, which got it &lt;a href=&quot;https://www.reddit.com/r/outrun/comments/5rdvks/my_boyfriend_made_a_website_that_plays_synthwave/&quot;&gt;a lot of love on Reddit&lt;/a&gt;.&lt;/p&gt; &lt;div style=&quot;margin: auto; text-align: center; width: 90%;&quot;&gt; &lt;figure style=&quot;display: block&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/80sfy-screenshot.png&quot; alt=&quot;80sfy.com screenshot&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;It is programmed primarily in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;Javascript&lt;/a&gt; with the &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; library. So, I decided to re-create it using &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; because why not, but also just because…&lt;/p&gt; &lt;div style=&quot;margin: auto; text-align: center; width: 80%;&quot;&gt; &lt;figure style=&quot;display: block&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/programming-in-elm-is-rad.jpg&quot; alt=&quot;Programming in Elm is pretty rad!&quot; /&gt; &lt;figcaption style=&quot;text-align: center;&quot;&gt; Retro Wave at &lt;a href=&quot;https://photofunia.com/categories/all_effects/retro-wave&quot;&gt;PhotoFunia&lt;/a&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;You can see the results of those efforts here:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://www.paulfioravanti.com/80sfy/&quot;&gt;Elm 80sfy Website&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/paulfioravanti/80sfy&quot;&gt;Elm 80sfy Codebase&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the technical details of coding with Elm aren’t your thing, you can stop reading here and just go and enjoy some &lt;a href=&quot;https://www.paulfioravanti.com/80sfy/&quot;&gt;ＯＵＴＲＵＮ beats&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Still here? Okay, man, let’s talk some Elm learnings. Open up the codebase and follow along.&lt;/p&gt; &lt;h2 id=&quot;first-you-gotta-do-the-random-shuffle&quot;&gt;First, you gotta do the Random Shuffle&lt;/h2&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/chunk-glitched.png&quot; alt=&quot;Chunk from the Goonies&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;There are two scenarios in the 80sfy application where an element of randomness is required:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Shuffling the order of tracks to be played in the SoundCloud playlist&lt;/li&gt; &lt;li&gt;Getting a random animated &lt;a href=&quot;https://en.wikipedia.org/wiki/GIF&quot;&gt;GIF&lt;/a&gt; URL from Giphy: the application supplies a random descriptive tag, and Giphy sends back a URL that is relevant to that tag&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Unlike many other programming languages, there is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.random()&lt;/code&gt; or equivalent function in Elm that allows you to summon random numbers and use them on the spot.&lt;/p&gt; &lt;p&gt;Generating random numbers, or doing anything involving randomness like randomly shuffling or picking an item from a list, is the responsibility of the &lt;a href=&quot;https://elmprogramming.com/elm-runtime.html&quot;&gt;Elm Runtime&lt;/a&gt;. In order get a random number, you need to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;code up a &lt;em&gt;description&lt;/em&gt; of the kind of random number you want to generate&lt;/li&gt; &lt;li&gt;send that description off to the Elm Runtime as a &lt;a href=&quot;https://package.elm-lang.org/packages/elm/core/latest/Platform.Cmd&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd&lt;/code&gt;&lt;/a&gt; to have the number generated for you&lt;/li&gt; &lt;li&gt;handle the resulting message you get returned from Elm Runtime containing the random number&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;creating-a-random-list-of-numbers&quot;&gt;Creating a Random List of Numbers&lt;/h3&gt; &lt;p&gt;Let’s have a look at a simplified-down example of the first scenario for randomising the order of tracks in a playlist. First though, a bit of context around how the SoundCloud &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;IFrame&lt;/a&gt; widget interacts with the Elm application.&lt;/p&gt; &lt;p&gt;The &lt;a href=&quot;https://developers.soundcloud.com/docs/api/html5-widget&quot;&gt;SoundCloud Widget API&lt;/a&gt; has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getSounds(callback)&lt;/code&gt; method that returns the list of sound objects in its playlist. In the Elm application, though, we do not need all of that information: as long as we can get the &lt;em&gt;length&lt;/em&gt; of the widget’s playlist, we can build up our own list of integer track indexes to determine the order that tracks should play.&lt;/p&gt; &lt;p&gt;When the Elm application wants to tell the SoundCloud player to play a track, it sends over an index number &lt;span style=&quot;font-family: serif; font-style: italic; font-size: larger;&quot;&gt; n&lt;/span&gt;, and the SoundCloud player “skips” over to track &lt;span style=&quot;font-family: serif; font-style: italic; font-size: larger;&quot;&gt;n &lt;/span&gt; in its playlist.&lt;/p&gt; &lt;div style=&quot;margin: auto; text-align: center; width: 100%;&quot;&gt; &lt;figure style=&quot;display: block&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/andy-organ-glitched.png&quot; alt=&quot;The Goonies on the bone piano&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;So, let’s pick up our story at the point when an Elm &lt;a href=&quot;https://package.elm-lang.org/packages/elm/core/latest/Platform.Sub&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sub&lt;/code&gt;scription&lt;/a&gt; has:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;received the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playlistLength&lt;/code&gt; via an incoming &lt;a href=&quot;https://guide.elm-lang.org/interop/ports.html&quot;&gt;Port&lt;/a&gt; message from Javascript (much more to say about ports later…)&lt;/li&gt; &lt;li&gt;wrapped it in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlaylistLengthFetched&lt;/code&gt; message&lt;/li&gt; &lt;li&gt;sent the message off to the Elm Runtime…&lt;/li&gt; &lt;li&gt;…which is then handled in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PlaylistLengthFetched&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlistLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generatePlaylist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generatePlaylist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Playlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlistLength&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlistLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlistLength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generatePlaylist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Here, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playlistLength&lt;/code&gt; value is passed off to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Playlist.generate&lt;/code&gt; function, which defines the generation of a shuffled list of track indexes, and returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd&lt;/code&gt; to get the Elm Runtime to do the work of actually generating the playlist. Let’s have a look at how that randomness is created:&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Playlist&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlistLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playlistLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackList&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PlaylistGenerated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Here, we specify that:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List.range&lt;/code&gt; should build a simple list of integers&lt;/li&gt; &lt;li&gt;the &lt;a href=&quot;https://package.elm-lang.org/packages/elm-community/random-extra/latest/Random-List#shuffle&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random.List.shuffle&lt;/code&gt;&lt;/a&gt; function from the &lt;a href=&quot;https://package.elm-lang.org/packages/elm-community/random-extra/latest&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random.Extra&lt;/code&gt;&lt;/a&gt; package, which returns a &lt;a href=&quot;https://package.elm-lang.org/packages/elm/random/latest/Random#Generator&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Generator&lt;/code&gt;&lt;/a&gt; from the &lt;a href=&quot;https://package.elm-lang.org/packages/elm/random/latest/Random&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random&lt;/code&gt;&lt;/a&gt; package, should shuffle the list&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We now have our recipe defined for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generator&lt;/code&gt; (&lt;em&gt;how&lt;/em&gt; we want a random number generated), so we:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;specify that we want to have the generated playlist sent back to us from the Elm Runtime wrapped in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlaylistGenerated&lt;/code&gt; message (defined as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlaylistGenerated (List Int)&lt;/code&gt; so the message has a place to hold the playlist)&lt;/li&gt; &lt;li&gt;send it off to the Elm Runtime with the &lt;a href=&quot;https://package.elm-lang.org/packages/elm/random/latest/Random#generate&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random.generate&lt;/code&gt;&lt;/a&gt; function&lt;/li&gt; &lt;li&gt;handle the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlaylistGenerated&lt;/code&gt; message from the Elm Runtime in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PlaylistGenerated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generatedPlaylist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Playlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handleNextTrackNumberRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generatedPlaylist&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playlistLength&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The details of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Playlist.handleNextTrackNumberRequest&lt;/code&gt; function are not needed for this example, but it essentially pops off the first number in the randomised &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generatedPlaylist&lt;/code&gt;, tells the SoundCloud widget to play the track in its playlist located at that index, and stores the remaining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playlist&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audioPlayer&lt;/code&gt; model.&lt;/p&gt; &lt;p&gt;But, the main point here is that we have requested the Elm Runtime to generate a random list of integers for us, it has done so, and we have been able to store it in our model! If you want to dig deeper, check out &lt;a href=&quot;https://github.com/paulfioravanti/80sfy/blob/master/src/AudioPlayer/Playlist.elm&quot;&gt;the real &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Playlist&lt;/code&gt; code&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;We have covered audio playlist generation, but in this application, you cannot have random tracks without random GIFs as well! This time though, rather than generate a list, we want to be able to randomly &lt;em&gt;pick&lt;/em&gt; a tag from a static list and send it off to Giphy, so let’s see how to do that.&lt;/p&gt; &lt;h3 id=&quot;randomly-picking-from-a-list&quot;&gt;Randomly Picking from a List&lt;/h3&gt; &lt;p&gt;When the 80sfy application first starts, it goes and fetches a list of descriptive string tags from a local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tags.json&lt;/code&gt; file, emitting a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TagsFetched&lt;/code&gt; message once that has been attempted, which is then handled in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function for the application’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecretConfig&lt;/code&gt; model (have you found the application’s secret config yet…? :wink:) in a similar way to the following:&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SecretConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TagsFetched&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateRandomTagForVideoPlayer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateRandomTagForVideoPlayer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoPlayerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generateRandomTag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoPlayerId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateRandomTagForVideoPlayer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateRandomTagForVideoPlayer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TagsFetched&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Err&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Once the tags have been read in, we store them in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secretConfig&lt;/code&gt; model, and then send out two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd&lt;/code&gt;s to generate random tags, one for each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;videoPlayer&lt;/code&gt; in the application (yes, there are two, which &lt;a href=&quot;https://en.wikipedia.org/wiki/Dissolve_(filmmaking)&quot;&gt;crossfade&lt;/a&gt; between each other).&lt;/p&gt; &lt;p&gt;Let’s take a closer look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tag.generateRandomTag&lt;/code&gt; function, that, like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Playlist.generate&lt;/code&gt; function earlier, is responsible for creating a random generator:&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateRandomTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateRandomTag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateRandomTag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoPlayerId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagsLength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagsLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomTagIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Generator&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomTagIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagsLength&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Generator&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomTagIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomTagGeneratedMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomTagGeneratedMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RandomTagGenerated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoPlayerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomTagGeneratedMsg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultTag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;80s&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withDefault&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultTag&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;It looks like randomly picking from a static list is a little bit more involved than generating a new random list. So, what’s going on?&lt;/p&gt; &lt;ul&gt; &lt;li&gt;We specify that &lt;a href=&quot;https://package.elm-lang.org/packages/elm/random/latest/Random#int&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random.int&lt;/code&gt;&lt;/a&gt; should generate a random index number between zero and the length of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tags&lt;/code&gt; list&lt;/li&gt; &lt;li&gt;We then use &lt;a href=&quot;https://package.elm-lang.org/packages/elm/random/latest/Random#map&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random.map&lt;/code&gt;&lt;/a&gt; to create the generator that transforms that random index into the tag at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;randomTagIndex&lt;/code&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tags&lt;/code&gt; list. (All lists in Elm are &lt;a href=&quot;https://en.wikipedia.org/wiki/Linked_list&quot;&gt;linked lists&lt;/a&gt;, with the potential to contain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nothing&lt;/code&gt; when we interrogate their contents, which explains the ceremony contained in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atIndex&lt;/code&gt; function, and why we cannot just write something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tags[index]&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;We then specify that we want to have the tag sent back to us wrapped in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RandomTagGenerated&lt;/code&gt; message (defined as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RandomTagGenerated String String&lt;/code&gt; so the message has a place to hold both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;videoPlayerId&lt;/code&gt; the tag is for, as well as the generated tag itself)&lt;/li&gt; &lt;li&gt;Finally, like in the previous example, we call &lt;a href=&quot;https://package.elm-lang.org/packages/elm/random/latest/Random#generate&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random.generate&lt;/code&gt;&lt;/a&gt; with the message to be handled in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generator&lt;/code&gt; itself&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RandomTagGenerated&lt;/code&gt; message is then handled in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function as follows:&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RandomTagGenerated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoPlayerId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomGifUrlFetchedMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomGifUrlFetchedMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RandomGifUrlFetched&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoPlayerId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetchRandomGifUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetchRandomGifUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gif&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchRandomGifUrl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomGifUrlFetchedMsg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;giphyApiKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetchRandomGifUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Once the Elm Runtime returns the randomly generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tag&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RandomTagGenerated&lt;/code&gt; message, along with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;videoPlayerId&lt;/code&gt; we specified ourselves in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generateRandomTag&lt;/code&gt; function, we use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gif.fetchRandomGifUrl&lt;/code&gt; function to make a HTTP call out to Giphy to request a GIF URL (details of which are available in &lt;a href=&quot;https://github.com/paulfioravanti/80sfy&quot;&gt;the codebase&lt;/a&gt;, but check out the &lt;a href=&quot;https://github.com/paulfioravanti/80sfy/blob/master/src/Tag.elm&quot;&gt;the real &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tag&lt;/code&gt; code&lt;/a&gt; for the details on picking random tags).&lt;/p&gt; &lt;div style=&quot;margin: auto; text-align: center; width: 100%;&quot;&gt; &lt;figure style=&quot;display: block&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/goonies-end-scene-glitched.png&quot; alt=&quot;The Goonies looking out at the Inferno&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;For more information on random generators, see the &lt;a href=&quot;https://guide.elm-lang.org/&quot;&gt;The Elm Guide&lt;/a&gt;’s &lt;a href=&quot;https://guide.elm-lang.org/effects/random.html&quot;&gt;Random section&lt;/a&gt;. If these two examples were too scoff-inducing-ly simple and you want some Hard Mode in your randomness, go check out &lt;a href=&quot;https://github.com/ckoster22&quot;&gt;Charlie Koster&lt;/a&gt;’s article &lt;em&gt;&lt;a href=&quot;https://ckoster22.medium.com/randomness-in-elm-8e977457bf1b&quot;&gt;Randomness in Elm&lt;/a&gt;&lt;/em&gt;, and let him bend your mind a bit.&lt;/p&gt; &lt;h2 id=&quot;i-am-a-msg-like-my-father-before-me&quot;&gt;I am a Msg, like my Father before me&lt;/h2&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/luke-skywalker-glitched.png&quot; alt=&quot;I am a Jedi, like my father before me.&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;&lt;a href=&quot;https://guide.elm-lang.org/&quot;&gt;The Elm guide&lt;/a&gt; is &lt;a href=&quot;https://guide.elm-lang.org/webapps/structure.html&quot;&gt;quite opinionated about Elm application structuring&lt;/a&gt;. While it advocates less structure and longer files, I find that as an application grows, I definitely prefer more structure and smaller files.&lt;/p&gt; &lt;p&gt;I like to have &lt;em&gt;thematically-related&lt;/em&gt; functions grouped together, just to aid in my own understanding of the code at a glance, which seems to push me towards what would seem to be considered a React-style(?) “components” way of thinking, so I will often use that word when referring to what are essentially the different “parts” of the application.&lt;/p&gt; &lt;p&gt;In my mind, the 80sfy application has a few “main” components in it:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VideoPlayer&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ControlPanel&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecretConfig&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When you press the “Play” button on the control panel, you start playing the audio &lt;em&gt;and&lt;/em&gt; start playing the GIF videos, so these different parts of the application need to be able to communicate with each other.&lt;/p&gt; &lt;p&gt;Of course all of these messages can live at the “top level” of the application, and the handling for every one of those messages can live inside one big &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function. However, there are times where I would rather have a separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer.Update&lt;/code&gt; “child” file, with its own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function, to handle thematically-similar messages specifically targeted at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt; from the “parent” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function, and a similar structure for the other components.&lt;/p&gt; &lt;p&gt;The main &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function can be the “trunk” of the application tree, which can handle its own top level messages, and each named component can have its own separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function that “branches off” that trunk. Each component branch can emit messages that communicate back up to the parent trunk itself, or to other sibling branch components via the parent trunk.&lt;/p&gt; &lt;p&gt;This kind of concept is explained in a way that resonated with me in &lt;em&gt;&lt;a href=&quot;https://medium.com/@alex.lew/the-translator-pattern-a-model-for-child-to-parent-communication-in-elm-f4bfaa1d3f98&quot;&gt;The Translator Pattern: a model for Child-to-Parent Communication in Elm&lt;/a&gt;&lt;/em&gt; by &lt;a href=&quot;http://alexlew.net&quot;&gt;Alex Lew&lt;/a&gt;. The “translator”, in this context, refers to a function that uses a dictionary of parent-level message types to “translate” child-level messages into parent-level messages. The burden of performing a message “translation” lies with the parent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function, before it is able to send any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd&lt;/code&gt;s off to the Elm Runtime.&lt;/p&gt; &lt;p&gt;I really liked the idea of some sort of parent-level message dictionary that child components could leverage when they generate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd&lt;/code&gt;s, but I found I needed to slightly tweak the way that parent-child &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd&lt;/code&gt; communication occurred, compared to Alex’s blog post, to get it all making sense in my own head.&lt;/p&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/anakin-redeemed-glitched.png&quot; alt=&quot;Anakin redeemed&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;So, let’s see how this way of thinking works in practice in the 80sfy application. I have adopted a naming convention of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msgs&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type alias&lt;/code&gt; that defines a record containing a list of all the top-level &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg&lt;/code&gt;s in the application, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dictionary&lt;/code&gt; for the function that returns the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msgs&lt;/code&gt; dictionary itself:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/Msg.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ControlPanel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SecretConfig&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Posix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VideoPlayer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ControlPanel&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ControlPanel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CrossFadePlayers&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Posix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KeyPressed&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NoOp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SecretConfig&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SecretConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ShowApplicationState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VideoPlayer&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VideoPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controlPanelMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ControlPanel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crossFadePlayersMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Posix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyPressedMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noOpMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portsMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretConfigMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SecretConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showApplicationStateMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoPlayerMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VideoPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controlPanelMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ControlPanel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crossFadePlayersMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CrossFadePlayers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyPressedMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KeyPressed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noOpMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NoOp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portsMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretConfigMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SecretConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showApplicationStateMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ShowApplicationState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoPlayerMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VideoPlayer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msgs&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dictionary&lt;/code&gt; are a mix of “top-level”-only messages, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CrossFadePlayers Posix&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NoOp&lt;/code&gt;, and messages like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer AudioPlayer.Msg&lt;/code&gt;, where the “top-level” or “parent” part of the message is meant to indicate which component’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function the message should be sent to (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;), and the constructor parameter (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer.Msg&lt;/code&gt;) is the specific message to be handled by the child component’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function.&lt;/p&gt; &lt;p&gt;The dictionary is initialised as soon as the application starts, in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function, and is passed into every function that needs to send top-level messages (ie all of them):&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/Main.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Browser&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Flags&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Program&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Flags&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;At this point, your &lt;a href=&quot;https://en.wiktionary.org/wiki/Spidey-sense&quot;&gt;spidey-sense&lt;/a&gt; may be tingling regarding passing in a record of global context this large (I do not consider it “global state” as-such since the dictionary content will never be transformed or “changed”) to the three main sections of the application.&lt;/p&gt; &lt;p&gt;Surely all ten &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg&lt;/code&gt; types in the dictionary are not needed in &lt;em&gt;every&lt;/em&gt; section of the application, right…? Correct, and that’s why we are going to lean on Elm’s &lt;a href=&quot;https://ckoster22.medium.com/advanced-types-in-elm-extensible-records-67e9d804030d&quot;&gt;Extensible Records&lt;/a&gt; types to help “filter” this dictionary down to the bare minimum of top-level messages that each part of the application needs to use.&lt;/p&gt; &lt;p&gt;Let’s see what this looks like in the top-level &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update&lt;/code&gt; function:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/Update.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portsMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretConfigMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SecretConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoPlayerMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VideoPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update&lt;/code&gt; module essentially &lt;em&gt;re-defines&lt;/em&gt; the type of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msgs&lt;/code&gt; record that is passed to it, restricting its entries down to only those top-level messages that it needs to care about. This helps to keep the record content more focused, and feel a bit less heavy than the record with ten entries that was originally passed in.&lt;/p&gt; &lt;p&gt;We got a 50% reduction in entries from the original record in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update&lt;/code&gt; module, so let’s see how much of one we get in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subscriptions&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/View.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controlPanelMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ControlPanel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noOpMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portsMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretConfigMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SecretConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showApplicationStateMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoPlayerMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VideoPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/Subscriptions.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controlPanelMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ControlPanel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crossFadePlayersMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Posix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyPressedMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noOpMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portsMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoPlayerMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VideoPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The reduction in entries is not quite as great for these two modules, but at least there &lt;em&gt;is&lt;/em&gt; a reduction, and the record can only get smaller as it gets passed down further into child components.&lt;/p&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/chewbacca-ewoks-glitched.png&quot; alt=&quot;Chewbacca and Ewoks&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;As an example, let’s follow the journey of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msgs&lt;/code&gt; record as it gets passed down into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt; child component from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update&lt;/code&gt; module:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/Update.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgForAudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgForAudioPlayer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parentMsgs&lt;/code&gt; are passed into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer.update&lt;/code&gt; function, along with whatever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msgForAudioPlayer&lt;/code&gt; needs to be handled there, as well as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model.audioPlayer&lt;/code&gt;, which for all intents and purposes becomes the “model” for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt; component.&lt;/p&gt; &lt;p&gt;Let’s see how the type definition has changed for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msgs&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt; component. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer.elm&lt;/code&gt; file acts as the gateway to all audio player-related functionality, with implementation details all hidden away in sub-modules (which we will talk about in more detail later on):&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/AudioPlayer.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function simply calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;’s own internal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update.update&lt;/code&gt; function, but the thing to notice here, is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parentMsgs&lt;/code&gt; is now defined in terms of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update.ParentMsgs msgs msg&lt;/code&gt; type: a further-filtered, child-component-defined record type that only contains the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parentMsgs&lt;/code&gt; that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function needs to use.&lt;/p&gt; &lt;p&gt;Notice also that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer.update&lt;/code&gt; is returning a lower-cased &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd msg&lt;/code&gt;, as apposed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd Msg&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update.update&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg&lt;/code&gt; here is a &lt;a href=&quot;https://guide.elm-lang.org/types/reading_types.html#type-variables&quot;&gt;type variable&lt;/a&gt; that can technically match any type, but in this case it &lt;em&gt;must&lt;/em&gt; match one of the types contained in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parentMsgs&lt;/code&gt;, hence the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update.ParentMsgs msgs msg&lt;/code&gt; declaration. The child component does not know the specifics about the parent messages: it just knows that it needs to return the type of message that the parent is expecting to get back.&lt;/p&gt; &lt;p&gt;Let’s see what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update.ParentMsgs msgs msg&lt;/code&gt; look like now:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/AudioPlayer/Update.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The record has been reduced down to a single entry, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audioPlayerMsg&lt;/code&gt;, which is defined from the child component’s perspective as being as a function that takes one of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;’s own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg&lt;/code&gt; types, and returns some kind of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg&lt;/code&gt; type from its parent that it does not know the details of.&lt;/p&gt; &lt;p&gt;This declaration mirrors the same function from the parent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update&lt;/code&gt; module’s perspective, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer.Msg -&amp;gt; Msg&lt;/code&gt;, a function that takes in some message internal-to-&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;, returning a concrete &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg&lt;/code&gt; type.&lt;/p&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/leia-truth-glitched.png&quot; alt=&quot;Leia learns the truth&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;The existence of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update.ParentMsgs&lt;/code&gt; alias belies the existence of similar aliases for a child component’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subscriptions&lt;/code&gt; functions. For example, staying with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;, we find this definition for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscriptions&lt;/code&gt; function:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/AudioPlayer.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;And the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subscriptions.ParentMsgs msgs msg&lt;/code&gt; is defined as:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/AudioPlayer/Subscriptions.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noOpMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update.ParentMsgs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subscriptions.ParentMsgs&lt;/code&gt; restricts the passed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parentMsgs&lt;/code&gt; record to only a small subset of entries, including the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noOpMsg&lt;/code&gt;, which it only knows as some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg&lt;/code&gt; type variable, without knowing its specific details.&lt;/p&gt; &lt;p&gt;All of the other child components in the 80sfy application handle the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msgs&lt;/code&gt; record in a similar way, concerning themselves only with the parent messages that they themselves use.&lt;/p&gt; &lt;p&gt;With regards to how these parent messages are used inside of views, and how they wrap their child messages, let’s have a look at an example in the user interface code for the play/pause button in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ControlPanel&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/ControlPanel/View/Controls.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ControlPanel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Controls&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ControlPanel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Styles&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Styles&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Styled&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Styled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Attributes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Styled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Events&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portsMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPlaying&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;css&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Styles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;data-name&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;controls&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playPauseButton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playing&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playPauseButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playPauseButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portsMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iconClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playPauseMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fas fa-pause&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fas fa-play&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portsMsg&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;css&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Styles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;data-name&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;play-pause&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playPauseMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;css&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Styles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iconBackground&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;css&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Styles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iconClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Looking specifically at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playPauseButton&lt;/code&gt; function, and the value that is supplied to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onClick&lt;/code&gt; function, we can see that:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;if the player is currently &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playing&lt;/code&gt;, the parameter-less parent message &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pauseMsg&lt;/code&gt; (read: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pause&lt;/code&gt;) gets sent as-is to be handled in the top-level &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update.update&lt;/code&gt; function&lt;/li&gt; &lt;li&gt;otherwise, if the player is stopped, we fetch the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Play&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports&lt;/code&gt; module (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports.playMsg&lt;/code&gt;), give that as a parameter to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portsMsg&lt;/code&gt; message (read: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports Play&lt;/code&gt;), and send that off to be handled in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update.update&lt;/code&gt; as a message to be forwarded off to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports&lt;/code&gt; “child component” for further handling (much more will be written about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports&lt;/code&gt; component later on…)&lt;/li&gt; &lt;/ul&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/battle-of-endor-glitched.png&quot; alt=&quot;Battle of Endor&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;As you can see, if you want to split your Elm application out into discrete parts/components, there is a potential complexity/maintenance cost associated with doing so.&lt;/p&gt; &lt;p&gt;I am prepared to pay this cost since this way of doing things makes sense to me as an application grows. Given this subjective viewpoint, and the fact that the Elm Guide would seem to consider this way of doing things to be off the “golden path”, definitely consider whether this approach is right for you, your team, and your application.&lt;/p&gt; &lt;h2 id=&quot;say-hello-to-my-little-façade&quot;&gt;Say “hello” to my little façade&lt;/h2&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/say-hello-to-my-little-friend-glitched.png&quot; alt=&quot;Say hello to my little friend&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Facade_pattern&quot;&gt;façade pattern&lt;/a&gt; is probably my favourite software-design pattern, and I try and use it wherever it makes sense to make interfaces to different parts of a system more straightforward.&lt;/p&gt; &lt;p&gt;One of my software pet peeves is seeing one part of a system be able to break boundaries and reach down with impunity into the internals of another part of a system it has no business knowing about.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;There are no natural barriers to handing out this kind of impunity in Elm, but at least the &lt;a href=&quot;https://package.elm-lang.org/packages/kress95/elm-review-indirect-internal/latest&quot;&gt;elm-review-indirect-internal&lt;/a&gt; rule, for use with the fantastic &lt;a href=&quot;https://package.elm-lang.org/packages/jfmengels/elm-review/latest/&quot;&gt;elm-review&lt;/a&gt; tool, can slap you on the wrist if you attempt to try.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;In the previous section, you saw part of how I tried to put a “hard” interface in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt; module. Let’s go back and re-open up that file, but instead have a scan of its entire content. For our purposes here, what the functions do is not important.&lt;/p&gt; &lt;p&gt;The main points are that there is no implementation code, all functions are simply one-line delegations out to sub-modules, and any other module in the application only needs to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt; module to interface with its functionality:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/AudioPlayer.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayerVolume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Playlist&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Playlist&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Volume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Volume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SoundCloudWidgetPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SoundCloud&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SoundCloudPlaylistUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AudioPlayerId&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayerVolume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AudioPlayerVolume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrackIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Playlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TrackIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SoundCloudPlaylistUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soundCloudPlaylistUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soundCloudPlaylistUrl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adjustVolumeMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adjustVolumeMsg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sliderVolume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adjustVolume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sliderVolume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isMuted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isMuted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isMuted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPlaying&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPlaying&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPlaying&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextTrackMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextTrackMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NextTrack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;performAudioPlayerReset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SoundCloudPlaylistUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;performAudioPlayerReset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soundCloudPlaylistUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;performAudioPlayerReset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soundCloudPlaylistUrl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;performNextTrackSelection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;performNextTrackSelection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;performNextTrackSelection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;performVolumeAdjustment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;performVolumeAdjustment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sliderVolume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;performVolumeAdjustment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sliderVolume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawTrackIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrackIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawTrackIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Playlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawTrackIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawVolume&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayerVolume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawVolume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerVolume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawVolume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerVolume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soundCloudWidgetPayload&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SoundCloudWidgetPayload&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soundCloudWidgetPayload&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;soundCloudWidgetPayload&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusToString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusToString&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toggleMuteMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toggleMuteMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ToggleMute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;It would be nice if Elm had built-in &lt;a href=&quot;https://en.wikipedia.org/wiki/Syntactic_sugar&quot;&gt;syntactic sugar&lt;/a&gt; similar to, say, &lt;a href=&quot;https://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;’s &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#defdelegate/2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defdelegate(funs, opts)&lt;/code&gt;&lt;/a&gt; function, in order to prevent the need to write function delegations “longhand”. But, leaving that aside, here are a few points worth bringing up regarding this file, as well as the general architecture of the application:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt; module, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt;ing sub-modules (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer.X&lt;/code&gt; modules) is unrestricted, but content from any other named module is only accessible via its top-level module (eg no reaching into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports.Msg&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;Types defined in sub-modules may be exposed via the top-level module as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type alias&lt;/code&gt;es (eg &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg&lt;/code&gt; etc). So, as far as other top-level modules are concerned, if they import the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt; type, the fact that the type is actually defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer.Model&lt;/code&gt; is unknowable implementation detail behind the &lt;a href=&quot;https://en.wikipedia.org/wiki/API&quot;&gt;API&lt;/a&gt; wall: they just see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt; type coming in from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt; module&lt;/li&gt; &lt;li&gt;Wherever possible, I have tried to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;types&lt;/code&gt; be &lt;a href=&quot;https://ckoster22.medium.com/advanced-types-in-elm-opaque-types-ec5ec3b84ed2&quot;&gt;Opaque Types&lt;/a&gt; in order to hide their constructors, and further enforce boundaries on implementation details (even amongst sibling modules; see, for example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Status&lt;/code&gt; type in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Audio.Status&lt;/code&gt;).&lt;br /&gt; The major exception to this would be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg&lt;/code&gt; type, which, similar to every other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg&lt;/code&gt; in the application, needed to be exposed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg(..)&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer.Msg&lt;/code&gt; so it could be used specifically for pattern matching in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer.Update&lt;/code&gt; files, and consequently referenced directly as return values in functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextTrackMsg&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toggleMuteMsg&lt;/code&gt;. But, just like any other type defined in a sub-module, if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg&lt;/code&gt; is to be exposed via the top-level module, it must only be via a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type alias&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All of the other modules in the 80sfy application that have enough internal implementation details to split out into sub-modules follow these patterns.&lt;/p&gt; &lt;p&gt;The Elm Guide would probably call all this façade-component application structuring a reflection of my programming “&lt;a href=&quot;https://guide.elm-lang.org/webapps/structure.html#culture-shock&quot;&gt;culture shock&lt;/a&gt;”. I think the points made in that section of the guide are reasonable, but I honestly just cannot agree with its advice of big files and comment header delimiters. I just want my code to be legible (and hopefully not just to me), and I currently think that this kind of structure can help in that goal.&lt;/p&gt; &lt;h2 id=&quot;you-can-be-my-wrapped-type-anytime&quot;&gt;You can be my wrapped type anytime&lt;/h2&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/you-can-be-my-wingman-glitched.png&quot; alt=&quot;You can be my wingman anytime&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Writing this application got me to become a big fan of &lt;a href=&quot;https://github.com/elm/compiler/blob/master/hints/comparing-custom-types.md#wrapped-types&quot;&gt;Wrapped Custom Types&lt;/a&gt;, not just for the extra type safety, but also for the clarity they help give record &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type alias&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg&lt;/code&gt; constructor definitions.&lt;/p&gt; &lt;p&gt;Before I knew about wrapped types, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt; model looked like the following:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/AudioPlayer/Model.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlistLength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soundCloudIframeUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;At face value, this could be considered reasonable, but is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; really the same kind of thing as its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soundCloudIframeUrl&lt;/code&gt;? Are the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt;s in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playlist&lt;/code&gt; really the same kind of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt;s as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volume&lt;/code&gt;? Should they be…?&lt;/p&gt; &lt;p&gt;After trying out creating some types to wrap the basic types, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt; model was transformed into:&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrackIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlistLength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soundCloudIframeUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SoundCloudIframeUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayerVolume&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;I think that this model with wrapped types conveys more &lt;em&gt;meaning&lt;/em&gt; than the one with just basic types. So, I pretty much went all around the application codebase and wrapped every type I could that made sense, resulting in a total of 12 wrapped types created for 80sfy.&lt;/p&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/maverick-thumbs-up-glitched.png&quot; alt=&quot;Maverick thumbs up.&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;In the land of wrapped types, though, conveying meaning does exert an overhead cost. For example, let’s have a look at the ceremony required to wrap and unwrap a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrackIndex&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/AudioPlayer/Playlist.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Playlist&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrackIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawTrackIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrackIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrackIndex&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrackIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawTrackIndexInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrackIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawTrackIndexInt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawTrackIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrackIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawTrackIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TrackIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawTrackIndexInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawTrackIndexInt&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playlist&lt;/code&gt; field must contain a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List TrackIndex&lt;/code&gt;, therefore:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;every “raw” track index &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt; that goes into the list must first be wrapped by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Playlist.trackIndex rawTrackIndexInt&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;if you ever want to do something with the “raw” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt; value inside of a track index, then you have to unwrap it by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Playlist.rawTrackIndex trackIndex&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;So, wouldn’t it be easier to just…not have wrapped types here? Yes, it would! But, this is the cost of adding (admittedly subjective) clarity to model types, and it is up to you to decide whether doing this is meaningful and worth the cost of admission.&lt;/p&gt; &lt;p&gt;Since the above example acts like some kind of wardrobe for an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt;, putting on and taking off a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrackIndex&lt;/code&gt;-coloured coat without any change to the underlying raw value, let’s have a look at some other scenarios where constraints or validation for the raw value are being added to the wrapping process.&lt;/p&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecretConfig&lt;/code&gt; model contains the following values that can be populated by user input:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/SecretConfig/Model.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SecretConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gifDisplayIntervalSeconds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GifDisplayIntervalSeconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soundCloudPlaylistUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SoundCloudPlaylistUrl&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;These types wrap around a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Float&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; respectively, but because we cannot trust anything given to us by our hostile, power-suit-toting users, we need conditions on the raw values that serve as barriers to the wrapped types being created:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/Gif.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gif&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GifDisplayIntervalSeconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;displayIntervalSeconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GifDisplayIntervalSeconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GifDisplayIntervalSeconds&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;displayIntervalSeconds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GifDisplayIntervalSeconds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;displayIntervalSeconds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawDisplayIntervalSecondsFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawDisplayIntervalSecondsFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;GifDisplayIntervalSeconds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawDisplayIntervalSecondsFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;A non-positive display interval between animated GIFs does not make sense, so we only wrap positive values, and give malicious users &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nothing&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Assuming that this is the only function we create to return new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GifDisplayIntervalSeconds&lt;/code&gt; types, we build in some guarantees around the validity of raw values wrapped in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GifDisplayIntervalSeconds&lt;/code&gt; type that we could not get if it was a basic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Float&lt;/code&gt; type.&lt;/p&gt; &lt;p&gt;Similarly, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SoundCloudPlaylistUrl&lt;/code&gt; isn’t just any kind of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;: it must have a correct prefix. If the raw value does, it gets wrapped; if not, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nothing&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/SoundCloud/Url.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SoundCloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SoundCloudPlaylistUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlistUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SoundCloudPlaylistUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SoundCloudPlaylistUrl&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlistUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SoundCloudPlaylistUrl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlistUrl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawSoundCloudPlaylistUrlString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlistUrlPrefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlistUrlPrefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://api.soundcloud.com/&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isValidUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isValidUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playlistUrlPrefix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawSoundCloudPlaylistUrlString&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isValidUrl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SoundCloudPlaylistUrl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawSoundCloudPlaylistUrlString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;As you can see, Wrapped Types can provide more than just a fancy enclosure to a basic type. Aside from improvements in type readability, they can help assert the validity of the wrapped raw values, so I would highly recommend giving them a try in your own Elm codebases!&lt;/p&gt; &lt;h2 id=&quot;ports-where-were-going-we-dont-need-ports&quot;&gt;Ports? Where we’re going we don’t need ports&lt;/h2&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/we-dont-need-roads-glitched.png&quot; alt=&quot;Roads? Where we&apos;re going we don&apos;t need roads&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;My usage of ports in Elm applications previous to 80sfy was essentially as remote function calls out to the impure badlands of Javascript.&lt;/p&gt; &lt;p&gt;For every kind of operation I needed to leverage Javascript for, I would poke a port-shaped hole in the Elm application boundary, do the minimum amount of work in Javascript-land, and return control quickly to the pure, type-safe Elm application fortress.&lt;/p&gt; &lt;p&gt;For example, previous iterations of port-related code for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;, where communications needed to be sent out to the SoundCloud widget iframe, looked like the following, with functions named in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Active_voice&quot;&gt;active voice&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/AudioPlayer/Ports.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseAudio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playAudio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skipToTrack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseAudio&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playAudio&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skipToTrack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- and a bunch of other port declarations...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The Elm application would also need to know when the SoundCloud widget controls were used directly so it could update its own internal state. This occurred via subscriptions named in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Passive_voice&quot;&gt;passive voice&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/AudioPlayer/Subscriptions.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Decode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPaused&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlaying&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextTrackNumberRequested&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Soundcloud-specific details about the widget, and its events (and how to bind to them), can be found in the &lt;a href=&quot;https://developers.soundcloud.com/docs/api/html5-widget&quot;&gt;SoundCloud Widget API&lt;/a&gt; documentation. However, the more pointed thing to note about the Javascript code below, is that there are six named Elm &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.ports&lt;/code&gt; that are having &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send&lt;/code&gt; called on them (and this is just a sample; I originally had &lt;em&gt;28&lt;/em&gt;(!) named ports/subscriptions across the application):&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/soundCloudWidget.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;track-player&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise SoundCloud player&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;READY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initPlayAudio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initPauseAudio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initSkipToTrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initTrackFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// other similar init functions...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initPlayAudio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Elm tells the SoundCloud widget to play audio&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;playAudio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The SoundCloud widget tells Elm its been told to play (non-Elm request)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PLAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;audioPlaying&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadedProgress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initPauseAudio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Elm tells the SoundCloud widget to play audio&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pauseAudio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The SoundCloud widget tells Elm its been told to pause (non-Elm request)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PAUSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;audioPaused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initSkipToTrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Elm tells the SoundCloud widget to skip over to a specific track number&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;skipToTrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trackNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trackNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initTrackFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The SoundCloud widget tells Elm its finished playing an audio track&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FINISH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextTrackNumberRequested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;I wrote the code like this because it was how I understood ports to work, and pretty much all the educational materials I read about ports implemented them essentially like remote function calls into Javascript.&lt;/p&gt; &lt;p&gt;However, while re-reading the &lt;a href=&quot;https://guide.elm-lang.org/interop/ports.html&quot;&gt;Elm Guide’s Ports section&lt;/a&gt;, I was greeted by this guidance buried down in the &lt;a href=&quot;https://guide.elm-lang.org/interop/ports.html#notes&quot;&gt;Notes section&lt;/a&gt;:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Definitely do not try to make a port for every JS function you need. You may really like Elm and want to do everything in Elm no matter the cost, but ports are not designed for that. Instead, focus on questions like “who owns the state?” and use one or two ports to send messages back and forth.&lt;/p&gt; &lt;/blockquote&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/bttf2-newspaper-glitched.png&quot; alt=&quot;Doc and Marty reading a newspaper&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Okay, the Elm Guide and I may currently have our differences with regards to application architecture, but I am open to the idea of being completely wrong about how I have written ports.&lt;/p&gt; &lt;p&gt;The next question was “are there examples of how to have all messages running through one or two ports?”. These were not easy to find, but I was able to find two references that dealt with this question, and helped me get to the implementation I ended up running with:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;a href=&quot;https://package.elm-lang.org/packages/hendore/elm-port-message/latest/&quot;&gt;elm-port-message&lt;/a&gt; library&lt;/li&gt; &lt;li&gt;The elm-conf 2017 talk &lt;a href=&quot;https://www.youtube.com/watch?v=P3pL85n9_5s&quot;&gt;The Importance of Ports&lt;/a&gt; by &lt;a href=&quot;https://github.com/mrmurphy&quot;&gt;Murphy Randle&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;From elm-port-message, I stole the idea of a generic “tagged payload” to use for &lt;em&gt;all&lt;/em&gt; the kinds of messages that would flow in and out of Javascript.&lt;/p&gt; &lt;p&gt;From The Importance of Ports, I stole the idea of having all outbound port messages typed, and used in an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;-style &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt; statement that resulted in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd&lt;/code&gt; being sent in a tagged payload through the single outbound application port.&lt;/p&gt; &lt;p&gt;The concept of having a single inbound and a single outbound port for message payloads also made me re-consider where code dealing with ports (and, to a lesser extent, subscriptions), should live in the codebase.&lt;/p&gt; &lt;p&gt;This resulted in a change of thinking about outbound ports themselves. From them just &lt;em&gt;belonging to&lt;/em&gt; or being &lt;em&gt;a part of&lt;/em&gt; a component (eg &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer.Ports&lt;/code&gt; above), to considering the Elm application boundary &lt;em&gt;itself&lt;/em&gt;, where outbound port messages are sent to Javascript, being its own major component in the application, containing its own top-level module and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Msg&lt;/code&gt; type:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/Update.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portsMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgForPorts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgForPorts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;You may have noticed that the view code for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ControlPanel&lt;/code&gt;’s play/pause button in a previous section sends a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portsMsg Ports.playMsg&lt;/code&gt; message when it is clicked. The code above is where that message, and others like it, end up being handled.&lt;/p&gt; &lt;p&gt;There is no model to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; for these messages, nor parent message to keep track of: just a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd&lt;/code&gt; to be sent to the Elm Runtime, whose generation is delegated to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports.Cmd&lt;/code&gt; module:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/Ports/Cmd.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Encode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Payload&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Payload&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outbound&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;PauseAudio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outbound&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withTag&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;PAUSE_AUDIO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;PlayAudio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outbound&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withTag&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;PLAY_AUDIO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SkipToTrack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;trackNumber&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withTaggedData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;SKIP_TO_TRACK&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outbound&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Every typed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports.Msg&lt;/code&gt; sends a tagged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Payload&lt;/code&gt;, with or without some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;, through a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outbound&lt;/code&gt; port. For the tag name convention, I decided to use &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;’s original &lt;a href=&quot;https://redux.js.org/style-guide/style-guide#priority-c-rules-recommended&quot;&gt;action type naming convention of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;SCREAMING_SNAKE_CASE&quot;&lt;/code&gt;&lt;/a&gt; (Elm is &lt;a href=&quot;https://redux.js.org/understanding/history-and-design/prior-art#elm&quot;&gt;one of Redux’s inspirations&lt;/a&gt;, after all).&lt;/p&gt; &lt;p&gt;Code for the payload itself lives under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports.Payload&lt;/code&gt;, and specifies a unified way of encoding and decoding a JSON &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; for this purpose. Rather than send any raw Elm types as parameters to ports (eg the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port skipToTrack : Int -&amp;gt; Cmd msg&lt;/code&gt;), we specify that &lt;em&gt;only&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt;s can be sent and received via ports (which can also be enforced by the &lt;a href=&quot;https://package.elm-lang.org/packages/sparksp/elm-review-ports/1.3.0/NoUnsafePorts&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NoUnsafePorts&lt;/code&gt;&lt;/a&gt; rule in &lt;a href=&quot;https://package.elm-lang.org/packages/sparksp/elm-review-ports/latest&quot;&gt;elm-review-ports&lt;/a&gt;):&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/Ports/Payload.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Payload&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withTaggedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Decode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Pipeline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pipeline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Encode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Payload&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decodeValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withDefault&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Payload&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withTag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withTag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withTaggedData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withTaggedData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withTaggedData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tag&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- PRIVATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Payload&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;succeed&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tag&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;data&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Now that we have outbound messages going out to Javascript via a single port, the Javascript code needs to change so that it can deal with these different types of tagged payloads, which is where we lean on our old friend &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/js/soundCloudWidget.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;track-player&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;READY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initOutboundPortMessageHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initOutboundPortMessageHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;PLAY_AUDIO&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;PAUSE_AUDIO&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;SKIP_TO_TRACK&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trackNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/biffs-gang-glitched.png&quot; alt=&quot;Biff&apos;s gang&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;So, that’s the first half of the story: Elm to Javascript. What about messages going from Javascript to Elm? Let’s follow the journey, starting from Javascript, focusing on the events generated from the SoundCloud widget:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/js/soundCloudWidget.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;track-player&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;READY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bindSoundCloudWidgetEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bindSoundCloudWidgetEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PLAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;AUDIO_PLAYING&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadedProgress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PAUSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;AUDIO_PAUSED&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPosition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FINISH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;NEXT_TRACK_NUMBER_REQUESTED&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;There’s not too much difference in the code here compared to the previous implementation, aside from:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;minor code re-structuring to put all the SoundCloud widget bindings together&lt;/li&gt; &lt;li&gt;all messages now being sent via a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inbound&lt;/code&gt; port&lt;/li&gt; &lt;li&gt;like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outbound&lt;/code&gt; messages, all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inbound&lt;/code&gt; messages are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Payload&lt;/code&gt;-shaped objects, rather than raw values&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Of particular note, at least for me, is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;NEXT_TRACK_NUMBER_REQUESTED&quot;&lt;/code&gt; payload, which can contain only a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tag&lt;/code&gt; and no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; information, and still be valid: essentially just a message telling Elm that “the next track number has been requested”.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;I think that sending this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;-less payload object is a preferable option to the original implementation, which explicitly required needing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send&lt;/code&gt; a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; back to Elm, when the objective was really to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send&lt;/code&gt; &lt;em&gt;without&lt;/em&gt; any parameters:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;What I wanted to do in the original code:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;JS&lt;/em&gt;:&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initTrackFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FINISH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Calling `send` on a port with no parameters is invalid, apparently...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextTrackNumberRequested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;p&gt;&lt;em&gt;Elm&lt;/em&gt;:&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextTrackNumberRequested&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;p&gt;The port receives no parameters, so having &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; as the parameter is correct, right…? (Spoiler: Nope.)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;What I ended up needing to do to make it go:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;JS&lt;/em&gt;:&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initTrackFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FINISH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Needing to send an explicit `null` seems a bit strange to me...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextTrackNumberRequested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;p&gt;The only documentation I could find regarding needing to do this was &lt;a href=&quot;https://stackoverflow.com/questions/41679386/elm-define-subscription-port-with-no-parameters&quot;&gt;this Stack Overflow answer&lt;/a&gt;, so this information would be a nice addition to the Elm Guide.&lt;/p&gt; &lt;p&gt;Anyway, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Payload&lt;/code&gt;s means this issue is now irrelevant, so let’s get back to Elm-land to see how messages coming through on the single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inbound&lt;/code&gt; port are being handled.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inbound&lt;/code&gt; port definition lives in the top-level &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports&lt;/code&gt; module, making sure that knowledge about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port module&lt;/code&gt;s (and hence the world outside of the Elm) are kept solely to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports.Cmd&lt;/code&gt; family of modules:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/Ports.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inbound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Encode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inbound&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Since the different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inbound&lt;/code&gt; messages will only be relevant for specific parts of the application, code to handle subscriptions still lives as sub-modules of the components the messages are relevant to.&lt;/p&gt; &lt;p&gt;For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer&lt;/code&gt;-specific messages sent in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bindSoundCloudWidgetEvents&lt;/code&gt; function are handled in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioPlayer.Subscriptions&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/AudioPlayer/Subscriptions.elm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-elm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Subscriptions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Decode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exposing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noOpMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inbound&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlePortMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- PRIVATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlePortMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentMsgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AudioPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlePortMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayerMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noOpMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioPlayer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decodePayload&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;AUDIO_PAUSED&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Handle &quot;AUDIO_PAUSED&quot; messages&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;AUDIO_PLAYING&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Handle &quot;AUDIO_PLAYING&quot; messages&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;NEXT_TRACK_NUMBER_REQUESTED&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Handle &quot;NEXT_TRACK_NUMBER_REQUESTED&quot; messages&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noOpMsg&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Some notes about this module:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Although stating this might be obvious for some, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handlePortMessage&lt;/code&gt; function is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(Value -&amp;gt; msg)&lt;/code&gt; function in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port inbound (Value -&amp;gt; msg) -&amp;gt; Sub msg&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handlePortMessage&lt;/code&gt; receives the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;payload&lt;/code&gt; from Javascript-land, and performs some action depending on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tag&lt;/code&gt; value, details of which are not important here, but they are, of course, available in the codebase&lt;/li&gt; &lt;li&gt;Once it is known &lt;em&gt;how&lt;/em&gt; the inbound message is to be handled, the work to generate the subscription is delegated off to the centralised &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ports.inbound&lt;/code&gt; function&lt;/li&gt; &lt;/ul&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/flying-delorean-glitched.png&quot; alt=&quot;Flying DeLorean&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;So, while “where we’re going we did actually need ports”, I think that cutting down the number of those ports from 28 to 2 can be considered a win. I hope that the example above, and the 80sfy codebase, can at least serve as an example of how to do centralised port message sending if that is a path you are looking at going down for your own Elm application.&lt;/p&gt; &lt;h2 id=&quot;when-you-code-js-your-heart-dies&quot;&gt;When you code JS your heart dies&lt;/h2&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/your-heart-dies-glitched.png&quot; alt=&quot;When you grow up your heart dies&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;My developer helmet got many dents on it as I repeatedly ran into walls while coding up the Javascript side of the 80sfy application.&lt;/p&gt; &lt;p&gt;Some of these issues were due to browser peculiarities, or undocumented quirks of the &lt;a href=&quot;https://developers.soundcloud.com/docs/api/html5-widget&quot;&gt;SoundCloud Widget API&lt;/a&gt;, which I am wagering has probably not received much love in a while. But, since all these issues occurred in Javascript-land, it did, however unfairly, became the target of my frustration.&lt;/p&gt; &lt;p&gt;So, without further adieu, here is a random list of JS-land issues I came across and how they needed to be fixed, which will hopefully save you some time if you ever encounter similar issues.&lt;/p&gt; &lt;h3 id=&quot;soundcloud-iframe-loading-delays&quot;&gt;SoundCloud iframe loading delays&lt;/h3&gt; &lt;p&gt;In the 80sfy application, the first request that ends up being made to the SoundCloud widget is to return the list of its sound objects, so that list’s length can be sent back to Elm to form the basis of the shuffled playlist.&lt;/p&gt; &lt;p&gt;However, the SoundCloud iframe seems to require a little bit of time to initialise before it can get its sounds, so in order to avoid any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Uncaught Error: mediaPayload required.&quot;&lt;/code&gt; errors displaying in the browser JS console, I needed to introduce a one-time delay using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt;&lt;/a&gt; before calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scPlayer.getSounds()&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/js/soundCloudWidget.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initAudioPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;PLAYLIST_LENGTH_FETCHED&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3000&lt;/code&gt; millisecond delay was the value gleaned from trial and error: values less than this did not seem to be long enough to make the error go away.&lt;/p&gt; &lt;h3 id=&quot;firefox-blur-event-issues&quot;&gt;Firefox blur event issues&lt;/h3&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt; ended up (bafflingly) being the solution to another completely different issue: this time related to &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/&quot;&gt;Firefox&lt;/a&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/blur_event&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blur&lt;/code&gt; events&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In the 80sfy application, if you switch to another browser tab or window, which fires off a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blur&lt;/code&gt; event, the GIFs stop playing, saving unneeded Giphy API calls when the application is not the centre of attention.&lt;/p&gt; &lt;p&gt;The issue is that, for Firefox &lt;em&gt;only&lt;/em&gt;, if you click the SoundCloud widget iframe, it looks like Firefox considers it a different browser window, and fires off a blur event, stopping the GIFs unexpectedly. Scouring the internet for the cause of this issue led to &lt;a href=&quot;https://gist.github.com/jaydson/1780598#gistcomment-2609301&quot;&gt;this Gist comment&lt;/a&gt;, where:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;For me, adding a 0 second timeout…made it work in Firefox. The problem seems to be that, at the time Firefox fires the blur event, it has not yet updated the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;document.activeElement&lt;/code&gt; [the iframe], so it evaluates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Trying that led to this code:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/js/videoPlayer.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initWindowEventListeners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;blur&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activeElementId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;WINDOW_BLURRED&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activeElementId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;And…it worked. Same behaviour across browsers now. Go figure ¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/p&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/breakfast-club-group-glitched.png&quot; alt=&quot;The Breakfast Club&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;h3 id=&quot;skipping-tracks-un-pauses-soundcloud-player&quot;&gt;Skipping tracks un-pauses SoundCloud player&lt;/h3&gt; &lt;p&gt;Regardless of whether the SoundCloud iframe widget is paused or not, if you choose to skip to the next track in the playlist, it starts playing.&lt;/p&gt; &lt;p&gt;This may be intended behaviour for the widget, but it was undesired behaviour for me: I wanted to be able to skip tracks while continuing to be in a paused state.&lt;/p&gt; &lt;p&gt;So, since the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scPlayer.skip&lt;/code&gt; forcably &lt;em&gt;un-pauses&lt;/em&gt; the player, we need to check if the player was originally paused before the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;skip&lt;/code&gt; command was issued, and if so, keep the SoundCloud widget player paused by &lt;em&gt;re-pausing&lt;/em&gt; it:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/js/soundCloudWidget.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initOutboundPortMessageHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;SKIP_TO_TRACK&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Get player&apos;s original paused state&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPaused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paused&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trackNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// *re-pause* player if it was originally paused but got *un-paused*&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// by the above call to `scPlayer.skip`.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;only-tell-elm-about-real-pause-events&quot;&gt;Only tell Elm about “real” pause events&lt;/h3&gt; &lt;p&gt;The “re-pausing” problem above caused a bit of a cascade of issues back into Elm-land.&lt;/p&gt; &lt;p&gt;There is code that binds to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SC.Widget.Events.PAUSE&lt;/code&gt; event, which sends a message to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inbound&lt;/code&gt; port to let Elm know that the SoundCloud player has been paused. The problem is that any “forced re-pausing” should not be considered a “real” pause event for Elm notification purposes.&lt;/p&gt; &lt;p&gt;So, the issue now is how can we intercept and interrogate a SoundCloud &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sound&lt;/code&gt; object in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PAUSE&lt;/code&gt; event callback to make sure that Elm only gets a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;AUDIO_PAUSED&quot;&lt;/code&gt; message when a “real” pause occurs?&lt;/p&gt; &lt;p&gt;The first thing we can do is something similar to the handling in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;SKIP_TO_TRACK&quot;&lt;/code&gt; message, and only send the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;AUDIO_PAUSED&quot;&lt;/code&gt; message when the player has been &lt;em&gt;actively&lt;/em&gt; paused:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/js/soundCloudWidget.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bindSoundCloudWidgetEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PAUSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPaused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paused&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;AUDIO_PAUSED&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPosition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This code works as expected for track skips that happen while a track is playing (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paused&lt;/code&gt; value above will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; when you ask if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scPlayer.isPaused&lt;/code&gt; while it is playing), but not when the player is in a paused state and a track is skipped (resulting in the forced re-pause), since that will still count as a “pause”! Argh!&lt;/p&gt; &lt;p&gt;So, what needs to be done here is add a guard clause to check the state of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sound.loadedProgress&lt;/code&gt;. If it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, that means that a “forced re-pause” has occurred after a track skip has happened to a new track, which has not started playing yet, and hence has not recorded any progression:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/js/soundCloudWidget.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bindSoundCloudWidgetEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PAUSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadedProgress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPaused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paused&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;AUDIO_PAUSED&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPosition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/breakfast-club-fist-pump-glitched.png&quot; alt=&quot;Breakfast Club fist pump&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Does all this sound confusing? It was! Please learn from my trial and error, and I hope you save yourself some time if you encounter similar issues!&lt;/p&gt; &lt;h2 id=&quot;all-this-code-will-be-lost-in-time-like-tears-in-rain&quot;&gt;All this code will be lost in time, like tears in rain&lt;/h2&gt; &lt;div style=&quot;margin: auto; width: 95%;&quot;&gt; &lt;figure style=&quot;display: block;&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-02/tears-in-rain-glitched.png&quot; alt=&quot;All these moments will be lost in time. Like tears in rain.&quot; /&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;I spent more time than I intended on architecting, refactoring, re-writing, and polishing this application, but I feel like during this journey I learned significantly more about Elm than I had known before.&lt;/p&gt; &lt;p&gt;It represents a conscientiously-written codebase to me now, but in the future, who knows? Maybe I will come around to the Elm Guide’s way of thinking and abandon my stubborn ideas about application structure, or maybe there is some food for thought in here for other Elm developers (reach out and let me know!).&lt;/p&gt; &lt;p&gt;Anyway, it’s just an application that plays synthwave sounds to animated GIFs, man. Grab an &lt;a href=&quot;https://drinkarizona.com/collections/drinks&quot;&gt;ice tea&lt;/a&gt;, don’t think about it too hard, and just &lt;a href=&quot;https://www.paulfioravanti.com/80sfy/&quot;&gt;ｒｅｌａｘ&lt;/a&gt;.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;For anyone who is curious about the glitched images, I used &lt;a href=&quot;https://photomosh.com/&quot;&gt;Photo Mosh&lt;/a&gt; to initially add scanlines and some other effects, and then &lt;a href=&quot;https://snorpey.github.io/jpg-glitch/&quot;&gt;Image Glitch Tool&lt;/a&gt; for the glitching.&lt;/p&gt; &lt;/blockquote&gt;</content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="elm"/><category term="synthwave"/><category term="retrowave"/><category term="80s"/><category term="functional-programming"/><category term="soundcloud"/><category term="giphy"/><summary type="html">Tech moves pretty fast. If you don&apos;t stop and do a side project once in a while, you could miss it.</summary></entry><entry><title type="html">Test-Driven Fairy Tale</title><link href="https://www.paulfioravanti.com/blog/test-driven-fairy-tale/" rel="alternate" type="text/html" title="Test-Driven Fairy Tale"/><published>2021-02-20T21:30:00+11:00</published><updated>2021-02-20T21:30:00+11:00</updated><id>https://www.paulfioravanti.com/blog/test-driven-fairy-tale</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/test-driven-fairy-tale/">&lt;blockquote&gt; &lt;p&gt;&lt;em&gt;This story takes place when pigs spoke rhyme&lt;/em&gt;&lt;br /&gt; &lt;em&gt;And monkeys chewed tobacco,&lt;/em&gt;&lt;br /&gt; &lt;em&gt;And hens took snuff to make them tough,&lt;/em&gt;&lt;br /&gt; &lt;em&gt;And ducks went quack, quack, quack, O!&lt;/em&gt;&lt;br /&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Have you ever told a story with your code?&lt;/p&gt; &lt;p&gt;No, I don’t mean boring &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/User_story&quot;&gt;user stories&lt;/a&gt;&lt;/em&gt;, I mean real, &lt;em&gt;&lt;a href=&quot;https://www.collinsdictionary.com/dictionary/english/make-believe&quot;&gt;make-believe&lt;/a&gt;&lt;/em&gt; stories!&lt;/p&gt; &lt;p&gt;The story of &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Three_Little_Pigs&quot;&gt;The Three Little Pigs&lt;/a&gt; is a real story. A &lt;a href=&quot;https://en.wikipedia.org/wiki/Fable&quot;&gt;fable&lt;/a&gt;, even!&lt;/p&gt; &lt;div style=&quot;display: block; text-align: center;&quot;&gt; &lt;figure style=&quot;display: block; margin: 1em;&quot;&gt; &lt;img src=&quot;/assets/images/2021-02-20/three-little-pigs.png&quot; alt=&quot;The Three Little Pigs&quot; /&gt; &lt;figcaption style=&quot;text-align: center;&quot;&gt; Illustration by &lt;a href=&quot;https://www.leesheppard.com&quot;&gt;Lee Sheppard&lt;/a&gt;. &lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;It uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(writing)&quot;&gt;rule of three&lt;/a&gt; to tell a simple story of pigs versus a wolf: each encounter sets up a scenario, which gets executed, results in a pay-off that affects the state of the story, and moves the plot forward.&lt;/p&gt; &lt;p&gt;But, can it be coded? Can we then use its test suite to actually tell the story? I decided to try and find out!&lt;/p&gt; &lt;p&gt;Nice stories deserve to be told using nice programming languages. So, I chose &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;, since &lt;a href=&quot;https://en.wikipedia.org/wiki/Yukihiro_Matsumoto&quot;&gt;Matz&lt;/a&gt;, Ruby’s creator, &lt;a href=&quot;https://en.wiktionary.org/wiki/MINASWAN&quot;&gt;seems like a nice person&lt;/a&gt;. For testing, I chose &lt;a href=&quot;https://rspec.info/&quot;&gt;RSpec&lt;/a&gt;, a Ruby tool that uses expressive language to write tests: just what I needed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; the progression of the story.&lt;/p&gt; &lt;p&gt;You can find the Ruby code for my interpretation of the story at &lt;a href=&quot;https://github.com/paulfioravanti/three_little_pigs&quot;&gt;The Three Little Pigs Github repository&lt;/a&gt;, but nothing beats having someone read you a story.&lt;/p&gt; &lt;p&gt;So, gather round your monitors and devices, and let’s re-visit this classic fairy tale together, which begins Once Upon A Time…&lt;/p&gt; &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/4NrU1YMd1qE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;</content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="ruby"/><category term="rspec"/><category term="minitest"/><category term="testing"/><summary type="html">Will the Big Bad Wolf thwart The Three Little Pigs from getting a passing test suite?</summary></entry><entry><title type="html">Stenography Numbers on a Georgi</title><link href="https://www.paulfioravanti.com/blog/steno-numbers-georgi/" rel="alternate" type="text/html" title="Stenography Numbers on a Georgi"/><published>2021-01-17T18:15:00+11:00</published><updated>2021-01-17T18:15:00+11:00</updated><id>https://www.paulfioravanti.com/blog/steno-numbers-georgi</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/steno-numbers-georgi/">&lt;p&gt;As a present to myself for &lt;a href=&quot;https://www.paulfioravanti.com/blog/completed-typey-type/&quot;&gt;“completing” Typey Type&lt;/a&gt;, I picked up a &lt;a href=&quot;https://www.gboards.ca/product/georgi&quot;&gt;Georgi&lt;/a&gt; keyboard, and since mid-July 2020, I have been using it as my daily driver for practising &lt;a href=&quot;http://www.openstenoproject.org/&quot;&gt;Plover stenography&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The Georgi’s &lt;a href=&quot;http://www.kailh.com/en/Products/Ks/CS/&quot;&gt;Kailh Choc Linear&lt;/a&gt; key switches with &lt;a href=&quot;https://www.spritdesigns.com/product-page/choc&quot;&gt;12g ultra light springs&lt;/a&gt; make &lt;a href=&quot;https://www.artofchording.com/introduction/how-steno-works.html#chords&quot;&gt;chording&lt;/a&gt; a breeze. However, its compact form factor means it has a set of number (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt;) keys in the thumb clusters of both halves of the keyboard, rather than a &lt;a href=&quot;https://sites.google.com/site/learnplover/lesson-8-numbers#TOC-The-Number-Bar&quot;&gt;number bar&lt;/a&gt; (or row of keys that effectively substitute for a number bar if you are using a traditional keyboard, rather than a &lt;a href=&quot;https://en.wikipedia.org/wiki/Stenotype&quot;&gt;stenotype machine&lt;/a&gt;).&lt;/p&gt; &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/images/2021-01-17/number-bar.png&quot; alt=&quot;img number-bar&quot; style=&quot;margin-right: 0.5rem; width: 45%;&quot; /&gt; &lt;img src=&quot;/assets/images/2021-01-17/number-keys.png&quot; alt=&quot;img number-keys&quot; style=&quot;margin-left: 0.5rem; width: 45%&quot; /&gt;&lt;/p&gt; &lt;p&gt;This change does not interfere with the majority of how anyone would use a stenographic keyboard, since, in general, we tend to type numbers significantly less frequently than letters and words. However, if you do use numbers often, then some &lt;a href=&quot;https://en.wikipedia.org/wiki/Muscle_memory&quot;&gt;muscle memory&lt;/a&gt; re-wiring will be in order to adapt to the number keys.&lt;/p&gt; &lt;p&gt;In order to help with memorisation, specifically around which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; key to press for a given &lt;a href=&quot;https://sites.google.com/site/learnplover/glossary&quot;&gt;outline&lt;/a&gt;, I created a set of images indicating the chords pressed for each number from 0-99, and the set of hundreds numbers from 100-900, with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; key that &lt;em&gt;felt right for me&lt;/em&gt;.&lt;/p&gt; &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/images/2021-01-17/georgi-numbers-small.gif&quot; alt=&quot;img georgi-numbers-small&quot; /&gt;&lt;/p&gt; &lt;p&gt;You can download a PDF containing all the images in the animated GIF above at the following link:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/s/5d7n1hix84mkrlz/georgi-numbers.pdf?dl=1&quot;&gt;georgi-numbers.pdf&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Also, here are some compare and contrast videos of stroking Plover steno numbers on both a Georgi and an &lt;a href=&quot;https://ergodox-ez.com/&quot;&gt;Ergodox EZ&lt;/a&gt; (which I originally &lt;a href=&quot;https://www.paulfioravanti.com/blog/starting-stenography-ergodox/&quot;&gt;started learning stenography&lt;/a&gt; on):&lt;/p&gt; &lt;div style=&quot;display: flex;&quot;&gt; &lt;div style=&quot;width: 50%; margin-left: 0.5rem;&quot;&gt; &lt;!-- Courtesy of embedresponsively.com //--&gt; &lt;div class=&quot;responsive-video-container&quot;&gt; &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/Xz0aqwlIHvg&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: 50%; margin-left: 0.5rem;&quot;&gt; &lt;!-- Courtesy of embedresponsively.com //--&gt; &lt;div class=&quot;responsive-video-container&quot;&gt; &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/Y1zQEEmivxc&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;blockquote&gt; &lt;p&gt;I am still learning, so I am definitely not fast. Also, these videos are not representative of my current accuracy: it took me tens of takes to record each video until I was able to not make any major mistakes (and even then, they are not perfect runs).&lt;/p&gt; &lt;/blockquote&gt; &lt;h2 id=&quot;rules&quot;&gt;Rules&lt;/h2&gt; &lt;p&gt;After discovering which number chords “felt right”, I tried to see if I could summarise (read: reverse-engineer) my choices into a set of &lt;em&gt;subjective&lt;/em&gt; rules. So, here is what I came up with:&lt;/p&gt; &lt;h3 id=&quot;general-rules&quot;&gt;General Rules&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Always use two hands to stroke the outline, even if it is possible to use only one hand. I do not want to have to remember whether a chord can be stroked with one hand or not, so just use two hands by default.&lt;/li&gt; &lt;li&gt; &lt;p&gt;When the number outline is in &lt;a href=&quot;https://sites.google.com/site/learnplover/lesson-2-steno-order#TOC-Steno-Order&quot;&gt;steno order&lt;/a&gt; (ie for a two-digit number, &lt;strong&gt;the first digit value is less than the last digit value&lt;/strong&gt;: 13, 48 etc), the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; key used should be on the &lt;strong&gt;opposite side&lt;/strong&gt; of the keyboard from the key of the &lt;strong&gt;last digit&lt;/strong&gt; stroked.&lt;/p&gt; &lt;p&gt;So, for 13, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; key for “3” is on the left half of the keyboard, so the right &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; key should be used. Likewise, for 48, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-L&lt;/code&gt; key for “8” is on the right half of the keyboard, so the left &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; key should be used.&lt;/p&gt; &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/images/2021-01-17/013-tiny.png&quot; alt=&quot;img 013-tiny&quot; style=&quot;margin-right: 0.5rem;&quot; /&gt; &lt;img src=&quot;/assets/images/2021-01-17/048-tiny.png&quot; alt=&quot;img 048-tiny&quot; style=&quot;margin-left: 0.5rem;&quot; /&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the number outline is &lt;em&gt;not&lt;/em&gt; in steno order (ie for a two-digit number, &lt;strong&gt;the first digit value is greater than the last digit value&lt;/strong&gt;: 31, 84 etc), then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; key used is &lt;strong&gt;always on the left&lt;/strong&gt; since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EU&lt;/code&gt; &lt;a href=&quot;https://sites.google.com/site/learnplover/lesson-2-steno-order#TOC-Inversion&quot;&gt;inversion&lt;/a&gt; chord must be stroked, and a thumb cannot comfortably stroke all three keys in the thumb cluster at once.&lt;/p&gt; &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/images/2021-01-17/031-tiny.png&quot; alt=&quot;img 031-tiny&quot; style=&quot;margin-right: 0.5rem;&quot; /&gt; &lt;img src=&quot;/assets/images/2021-01-17/084-tiny.png&quot; alt=&quot;img 084-tiny&quot; style=&quot;margin-left: 0.5rem;&quot; /&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt;The thumb cluster rule: where a number outline requires non-&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; keys in the thumb clusters (ie &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;E&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt;), wherever possible, aim to &lt;em&gt;only&lt;/em&gt; use your thumbs to stroke those keys. This generally limits you to stroking the following adjacent keys for number outlines: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#A&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AO&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EU&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;exceptions&quot;&gt;Exceptions&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;When the number outline is in steno order, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; key used should be on the &lt;strong&gt;opposite side&lt;/strong&gt; of the keyboard from the &lt;strong&gt;first digit&lt;/strong&gt; stroked if that digit is: &lt;ol&gt; &lt;li&gt; &lt;p&gt;composed of two repeated instances of the same digit (22, 66 etc), requiring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-D&lt;/code&gt; key&lt;/p&gt; &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/images/2021-01-17/022-tiny.png&quot; alt=&quot;img 022-tiny&quot; style=&quot;margin-right: 0.5rem;&quot; /&gt; &lt;img src=&quot;/assets/images/2021-01-17/066-tiny.png&quot; alt=&quot;img 066-tiny&quot; style=&quot;margin-left: 0.5rem;&quot; /&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;a multiple of 100 under 1000 (100, 700 etc), requiring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Z&lt;/code&gt; key&lt;/p&gt; &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/images/2021-01-17/100-tiny.png&quot; alt=&quot;img 100-tiny&quot; style=&quot;margin-right: 0.5rem;&quot; /&gt; &lt;img src=&quot;/assets/images/2021-01-17/700-tiny.png&quot; alt=&quot;img 700-tiny&quot; style=&quot;margin-left: 0.5rem;&quot; /&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the thumb cluster rule above, there are unavoidable exceptions for numbers 60, 70, 80, and 90, where the left &lt;a href=&quot;https://en.wikipedia.org/wiki/Ring_finger&quot;&gt;ring finger&lt;/a&gt; needs to be brought down into the left thumb cluster for stroking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; key in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#O&lt;/code&gt; chord.&lt;/p&gt; &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/images/2021-01-17/060-tiny.png&quot; alt=&quot;img 060-tiny&quot; style=&quot;margin-right: 0.5rem;&quot; /&gt; &lt;img src=&quot;/assets/images/2021-01-17/090-tiny.png&quot; alt=&quot;img 090-tiny&quot; style=&quot;margin-left: 0.5rem;&quot; /&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Since stroking the number 900 requires the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-T&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Z&lt;/code&gt; keys, and they are diagonal from each other, it is impossible to stroke naturally using standard steno hand positions. Therefore, stroking the outline for 900 requires a &lt;a href=&quot;https://www.artofchording.com/layout/d-and-z.html#the-d-and-z-keys&quot;&gt;“Philly shift”&lt;/a&gt;, where your right ring finger strokes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-T&lt;/code&gt; key, rather than your right &lt;a href=&quot;https://en.wikipedia.org/wiki/Little_finger&quot;&gt;little finger&lt;/a&gt;.&lt;/p&gt; &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/images/2021-01-17/900-tiny.png&quot; alt=&quot;img 900-tiny&quot; style=&quot;margin-left: 0.5rem;&quot; /&gt;&lt;/p&gt; &lt;p&gt;Plover does offer the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#EUT&lt;/code&gt; outline to avoid needing to perform a Philly shift, but I do not find the Philly shift &lt;em&gt;that&lt;/em&gt; awkward to stroke given that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; keys are already moving my hands out of standard steno positions anyway, and I want keep building muscle memory on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Z&lt;/code&gt; pattern and not have to remember this one potential exception to the 100s rule.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;all-that-just-for-numbers&quot;&gt;All that just for numbers?&lt;/h2&gt; &lt;p&gt;You may be reeling in horror at the need to remember so much just to chord two-digit numbers, and vow to just stroke digits individually, or temporarily switch to QWERTY mode to type numbers. I certainly could not argue with you!&lt;/p&gt; &lt;p&gt;But, I personally find this set of number outlines comfortable enough to stroke, and plan to continue giving them a go moving forward. If you are also a student, or a practitioner, of Plover stenography, then I hope that the materials in this blog post serve as some reference, or at least as some amusement.&lt;/p&gt; &lt;p&gt;If you do end up using the chords, or have any opinions on rule variations that you think would work better, please reach out to me or leave a comment!&lt;/p&gt;</content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="stenography"/><category term="georgi"/><category term="mechanical-keyboards"/><summary type="html">Adapt your steno habits from using a number bar to a set of thumb cluster number keys.</summary></entry></feed>