<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://www.paulfioravanti.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://www.paulfioravanti.com/" rel="alternate" type="text/html"/><updated>2023-12-21T12:31:08+11:00</updated><id>https://www.paulfioravanti.com/feed.xml</id><title type="html">Floor and Varnish</title><subtitle>The permanent drafts folder for brain dumps of Paul Fioravanti</subtitle><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><entry><title type="html">Coding Test Review: Culture Amp</title><link href="https://www.paulfioravanti.com/blog/coding-test-review-culture-amp/" rel="alternate" type="text/html" title="Coding Test Review: Culture Amp"/><published>2023-12-07T15:10:00+11:00</published><updated>2023-12-19T12:05:00+11:00</updated><id>https://www.paulfioravanti.com/blog/coding-test-review-culture-amp</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/coding-test-review-culture-amp/"><![CDATA[<p>Cold on the heels of the <a href="https://www.paulfioravanti.com/blog/coding-test-review-sentia/">last coding test review I did</a>, I have decided to write up some thoughts on my attempts at a couple of <a href="https://www.cultureamp.com/">Culture Amp</a>’s coding tests.</p> <p>I was originally forwarded Culture Amp’s web developer back end and front end tests a few years ago, so I cannot be certain whether they are still being used at the time of this writing, but I can at least confirm they were a part of their hiring process at one point in time.</p> <p>In preparation for writing this post, I went back and cleaned out some digital cobwebs on my solutions, including changing <a href="https://en.wikipedia.org/wiki/Continuous_integration">continuous integration</a> provider to <a href="https://github.com/features/actions">GitHub Actions</a>, and <a href="https://en.wikipedia.org/wiki/Code_refactoring">refactoring</a> code to suit my current sensibilities around what I think “good” code looks like. But, for the most part, the main code structures have stayed the same.</p> <p>I will review the back end test first, then the front end, and the companion codebases can be found here:</p> <ul> <li><a href="https://github.com/paulfioravanti/survey_tool_ruby">Survey Tool Ruby</a> (back end)</li> <li><a href="https://github.com/paulfioravanti/survey_tool_elixir">Survey Tool Elixir</a> (back end)</li> <li><a href="https://github.com/paulfioravanti/survey_tool_elm">Survey Tool Elm</a> (front end)</li> </ul> <blockquote> <p>Disclaimer: I am not, nor have ever been, an employee of Culture Amp, nor have I ever applied for employment there, nor is this post some kind of attempt to get them to employ me; I just did their coding tests for my own definition of “fun”.</p> <p>If you are applying there, or plan to in the future, you may want to stop reading, and consider pretending that this blog post (and <a href="https://github.com/search?q=+culture+amp+test&amp;type=repositories&amp;s=&amp;o=desc">all the other solutions people have posted</a>) does not exist, so you can greet their coding tests with fresh eyes.</p> </blockquote> <h2 id="thematic-relevance">Thematic Relevance</h2> <p>Before getting started, I would like to call out what I think is one of the strongest features of the tests: they are thematically relevant to the business.</p> <p>When planning technical tests for candidates to perform, it can be tempting to just get them to do either an <a href="https://joneaves.wordpress.com/2014/07/21/toy-robot-coding-test/">existing popular coding test</a>, an example from a coding community like <a href="https://exercism.org/">Exercism</a>, or an obscure problem from some for-pay coding assessment platform. Culture Amp chose not to take this route: <em>surveys</em> would seem to be one of the primary mechanisms that their product uses to collect employee engagement feedback and gauge their well-being, and, to their credit, both custom coding tests revolve around them.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2023-12-07/jeremy-thomas-FO7bKvgETgQ-unsplash.jpg" alt="stack rock on seashore"/> <figcaption> Photo by <a href="https://unsplash.com/@jeremythomasphoto?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Jeremy Thomas </a> on <a href="https://unsplash.com/photos/stack-rock-on-seashore-FO7bKvgETgQ?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Unsplash </a> </figcaption> </figure> </div> <blockquote> <h2 id="original-back-end-test-requirements">Original Back End Test Requirements</h2> <p>Your task is to build a CLI application to parse and display survey data from CSV files, and display the results.</p> <h3 id="data-format">Data Format</h3> <h4 id="survey-data">Survey Data</h4> <p>Included in the folder <code class="language-plaintext highlighter-rouge">example-data</code> are three sample data files defining surveys:</p> <ul> <li><code class="language-plaintext highlighter-rouge">survey-1.csv</code></li> <li><code class="language-plaintext highlighter-rouge">survey-2.csv</code></li> <li><code class="language-plaintext highlighter-rouge">survey-3.csv</code></li> </ul> <p>Each row represents a question in that survey with headers defining what question data is in each column.</p> <h4 id="response-data">Response Data</h4> <p>And three sample files containing responses to the corresponding survey:</p> <ul> <li><code class="language-plaintext highlighter-rouge">survey-1-responses.csv</code></li> <li><code class="language-plaintext highlighter-rouge">survey-2-responses.csv</code></li> <li><code class="language-plaintext highlighter-rouge">survey-3-responses.csv</code></li> </ul> <p>Response columns are always in the following order:</p> <ul> <li>Email</li> <li>Employee Id</li> <li>Submitted At Timestamp (if there is no submitted at timestamp, you can assume the user did not submit a survey)</li> <li>Each column from the fourth onwards are responses to survey questions.</li> <li>Answers to Rating Questions are always an integer between (and including) 1 and 5.</li> <li>Blank answers represent not answered.</li> <li>Answers to Single Select Questions can be any string.</li> </ul> <h3 id="the-application">The Application</h3> <p>Your coding challenge is to build an application that allows the user to specify a survey file and a file for it’s results. It should read them in and present a summary of the survey results. A command line application that takes a data file as input is sufficient.</p> <p>The output should include:</p> <ol> <li> <p>The participation percentage and total participant counts of the survey.</p> <ul> <li>Any response with a ‘<code class="language-plaintext highlighter-rouge">submitted_at</code>’ date has submitted and is said to have participated in the survey.</li> </ul> </li> <li> <p>The average for each rating question</p> <ul> <li>Results from unsubmitted surveys should not be considered in the output.</li> </ul> </li> </ol> <h3 id="other-information">Other information</h3> <p>Please include a Readme with any additional information you would like to include. You may wish to use it to explain any design decisions.</p> <p>Despite this being a small command line app, please approach this as you would a production problem using whatever approach to coding and testing you feel appropriate. Successful candidates will be asked to extend their implementation in a pair programming session as a component of the interview, so consider extensibility.</p> </blockquote> <h2 id="general-approach">General Approach</h2> <p>These requirements read to me like an “<a href="https://en.wikipedia.org/wiki/Extract,_transform,_load">extract, transform, load</a>” problem:</p> <ul> <li>survey raw data needs to be <strong><em>extracted</em></strong> from <a href="https://en.wikipedia.org/wiki/Comma-separated_values">CSV</a> files</li> <li>then parsed and <strong><em>transformed</em></strong> into a summary report</li> <li>then <strong><em>loaded</em></strong> (read: output) through the <a href="https://en.wikipedia.org/wiki/Command-line_interface">CLI</a></li> </ul> <p>This thinking helped informed how the application architecture evolved, as the responsibilities ended up being split between three main modules:</p> <h3 id="survey_parser"><code class="language-plaintext highlighter-rouge">survey_parser</code></h3> <p>Responsible for knowing how to open CSV files and read in their data rows. I also decided to slightly expand the scope of an “extractor” by having it take on some of the data transformation responsibilities: making it the bridge between raw data in files, and <a href="https://cio-wiki.org/wiki/Data_Enrichment">rich</a> data structures within the application.</p> <h3 id="report"><code class="language-plaintext highlighter-rouge">report</code></h3> <p>Responsible for collating all the disparate parts of the rich data together to <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter">present</a> a structured report, in plain text, that was ready to be sent to the “loader”.</p> <h3 id="cli"><code class="language-plaintext highlighter-rouge">cli</code></h3> <p>Responsible for all functionality related to input and output on a <a href="https://en.wikipedia.org/wiki/Terminal_emulator">terminal emulator</a>. It parses CLI flags and arguments given to it, and prints out the text of survey report tables (or any errors) to the window.</p> <h3 id="technical-choices">Technical Choices</h3> <p>At the time I received the test, Culture Amp was hiring <a href="https://www.ruby-lang.org/en/">Ruby</a> developers, so I decided to go with that flow. Ruby has a <a href="https://github.com/ruby/csv">CSV module</a> built-in to its standard library, meaning that the only application-level external library I chose to leverage was <a href="https://github.com/tj/terminal-table">Terminal Table</a> to help me construct the survey report.</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2023-12-07/ruby-screenshot.jpg" alt="Screenshot of the survey tool implementation done in Ruby"/> <figcaption> <a href="https://github.com/paulfioravanti/survey_tool_ruby"> Survey Tool Ruby </a> </figcaption> </figure> </div> <p>I try to make coding test solutions “showcase code”, and for me that means using as many development tools as possible that can help assess and (subjectively) affirm whether I have written code that is “acceptable” within the standards of the chosen language community. For this project, those tools were:</p> <ul> <li><a href="https://github.com/minitest/minitest">minitest</a>: Although I was more familiar with <a href="https://rspec.info/">RSpec</a>, I decided to use minitest due to my newfound affection for more terse syntax during testing, no doubt influenced from using <a href="https://hexdocs.pm/ex_unit/ExUnit.html">ExUnit</a> in my <a href="https://elixir-lang.org/">Elixir</a> projects. No regrets; would use again</li> <li><a href="https://github.com/simplecov-ruby/simplecov">SimpleCov</a>: It seems to not be <em>de jour</em> as of this writing to aim for 100% test coverage, but I do anyway. I think if you write code that contains business logic, you should know what it does, and how it acts under a variety of circumstances: coverage gives me a litmus test to make sure I do not miss anything obvious</li> <li><a href="https://github.com/rubocop/rubocop">Rubocop</a> and <a href="https://github.com/troessner/reek">Reek</a>: I like having these little robots looking over my shoulder, slapping my wrist whenever I write code that could potentially violate the <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">principle of least surprise</a> to other Ruby developers</li> <li><a href="https://github.com/lsegal/yard">YARD</a>: Documentation is the most neglected part of many software application projects, so this was a personal challenge to just make sure I grind it out for great justice</li> </ul> <p>With regard to code implementation choices, the following are a couple I think are worth making note of.</p> <h3 id="facades">Facades</h3> <p><a href="https://en.wikipedia.org/wiki/Facade_pattern">Facades</a> are easily my favourite <a href="https://en.wikipedia.org/wiki/Software_design_pattern">software design pattern</a>, and you can see five of them in the codebase. Wherever there is a “boundary” <code class="language-plaintext highlighter-rouge">foo.rb</code> file and a corresponding <code class="language-plaintext highlighter-rouge">foo/</code> directory containing all of the <code class="language-plaintext highlighter-rouge">Foo</code> module’s implementation details. The front-facing <code class="language-plaintext highlighter-rouge">foo.rb</code> “API” file contains no real logic, and just <a href="https://ruby-doc.org/3.2.2/stdlibs/forwardable/Forwardable.html">delegates</a> method calls to its child modules, masking complexity from other modules that call it.</p> <h3 id="adapters">Adapters</h3> <p>Whenever I need to leverage code from third-party libraries, like Terminal Table, I instinctively want to lock down and quarantine its use to a single module with an <a href="https://en.wikipedia.org/wiki/Adapter_pattern">adapter</a>, rather than have it permeate throughout the codebase. What if I need to change table libraries? I would rather only have to change one module, than go hunting through the codebase for everywhere its referenced. Therefore, you will only ever see <code class="language-plaintext highlighter-rouge">Terminal::Table</code> referenced inside <code class="language-plaintext highlighter-rouge">SurveyTool::Report::Table</code>.</p> <p>I have even done the same thing with internal methods like good ol’ <a href="https://ruby-doc.org/3.2.2/Kernel.html#method-i-puts"><code class="language-plaintext highlighter-rouge">puts</code></a>. It may be available everywhere thanks to it being a part of Ruby’s <a href="https://ruby-doc.org/3.2.2/Kernel.html"><code class="language-plaintext highlighter-rouge">Kernel</code></a> module, but I have made outputting to the terminal strictly the concern of the <code class="language-plaintext highlighter-rouge">CLI</code> module. So, I treat <code class="language-plaintext highlighter-rouge">puts</code> like a third party library, and force all code to go through <code class="language-plaintext highlighter-rouge">CLI</code> to get to it, in an adapter-like way. Is this too pedantic? Perhaps, but I still like having a <a href="https://en.wikipedia.org/wiki/Single_source_of_truth">single source of truth</a> for specific functionality.</p> <div class="centered-image" style="width: 95%"> <figure> <img src="/assets/images/2023-12-07/jared-rice-xce530fBHrk-unsplash.jpg" alt="woman in black tank top sitting on brown wooden dock during daytime"/> <figcaption> Photo by <a href="https://unsplash.com/@jareddrice?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Jared Rice </a> on <a href="https://unsplash.com/photos/woman-in-black-tank-top-sitting-on-brown-wooden-dock-during-daytime-xce530fBHrk?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Unsplash </a> </figcaption> </figure> </div> <h2 id="take-two-elixir">Take Two: Elixir</h2> <p>I enjoyed doing this test enough that I wondered how difficult doing a straight port of it to Elixir would be. To the surprise of probably no one who has experience with both Ruby and Elixir, it was fairly straightforward (though this is also likely due to Elixir having changed the way I write Ruby to have a more <a href="https://en.wikipedia.org/wiki/Functional_programming">functional</a> bent), but still a good learning experience.</p> <p>The general approach and technical choices were mostly the same, with a few necessary tweaks like needing to use an <a href="https://github.com/beatrichartz/csv">external CSV library</a> this time, and <a href="https://github.com/djm/table_rex">TableRex</a> for the report. I could not get the display of the reports to mimic Terminal Table nicely, so I decided to make them look less table-like.</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2023-12-07/elixir-screenshot.jpg" alt="Screenshot of the survey tool implementation done in Elixir"/> <figcaption> <a href="https://github.com/paulfioravanti/survey_tool_elixir"> Survey Tool Elixir </a> </figcaption> </figure> </div> <p>The flavour of the development stack was similar to the Ruby version as well: <a href="https://hexdocs.pm/ex_unit/ExUnit.html">ExUnit</a> for tests, <a href="https://github.com/parroty/excoveralls">ExCoveralls</a> for coverage, <a href="https://github.com/rrrene/credo">Credo</a> for code quality, and <a href="https://github.com/elixir-lang/ex_doc">ExDoc</a> for documentation.</p> <p>Further to that, though, Elixir also has a nice <a href="https://hexdocs.pm/elixir/typespecs.html">Typespec</a> notation that can be used with tools like <a href="https://www.erlang.org/doc/man/dialyzer.html">Dialyzer</a>, which makes for a great extra set of technical documentation (good for showcase code!), and can also help surface some kinds of bugs. So, I leveraged the <a href="https://github.com/jeremyjh/dialyxir">Dialyxir</a> and <a href="https://github.com/esl/gradient">Gradient</a> libraries to help keep an eye on my types during development.</p> <h3 id="sharing-types">Sharing Types</h3> <p>Speaking of types, probably my biggest learning regarding their use in Elixir during this portover was figuring out how to:</p> <ul> <li>surface a type declared in a internal module up to its facade boundary module</li> <li>have other modules be able to use those surfaced types without knowing some (or any) of their specific implementation details</li> </ul> <p>Let’s illustrate this with an example. <code class="language-plaintext highlighter-rouge">SurveyTool.Report.Table</code>, an implementation detail module of <code class="language-plaintext highlighter-rouge">SurveyTool.Report</code>, needs to know about the <code class="language-plaintext highlighter-rouge">SurveyTool.SurveyParser.Survey</code> type as part of the typespecs of its <code class="language-plaintext highlighter-rouge">render/1</code> function, as well as during pattern matching in its <code class="language-plaintext highlighter-rouge">survey_body/2</code> function:</p> <p><strong><code class="language-plaintext highlighter-rouge">lib/survey_tool/report/table.ex</code></strong></p> <div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">Report</span><span class="o">.</span><span class="no">Table</span> <span class="k">do</span>
  <span class="c1"># ...</span>
  <span class="n">alias</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">SurveyParser</span><span class="o">.</span><span class="no">Survey</span>
  <span class="n">alias</span> <span class="no">TableRex</span><span class="o">.</span><span class="no">Table</span>

  <span class="nv">@spec</span> <span class="n">render</span><span class="p">(</span><span class="no">Survey</span><span class="o">.</span><span class="n">t</span><span class="p">())</span> <span class="p">::</span> <span class="ss">:ok</span>
  <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">survey</span><span class="p">)</span> <span class="k">do</span>
    <span class="c1"># ...</span>
    <span class="no">Table</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
    <span class="o">|&gt;</span> <span class="c1"># ...</span>
    <span class="o">|&gt;</span> <span class="n">survey_body</span><span class="p">(</span><span class="n">survey</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">survey_body</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="p">%</span><span class="no">Survey</span><span class="p">{</span><span class="ss">participant_count:</span> <span class="n">count</span><span class="p">})</span> <span class="ow">when</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="k">do</span>
    <span class="n">table</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">survey_body</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="p">%</span><span class="no">Survey</span><span class="p">{</span><span class="ss">questions:</span> <span class="n">questions</span><span class="p">})</span> <span class="k">do</span>
    <span class="c1"># add questions to table etc...</span>
  <span class="k">end</span>
  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div> <p>The encapsulation problem here is that <code class="language-plaintext highlighter-rouge">SurveyTool.Report.Table</code> is reaching past the <code class="language-plaintext highlighter-rouge">SurveyTool.SurveyParser</code> boundary, and into <code class="language-plaintext highlighter-rouge">SurveyTool.SurveyParser.Survey</code>, an implementation detail. So, how can we provide the <code class="language-plaintext highlighter-rouge">SurveyTool.Report.Table</code> module with the information it needs, at the <code class="language-plaintext highlighter-rouge">SurveyTool.SurveyParser</code> level?</p> <p><code class="language-plaintext highlighter-rouge">SurveyTool.SurveyParser.Survey</code> exposes its <code class="language-plaintext highlighter-rouge">t()</code> type in the following way:</p> <p><strong><code class="language-plaintext highlighter-rouge">lib/survey_tool/survey_parser/survey.ex</code></strong></p> <div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">SurveyParser</span><span class="o">.</span><span class="no">Survey</span> <span class="k">do</span>
  <span class="c1"># ...</span>
  <span class="n">alias</span> <span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">as:</span> <span class="no">Survey</span>

  <span class="nv">@typedoc</span> <span class="s2">"Survey struct type."</span>
  <span class="nv">@type</span> <span class="n">t</span><span class="p">()</span> <span class="p">::</span> <span class="p">%</span><span class="no">Survey</span><span class="p">{</span>
          <span class="ss">participant_count:</span> <span class="n">integer</span><span class="p">,</span>
          <span class="ss">questions:</span> <span class="n">questions_list</span><span class="p">(),</span>
          <span class="ss">response_count:</span> <span class="n">integer</span>
        <span class="p">}</span>
  <span class="nv">@typep</span> <span class="n">questions_list</span><span class="p">()</span> <span class="p">::</span> <span class="c1"># ...</span>
  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div> <p>We can “hoist” this type up to the <code class="language-plaintext highlighter-rouge">SurveyTool.SurveyParser</code> boundary module and expose it there:</p> <p><strong><code class="language-plaintext highlighter-rouge">lib/survey_tool/survey_parser.ex</code></strong></p> <div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">SurveyParser</span> <span class="k">do</span>
  <span class="c1"># ...</span>
  <span class="n">alias</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">SurveyParser</span><span class="o">.</span><span class="no">Survey</span>

  <span class="nv">@type</span> <span class="n">survey</span><span class="p">()</span> <span class="p">::</span> <span class="no">Survey</span><span class="o">.</span><span class="n">t</span><span class="p">()</span>
  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div> <p>Now, we can change <code class="language-plaintext highlighter-rouge">SurveyTool.Report.Table</code> to bring in the <code class="language-plaintext highlighter-rouge">survey()</code> type and use it as its own <a href="https://hexdocs.pm/elixir/typespecs.html#user-defined-types">private type</a> (<code class="language-plaintext highlighter-rouge">@typep</code>):</p> <p><strong><code class="language-plaintext highlighter-rouge">lib/survey_tool/report/table.ex</code></strong></p> <div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">Report</span><span class="o">.</span><span class="no">Table</span> <span class="k">do</span>
  <span class="c1"># ...</span>
  <span class="n">alias</span> <span class="no">SurveyTool</span><span class="o">.</span><span class="no">SurveyParser</span>
  <span class="n">alias</span> <span class="no">TableRex</span><span class="o">.</span><span class="no">Table</span>

  <span class="nv">@typep</span> <span class="n">survey</span><span class="p">()</span> <span class="p">::</span> <span class="no">SurveyParser</span><span class="o">.</span><span class="n">survey</span><span class="p">()</span>

  <span class="nv">@spec</span> <span class="n">render</span><span class="p">(</span><span class="n">survey</span><span class="p">())</span> <span class="p">::</span> <span class="ss">:ok</span>
  <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">survey</span><span class="p">)</span> <span class="k">do</span>
    <span class="c1"># ...</span>
    <span class="no">Table</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
    <span class="o">|&gt;</span> <span class="c1"># ...</span>
    <span class="o">|&gt;</span> <span class="n">survey_body</span><span class="p">(</span><span class="n">survey</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">survey_body</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="p">%</span><span class="n">survey</span><span class="p">{</span><span class="ss">participant_count:</span> <span class="n">count</span><span class="p">})</span> <span class="ow">when</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="k">do</span>
    <span class="n">table</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">survey_body</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="p">%</span><span class="n">survey</span><span class="p">{</span><span class="ss">questions:</span> <span class="n">questions</span><span class="p">})</span> <span class="k">do</span>
    <span class="c1"># add questions to table etc...</span>
  <span class="k">end</span>
  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div> <p>And, this should work. I did get a warning about <code class="language-plaintext highlighter-rouge">variable "survey" is unused</code>, but that can be silenced by changing <code class="language-plaintext highlighter-rouge">%survey</code> references to <code class="language-plaintext highlighter-rouge">%_survey</code>.</p> <p>If a module using an external type does <em>not</em> need to know about the type’s implementation details, rather than expose the <code class="language-plaintext highlighter-rouge">@type</code> at the boundary, we can use <code class="language-plaintext highlighter-rouge">@opaque</code> instead (see <a href="https://github.com/paulfioravanti/survey_tool_elixir/blob/master/lib/survey_tool/survey_parser.ex"><code class="language-plaintext highlighter-rouge">survey_parser.ex</code></a> and <a href="https://github.com/paulfioravanti/survey_tool_elixir/blob/master/lib/survey_tool/report/question_and_answers.ex"><code class="language-plaintext highlighter-rouge">question_and_answers.ex</code></a> in the companion codebase for an example of that).</p> <p>Let’s now head over to web browser land and check out the front end test!</p> <div class="centered-image" style="width: 95%"> <figure> <img src="/assets/images/2023-12-07/jannis-brandt-8manzosDSGM-unsplash.jpg" alt="fruit lot on ceramic plate"/> <figcaption> Photo by <a href="https://unsplash.com/@jannisbrandt?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Jannis Brandt </a> on <a href="https://unsplash.com/photos/fruit-lot-on-ceramic-plate-8manzosDSGM?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Unsplash </a> </figcaption> </figure> </div> <blockquote> <h2 id="original-front-end-test-requirements">Original Front End Test Requirements</h2> <p>This repository contains a small number of static JSON files, which represent the responses from an HTTP API that offers access to a database of survey results.</p> <p>Your task is to build a web front end that displays the data supplied by this API. You must process the survey data and display the results in a clear, usable interface.</p> <h3 id="getting-started">Getting Started</h3> <p>We suggest you start by setting up an HTTP server that will serve up these JSON files upon request. This may be the same server that serves your web application to consume the API, but make sure to design your application in such a way that you could easily point it to an arbitrary base URL for the API, somewhere else on the Internet.</p> <p>One you’ve got the API available, use whatever client-side libraries or frameworks you like to build the application that consumes it.</p> <p>(Tip: If your application will access the API directly from the browser, using the same server for both your application and the API it consumes will save you having to deal with cross-origin requests. Of course, if you enjoy that sort of thing, feel free to go for it!)</p> <h3 id="the-api">The API</h3> <p><code class="language-plaintext highlighter-rouge">index.json</code> is returned when you send a GET request for the root URL. It returns a list of the surveys that are stored in the database, and high-level statistics for each. For each survey, a URL is included that points to one of the other JSON files.</p> <p>The remaining JSON files each provide full response data for one of these surveys. Each survey is broken into one or more themes, each theme contains one or more questions and each question contains a list of responses. A response represents an individual user (<code class="language-plaintext highlighter-rouge">"respondent_id"</code>) answering an individual question (<code class="language-plaintext highlighter-rouge">"question_id"</code>). The content of each response represents an agreement rating on a scale of <code class="language-plaintext highlighter-rouge">"1"</code> (strongly disagree) to <code class="language-plaintext highlighter-rouge">"5"</code> (strongly agree). If you wished, you could obtain all of the responses for a single user by consulting all of the responses with that user’s <code class="language-plaintext highlighter-rouge">"respondent_id"</code>.</p> <h3 id="requirements">Requirements</h3> <p>Your application should include:</p> <ul> <li>a page that lists all of the surveys and allows the user to choose one to view its results;</li> <li>a page that displays an individual survey’s results, including: <ul> <li>participation rate as a percentage</li> <li>the average rating (from 1 to 5) for each question</li> </ul> </li> </ul> <p>Responses with an empty rating should be considered non-responses (questions skipped by the survey respondent). These responses should be excluded when calculating the average.</p> <p>You can deliver a set of static HTML pages that consume the API data with JavaScript, but keep in mind that we need to be able to read your code, so if you’re compiling your JavaScript in any way, please include your source code too. Alternatively, if you want to build an application that runs on its own web server, that’s okay too.</p> <h3 id="recommendations">Recommendations</h3> <ul> <li>Be creative in considering the right way to display the results.</li> <li>Feel free to use frameworks and libraries, but keep in mind that we are looking for something that demonstrates that you can write good front-end code, not just wire up a framework.</li> <li>Static JSON files load pretty quickly, but not all web APIs are so performant. Consider how your application will behave if the API is slow.</li> <li>Include a README file with clear build instructions that we can follow.</li> <li>Include in your README any other details you would like to share, such as tradeoffs you chose to make, what areas of the problem you chose to focus on and the reasons for your design decisions.</li> <li>We like tests.</li> </ul> <p>Beyond meeting the minimum requirements above, it’s up to you where you want to focus. We don’t expect a fully-finished, production-quality web application; rather, we’re happy for you to focus on whatever areas you feel best showcase your skills.</p> <h3 id="submitting-your-solution">Submitting your solution</h3> <p>Assuming you use Git to track changes to your code, when you’re ready to submit your solution, please use <code class="language-plaintext highlighter-rouge">git bundle</code> to package up a copy of your repository (with complete commit history) as a single file and send it to us as an email attachment.</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git bundle create front-end-coding-test.bundle master
</span></code></pre></div> </div> <p>We’re looking forward to your innovative solutions!</p> </blockquote> <h2 id="approach">Approach</h2> <p>In my experience, back end web developers tend to not need to write that many CLI applications, so these requirements feel more representative of the kind of work a front end web developer actually does on a more regular basis. However, there is no designer handing you a pretty interface to implement, here: you have to muster up your own creativity in determining how to display the data. This put me out of my personal comfort zone, so it was a good test to force me think more about web page design than I usually would.</p> <p>For the HTTP server, since my head was already in Elixir-land from the back end test, I chose it to serve up the static JSON files. Using a full blown web application framework like <a href="https://www.phoenixframework.org/">Phoenix</a> for this seemed like overkill, so I just used an Elixir application with <a href="https://github.com/elixir-plug/plug_cowboy">Plug.Cowboy</a>, which worked out perfectly.</p> <p>For the web front end, since Culture Amp was actively using <a href="https://elm-lang.org/">Elm</a> at the time I received the test<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, I chose it to write a web application. I employed a similar set of design principles and development tools to the back end: <a href="https://github.com/elm-explorations/test">elm test</a> and <a href="https://github.com/stoeffel/elm-verify-examples">elm-verify-examples</a> for testing, <a href="https://github.com/zwilias/elm-coverage">Elm Coverage</a> for test coverage, as well as <a href="https://github.com/stil4m/elm-analyse">Elm Analyse</a> and <a href="https://github.com/jfmengels/elm-review">elm-review</a> for code quality control.</p> <h3 id="design">Design</h3> <p>Design and writing <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a> are some of my weak points, so I decided to leverage a “functional CSS” library to help me out with making things look nice enough for something designed by a developer that leans more to the back of the <a href="https://en.wikipedia.org/wiki/Solution_stack">stack</a>. At the time I wrote the solution, it seemed like <a href="https://tailwindcss.com/">Tailwind CSS</a> and <a href="https://tachyons.io/">Tachyons</a> were battling it out for developer mindshare, and I ended up choosing the latter solely based on a friend’s recommendation.</p> <p>For the general colour scheme, I started with just basic black, white, and grey, with splashes of <span style="color: rgb(252,51,90); font-weight: bold;">the pink colour</span> that Culture Amp (now previously) used for its branding. I kind of like how it turned out, so I did not iterate further on the colours, though that could just be indicative of a lack of creative flair on my part.</p> <p>Here is how the pages turned out.</p> <h3 id="survey-list-page">Survey List Page</h3> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2023-12-07/elm-list-surveys-screenshot.png" alt="Screenshot of my implementation of the survey list page"/> <figcaption> <a href="https://github.com/paulfioravanti/survey_tool_elm"> Survey Tool Elm </a> </figcaption> </figure> </div> <p>The survey list page is a fairly straightforward display of data of the JSON data in a list-like format. Since I was experimenting with Tachyon classes, I added very small flairs of slightly embiggening the item, as well as changing its colours, on <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event"><code class="language-plaintext highlighter-rouge">mouseover</code></a>.</p> <p>This screen shows the success case of actually being able to fetch the JSON data, but when the app is still fetching the data, or the fetching fails, then an appropriate loading or failure page is shown. The Elm code leverages the <a href="https://github.com/krisajenkins/remotedata">RemoteData for Elm</a> package to help manage these states.</p> <h3 id="survey-detail-page">Survey Detail Page</h3> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2023-12-07/elm-show-survey-screenshot.png" alt="Screenshot of my implementation of the survey detail page"/> </figure> </div> <p>The survey detail page is presented in a similar way to how the back end app output its data to the terminal: summary data is repeated at the top of the screen, and then all the questions are presented in a table style format.</p> <p>Use of the word “average” for every score felt a bit repetitive, so I changed it to <span style="font-style: italic; font-family: times, serif; text-decoration: overline">x</span>. However, if I re-wrote this page again, I would probably reconsider using what may not be a widely known <a href="https://en.wikipedia.org/wiki/Arithmetic_mean">notation for “average”</a>.</p> <h4 id="tooltip-histogram">Tooltip Histogram</h4> <div class="centered-image" style="width: 50%; float: right; margin-left: 10px;"> <figure style="margin-top: 0;"> <img src="/assets/images/2023-12-07/facebook-likes.jpg" alt="Screenshot of a Facebook post showing how many people liked it"/> <figcaption> A random Facebook post showing its likes in the form of a tooltip </figcaption> </figure> </div> <p>I believe that displaying the participation percentage, and the average score for each question, technically clears the display requirements. But, I was curious about being able to display the questions in such a way where you could get an idea about <em>how many</em> respondents chose a specific score for a question, and <em>who specifically</em> chose each score. That curiosity led to creation of the tooltip <a href="https://en.wikipedia.org/wiki/Histogram">histogram</a> you can see in the screenshot above, which shows when <code class="language-plaintext highlighter-rouge">mouseover</code>-ing a score.</p> <p>Inspired by the way <a href="https://www.facebook.com/">Facebook</a> displays post likes, I decided to shamelessly rip it off to show the respondent histogram. Since the data only contains user IDs, it is limited in what it can display, but I think it is a nice bit of extra functionality, and a good example of what other information can be derived from a data set by <a href="https://github.com/paulfioravanti/survey_tool_elm/blob/master/front_end/src/SurveyResponse/RespondentHistogram.elm">doing some folding</a>.</p> <p>You could say that the result ended up being adjacent to the optional test requirement of “if you wished, you could obtain all of the responses for a single user by consulting all of the responses with that user’s <code class="language-plaintext highlighter-rouge">respondent_id</code>”: instead, though, we get “all the users for a single response”.</p> <h4 id="internationalisation">Internationalisation</h4> <p>Finally, completely out of scope of the requirements (but not something whose addiction detracts from anything), is internationalisation, something I value highly in applications.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2023-12-07/internationalisation.png" alt="Screenshot of my implementation of the survey list page in Japanese"/> </figure> </div> <p>I added in switchable app-level translations in Italian and Japanese (via a flag menu at the top of the screen), but obviously this does not extend to any information that comes in from the JSON files. You can read more about my adventures with internationalisation in Elm in <em><a href="https://www.paulfioravanti.com/blog/runtime-language-switching-elm/">Runtime Language Switching in Elm</a></em>.</p> <div class="centered-image" style="width: 95%"> <figure> <img src="/assets/images/2023-12-07/max-van-den-oetelaar-buymYm3RQ3U-unsplash.jpg" alt="and breathe neon sign on tree"/> <figcaption> Photo by <a href="https://unsplash.com/@maxvdo?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Max van den Oetelaar </a> on <a href="https://unsplash.com/photos/and-breathe-neon-sign-on-tre-buymYm3RQ3U?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash"> Unsplash </a> </figcaption> </figure> </div> <h2 id="conclusion">Conclusion</h2> <p>Overall, I enjoyed doing these tests. I think they both struck a good balance between hard requirements, and freedom to solve problems creatively. Their appropriate business-level theming gave them a sense of being grounded in reality, which, as well as holding the interest of a candidate, can help avoid hiring-side doubts when using generic tests (“well, we know they can write a <a href="https://en.wikipedia.org/wiki/Bogosort">bogosort</a>, but can they do what we actually need them to do everyday?”).</p> <p>Personally, when I see that time, effort, and thought has been put into creating new coding tests, it leaves a great first impression on the technical culture of an organisation, and makes me want to leave one as well by submitting the best solution I can. If you, as an organisation, have the time, resources, and ability to create your own custom tests (assuming you do use them, of course), then I would highly recommend it!</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>As of this writing, Culture Amp has stopped using Elm for new code and is “containing” its usage in their codebases moving forward. Their Director of Engineering, Front End, <a href="https://kevinyank.com/">Kevin Yank</a>, in what I consider to be a stellar example of pragmatic technical leadership, outlined why in <em><a href="https://kevinyank.com/posts/on-endings-why-how-we-retired-elm-at-culture-amp/">On Endings: Why &amp; How We Retired Elm at Culture Amp</a></em>, and further discussed it on the <a href="https://elmtown.simplecast.com/episodes/elm-town-54-aloha-with-kevin-yank">Elm Town #54</a> podcast. I highly recommend checking them both out (even though it is sad that Elm lost one of its most high profile early adopter organisations)! <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="ruby"/><category term="elixir"/><category term="elm"/><category term="coding-test"/><category term="tachyons"/><summary type="html"><![CDATA[Did I feel empowered to get the coding tests done for which I am responsible?]]></summary></entry><entry><title type="html">Get on the Same Page as your HID Device</title><link href="https://www.paulfioravanti.com/blog/same-page-hid-device/" rel="alternate" type="text/html" title="Get on the Same Page as your HID Device"/><published>2023-10-25T16:25:00+11:00</published><updated>2023-12-21T10:30:00+11:00</updated><id>https://www.paulfioravanti.com/blog/same-page-hid-device</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/same-page-hid-device/"><![CDATA[<p>I use the <a href="https://en.wikipedia.org/wiki/USB_human_interface_device_class">Human Interface Device</a> (HID) specification to enable programs I write to communicate back and forth directly with my <a href="https://en.wikipedia.org/wiki/USB">USB</a> keyboards.</p> <p>Specifically, I leverage the <a href="https://github.com/libusb/hidapi">HIDAPI</a> library to enable an <a href="https://www.elgato.com/us/en/p/stream-deck-pedal">Elgato Stream Deck Pedal</a> to talk to my <a href="https://qmk.fm/keyboards/georgi/">Georgi</a> keyboard via my computer, and help me use <a href="https://www.openstenoproject.org/plover/">steno</a> chords to defeat demon hordes when playing <a href="https://github.com/mmaulwurff/typist.pk3">Doom Typist</a>.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2023-10-25/georgi.jpg" alt="Georgi keyboard"/> </figure> </div> <p>…Which is all great, when it actually works. However, every time I would attempt to make a connection to the Georgi via my “<a href="https://en.wikipedia.org/wiki/Human_interface_device#Components_of_the_HID_protocol">host</a>” program, sometimes it would work, sometimes not. The failures seemed to happen at completely random intervals, making gameplay frustrating. Was the problem with my code? The device? A platform (in my case macOS) related issue? Something else? I had no idea.</p> <h2 id="example-host">Example Host</h2> <p>Let’s illustrate the problem by recreating (and slightly simplifying) the <a href="https://github.com/libusb/hidapi/blob/baa0dab6114e8654161478e10a20c67cf5d1a1a3/README.md#what-does-the-api-look-like">example host program</a> from the HIDAPI <code class="language-plaintext highlighter-rouge">README</code> file. It will:</p> <ul> <li>Initialise the HID library</li> <li>Attempt to connect to the Georgi using <a href="https://github.com/qmk/qmk_firmware/blob/ca4541699915b37cd1f253bbed51854627efd2ce/keyboards/gboards/georgi/info.json#L6">its Product ID and Vendor ID</a> <a href="https://en.wikipedia.org/wiki/Hexadecimal">hexadecimal</a> values (printing an error message and exiting if it fails)</li> <li>Attempt to read the Georgi’s manufacturer string and print it out</li> <li>Clean up and exit</li> </ul> <p><strong><code class="language-plaintext highlighter-rouge">host.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="c1"> // printf</span><span class="cp">
#include</span> <span class="cpf">&lt;wchar.h&gt;</span><span class="c1"> // wchar_t</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;hidapi.h&gt;</span><span class="cp">
</span>
<span class="cp">#define MAX_STR 255
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">res</span><span class="p">;</span>
  <span class="kt">wchar_t</span> <span class="n">wstr</span><span class="p">[</span><span class="n">MAX_STR</span><span class="p">];</span>
  <span class="n">hid_device</span> <span class="o">*</span><span class="n">handle</span><span class="p">;</span>

  <span class="c1">// Initialize the hidapi library</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">hid_init</span><span class="p">();</span>

  <span class="c1">// Open the Georgi using the VID, PID.</span>
  <span class="n">handle</span> <span class="o">=</span> <span class="n">hid_open</span><span class="p">(</span><span class="mh">0xFEED</span><span class="p">,</span> <span class="mh">0x1337</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Unable to open device</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">hid_exit</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// Read the Manufacturer String</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">hid_get_manufacturer_string</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="n">wstr</span><span class="p">,</span> <span class="n">MAX_STR</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"Manufacturer String: %ls</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">wstr</span><span class="p">);</span>

  <span class="c1">// Close the device</span>
  <span class="n">hid_close</span><span class="p">(</span><span class="n">handle</span><span class="p">);</span>

  <span class="c1">// Finalize the hidapi library</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">hid_exit</span><span class="p">();</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now, compile the file with <a href="https://gcc.gnu.org/"><code class="language-plaintext highlighter-rouge">gcc</code></a> (and <a href="https://www.freedesktop.org/wiki/Software/pkg-config/"><code class="language-plaintext highlighter-rouge">pkg-config</code></a> to bring in the HIDAPI library):</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">gcc $</span><span class="o">(</span>pkg-config <span class="nt">--cflags</span> <span class="nt">--libs</span> hidapi<span class="o">)</span> host.c <span class="nt">-o</span> host
</code></pre></div></div> <p>And, this was the output of running the host file a few times:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Manufacturer String: g Heavy Industries
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Unable to open device
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Manufacturer String: g Heavy Industries
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Manufacturer String: g Heavy Industries
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Unable to open device
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Unable to open device
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Unable to open device
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Unable to open device
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Unable to open device
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Manufacturer String: g Heavy Industries
</span></code></pre></div></div> <p>Looks like pretty random failures to me! There is probably not much more we can do with the host file at the moment, so it would seem the next step in getting to the bottom of this problem would be to dive one level deeper, and see what happens when an attempt to open a device is made.</p> <h2 id="opening-devices">Opening Devices</h2> <p>From the API in the host code, we can see that the <a href="https://github.com/libusb/hidapi/blob/baa0dab6114e8654161478e10a20c67cf5d1a1a3/libusb/hid.c#L915"><code class="language-plaintext highlighter-rouge">hid_open</code></a> function is responsible for opening devices, so let’s check out the HIDAPI codebase and see what it does:</p> <p><a href="https://github.com/libusb/hidapi/blob/baa0dab6114e8654161478e10a20c67cf5d1a1a3/libusb/hid.c#L915"><strong><code class="language-plaintext highlighter-rouge">hidapi/libusb/hid.c</code></strong></a></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hid_device</span> <span class="o">*</span> <span class="nf">hid_open</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">vendor_id</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">product_id</span><span class="p">,</span> <span class="k">const</span> <span class="kt">wchar_t</span> <span class="o">*</span><span class="n">serial_number</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">hid_device_info</span> <span class="o">*</span><span class="n">devs</span><span class="p">,</span> <span class="o">*</span><span class="n">cur_dev</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path_to_open</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">hid_device</span> <span class="o">*</span><span class="n">handle</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="n">devs</span> <span class="o">=</span> <span class="n">hid_enumerate</span><span class="p">(</span><span class="n">vendor_id</span><span class="p">,</span> <span class="n">product_id</span><span class="p">);</span>
    <span class="n">cur_dev</span> <span class="o">=</span> <span class="n">devs</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">cur_dev</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cur_dev</span><span class="o">-&gt;</span><span class="n">vendor_id</span> <span class="o">==</span> <span class="n">vendor_id</span> <span class="o">&amp;&amp;</span> <span class="n">cur_dev</span><span class="o">-&gt;</span><span class="n">product_id</span> <span class="o">==</span> <span class="n">product_id</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// ... serial_number-related code snipped for brevity ...</span>
            <span class="n">path_to_open</span> <span class="o">=</span> <span class="n">cur_dev</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cur_dev</span> <span class="o">=</span> <span class="n">cur_dev</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">path_to_open</span><span class="p">)</span> <span class="p">{</span>
        <span class="cm">/* Open the device */</span>
        <span class="n">handle</span> <span class="o">=</span> <span class="n">hid_open_path</span><span class="p">(</span><span class="n">path_to_open</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">hid_free_enumeration</span><span class="p">(</span><span class="n">devs</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">handle</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>This code retrieves a list of devices that match the vendor and product IDs (<a href="https://github.com/libusb/hidapi/blob/baa0dab6114e8654161478e10a20c67cf5d1a1a3/libusb/hid.c#L787"><code class="language-plaintext highlighter-rouge">hid_enumerate</code></a>)<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>. It then attempts to open the first device it finds in that list where the IDs match (<a href="https://github.com/libusb/hidapi/blob/baa0dab6114e8654161478e10a20c67cf5d1a1a3/libusb/hid.c#L1261"><code class="language-plaintext highlighter-rouge">hid_open_path</code></a>), and returns a <a href="https://en.wikipedia.org/wiki/Handle_(computing)">handle</a> reference to it. Even if the <code class="language-plaintext highlighter-rouge">handle</code> to the device is not <code class="language-plaintext highlighter-rouge">NULL</code>, it is unknown at this point whether it can be read from or written to.</p> <p>This code surprised me because I would have thought that given a set of IDs, that are presumably unique (…but I guess not…?<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>), there would only ever be one device that would get opened. So, given that the host code works <em>sometimes</em>, it seems that when <code class="language-plaintext highlighter-rouge">hid_enumerate</code> is called, the Georgi is <em>sometimes</em> the first device in the returned list (and hence opened successfully), but <em>sometimes</em> not, resulting in the attempted opening of…some other device…?</p> <p>Regardless, what I do know is that the host code will need to change to reflect the dynamic ordering of the list provided from <code class="language-plaintext highlighter-rouge">hid_enumerate</code>, and will need to deal with potentially performing a <code class="language-plaintext highlighter-rouge">hid_get_manufacturer_string</code> function call against each device in that list, until it gets back a successful response.</p> <p>Before starting on those changes, though, how can we find out what devices are actually showing up where we do not expect them? Is there something we can use to show us what HIDAPI is seeing? Thankfully, yes.</p> <h2 id="testing-the-hid-api">Testing the HID API</h2> <p><a href="https://github.com/todbot/hidapitester"><code class="language-plaintext highlighter-rouge">hidapitester</code></a> is a command-line tool that can test out every API call in the HIDAPI library. Let’s first use it to get the lay of the device land by asking it to just list the available devices that are on my computer:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./hidapitester <span class="nt">--list</span>
<span class="go">05AC/8104: Apple -
05AC/8104: Apple -
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
0000/0000: Apple -
0000/0000: Apple - Headset
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
FEED/1337: g Heavy Industries - Georgi
0FD9/0086: Elgato - Stream Deck Pedal
05AC/8104: Apple -
05AC/8104: Apple -
05AC/0342:  - Keyboard Backlight
0000/0000: Apple -
0000/0000: APPL - BTM
0000/0000: Apple -
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
FEED/1337: g Heavy Industries - Georgi
FEED/1337: g Heavy Industries - Georgi
FEED/1337: g Heavy Industries - Georgi
FEED/1337: g Heavy Industries - Georgi
FEED/1337: g Heavy Industries - Georgi
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
05AC/0342: Apple Inc. - Apple Internal Keyboard / Trackpad
0000/0000: Apple -
</span></code></pre></div></div> <p>Aside from lots of random Apple-related entries, we can see 6 devices that identify as the Georgi with a <code class="language-plaintext highlighter-rouge">0xFEED/0x1337</code> VID/PID combination, and they seem to be in 2 groupings(?), consisting of 1 and 5 entries. Compare that to the easy-to-distinguish Elgato Stream Deck Pedal, with just a single device detected.</p> <p>So, which one of these is the “real” Georgi? Let’s further refine the <code class="language-plaintext highlighter-rouge">hidapitester</code> command and see if we can print out more details:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">./hidapitester --vidpid FEED:1337 --list-detail
FEED/1337: g Heavy Industries - Georgi
  vendorId:      0xFEED
  productId:     0x1337
  usagePage:     0xFF60
  usage:         0x0061
  serial_number:
  interface:     1
  path: DevSrvsID:4294971346

FEED/1337: g Heavy Industries - Georgi
  vendorId:      0xFEED
  productId:     0x1337
  usagePage:     0x0001
  usage:         0x0006
  serial_number:
  interface:     0
  path: DevSrvsID:4294971342

FEED/1337: g Heavy Industries - Georgi
  vendorId:      0xFEED
  productId:     0x1337
  usagePage:     0x0001
  usage:         0x0002
  serial_number:
  interface:     0
  path: DevSrvsID:4294971342

FEED/1337: g Heavy Industries - Georgi
  vendorId:      0xFEED
  productId:     0x1337
  usagePage:     0x0001
  usage:         0x0001
  serial_number:
  interface:     0
  path: DevSrvsID:4294971342

FEED/1337: g Heavy Industries - Georgi
  vendorId:      0xFEED
  productId:     0x1337
  usagePage:     0x0001
  usage:         0x0080
  serial_number:
  interface:     0
  path: DevSrvsID:4294971342

FEED/1337: g Heavy Industries - Georgi
  vendorId:      0xFEED
  productId:     0x1337
  usagePage:     0x000C
  usage:         0x0001
  serial_number:
  interface:     0
  path: DevSrvsID:4294971342
</span></code></pre></div></div> <p>The details have provided us with extra hexadecimal values called “usage page” and “usage”, and a number for an “interface”<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>.</p> <p>Since we have five entries with an interface value of <code class="language-plaintext highlighter-rouge">0</code>, and one with <code class="language-plaintext highlighter-rouge">1</code>, that would seem to explain the “groupings” we saw earlier in the device list. But what does this new set of “usage” hexadecimal numbers mean?</p> <h2 id="hidapi-usage">HIDAPI Usage</h2> <p>The concept of “usage” and “usage pages” in the context of HIDAPI is, I think, best described in <a href="https://developer.chrome.com/en/articles/hid/#terminology">this article</a>:</p> <blockquote> <p>“An HID usage is a numeric value referring to a standardized input or output. Usage values allow a device to describe the intended use of the device […]. For example, one is defined for the left button of a mouse. Usages are also organized into usage pages, which provide an indication of the high-level category of the device or report.</p> </blockquote> <p>Hexadecimal numbers are a bit abstract in conveying what this “intended use” really means, but, fortunately for us, we can use the <a href="https://nondebug.github.io/webhid-explorer/">Web HID Explorer</a> to get some more human-readable information:</p> <h3 id="interface-0">Interface 0</h3> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">productName: Georgi
vendorId:    0xFEED (65261) Unknown vendor
productId:   0x1337 (4919)
opened:      false
collections[0]
</span><span class="gp">  Usage: 0001:0006 (Generic Desktop &gt;</span><span class="w"> </span>Keyboard<span class="o">)</span>
<span class="go">collections[1]
</span><span class="gp">  Usage: 0001:0002 (Generic Desktop &gt;</span><span class="w"> </span>Mouse<span class="o">)</span>
<span class="go">collections[2]
</span><span class="gp">  Usage: 0001:0080 (Generic Desktop &gt;</span><span class="w"> </span>System Control<span class="o">)</span>
<span class="go">collections[3]
</span><span class="gp">  Usage: 000C:0001 (Consumer &gt;</span><span class="w"> </span>Consumer Control<span class="o">)</span>
<span class="go">  Input reports: 0x04
collections[4]
</span><span class="gp">  Usage: 0001:0006 (Generic Desktop &gt;</span><span class="w"> </span>Keyboard<span class="o">)</span>
<span class="go">Input report 0x04
  16 bits (bits 0 to 15)
    Data,Ary,Abs
</span><span class="gp">    Usages: 000C:0001 (Consumer &gt;</span><span class="w"> </span>Consumer Control<span class="o">)</span> to 000C:02A0 <span class="o">(</span>Consumer <span class="o">&gt;</span> AC Soft Key Left<span class="o">)</span>
<span class="go">    Logical bounds: 1 to 672
</span></code></pre></div></div> <h3 id="interface-1">Interface 1</h3> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">productName: Georgi
vendorId:    0xFEED (65261) Unknown vendor
productId:   0x1337 (4919)
opened:      true
collections[0]
  Usage: FF60:0061 (Vendor-defined page 0xFF60 usage 0x0061)
  Input reports: 0x00
  Output reports: 0x00
Input report 0x00
  32 values * 8 bits (bits 0 to 255)
    Data,Var,Abs
    Usage: FF60:0062 (Vendor-defined page 0xFF60 usage 0x0062)
    Logical bounds: 0 to 255
Output report 0x00
  32 values * 8 bits (bits 0 to 255)
    Data,Var,Abs
    Usage: FF60:0063 (Vendor-defined page 0xFF60 usage 0x0063)
    Logical bounds: 0 to 255
</span></code></pre></div></div> <p>I guess in the end we can consider the human-readable information “nice to know”, but my main takeaway from all this would be that the <code class="language-plaintext highlighter-rouge">usagePage:usage</code> pair feel quite similar to the <code class="language-plaintext highlighter-rouge">vid:pid</code> pair, in terms of their hierarchical relationship to each other.</p> <p>Anyway, it seems we will need to use all four values in the host code in order to make a stable connection to a device. However, there is no real way to know in advance which usage values will successfully open up that connection (even the information above does not hint at that…at least, not that I can see). Therefore, the host code will need to be changed to handle the following scenarios:</p> <ul> <li>Where a <code class="language-plaintext highlighter-rouge">usagePage:usage</code> pair <em>are not</em> present, loop over the <code class="language-plaintext highlighter-rouge">vid:pid</code>-matching devices, and attempt to make a connection with each one until successful. Also, log out the device details on each attempt, so we can find out which usage values to use on future attempts so that…</li> <li>Where a <code class="language-plaintext highlighter-rouge">usagePage:usage</code> pair <em>are</em> present, loop over the <code class="language-plaintext highlighter-rouge">vid:pid</code>-matching devices until a match is found for the usage values, and only attempt to make a connection with that device</li> </ul> <p>Let’s give it a try!</p> <h2 id="host-with-usage">Host with Usage</h2> <p>First, let’s change the host code to make a connection with each device in the list until it is successful, rather than just blindly return the list’s first device. Instead of calling <code class="language-plaintext highlighter-rouge">hid_open</code>, let’s adapt its internals to fit our needs:</p> <p><strong><code class="language-plaintext highlighter-rouge">host.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="c1"> // printf</span><span class="cp">
#include</span> <span class="cpf">&lt;wchar.h&gt;</span><span class="c1"> // wchar_t</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;hidapi.h&gt;</span><span class="cp">
</span>
<span class="cp">#define MAX_STR 255
</span>
<span class="k">enum</span> <span class="p">{</span>
  <span class="n">VENDOR_ID</span> <span class="o">=</span> <span class="mh">0xFEED</span><span class="p">,</span>
  <span class="n">PRODUCT_ID</span> <span class="o">=</span> <span class="mh">0x1337</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">res</span><span class="p">;</span>
  <span class="kt">wchar_t</span> <span class="n">wstr</span><span class="p">[</span><span class="n">MAX_STR</span><span class="p">];</span>
  <span class="n">hid_device</span> <span class="o">*</span><span class="n">handle</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

  <span class="c1">// Initialize the hidapi library</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">hid_init</span><span class="p">();</span>

  <span class="k">struct</span> <span class="n">hid_device_info</span> <span class="o">*</span><span class="n">devices</span><span class="p">,</span> <span class="o">*</span><span class="n">current_device</span><span class="p">;</span>
  <span class="c1">// Enumerate over the Georgi devices using the VID, PID.</span>
  <span class="n">devices</span> <span class="o">=</span> <span class="n">hid_enumerate</span><span class="p">(</span><span class="n">VENDOR_ID</span><span class="p">,</span> <span class="n">PRODUCT_ID</span><span class="p">);</span>
  <span class="n">current_device</span> <span class="o">=</span> <span class="n">devices</span><span class="p">;</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">current_device</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="kt">int</span> <span class="n">usage_page</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">usage_page</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="kt">int</span> <span class="n">usage</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">usage</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Opening -- Usage (page): 0x%hx (0x%hx)...</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">usage</span><span class="p">,</span> <span class="n">usage_page</span><span class="p">);</span>
    <span class="n">handle</span> <span class="o">=</span> <span class="n">hid_open_path</span><span class="p">(</span><span class="n">current_device</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"Unable to open device</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="n">current_device</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Success!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">hid_free_enumeration</span><span class="p">(</span><span class="n">devices</span><span class="p">);</span>

  <span class="c1">// Read the Manufacturer String</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">hid_get_manufacturer_string</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="n">wstr</span><span class="p">,</span> <span class="n">MAX_STR</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"Manufacturer String: %ls</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">wstr</span><span class="p">);</span>

  <span class="c1">// Close the device if its valid</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">hid_close</span><span class="p">(</span><span class="n">handle</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// Finalize the hidapi library</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">hid_exit</span><span class="p">();</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Compiling and running the changed host file a couple of times gives us the following output:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Opening -- Usage (page): 0x6 (0x1)...
Unable to open device
Opening -- Usage (page): 0x2 (0x1)...
Unable to open device
Opening -- Usage (page): 0x1 (0x1)...
Unable to open device
Opening -- Usage (page): 0x80 (0x1)...
Unable to open device
Opening -- Usage (page): 0x1 (0xc)...
Unable to open device
Opening -- Usage (page): 0x61 (0xff60)...
Success!
Manufacturer String: g Heavy Industries
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Opening -- Usage (page): 0x61 (0xff60)...
Success!
Manufacturer String: g Heavy Industries
</span></code></pre></div></div> <p>Great! We get a successful connection every time at usage <code class="language-plaintext highlighter-rouge">FF60:61</code>, and can confidently say <em>that</em> is our target device. Now, since every connection we open exerts a time cost, let’s change the host code to skip devices that we now know will not give us a successful connection, while still handling the possibility that we may not know the usage values of other devices we may want to connect to:</p> <p><strong><code class="language-plaintext highlighter-rouge">host.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="c1"> // printf</span><span class="cp">
#include</span> <span class="cpf">&lt;wchar.h&gt;</span><span class="c1"> // wchar_t</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;hidapi.h&gt;</span><span class="cp">
</span>
<span class="cp">#define MAX_STR 255
</span>
<span class="k">enum</span> <span class="p">{</span>
  <span class="n">VENDOR_ID</span> <span class="o">=</span> <span class="mh">0xFEED</span><span class="p">,</span>
  <span class="n">PRODUCT_ID</span> <span class="o">=</span> <span class="mh">0x1337</span><span class="p">,</span>
  <span class="c1">// Set usage values to 0 if unknown.</span>
  <span class="n">USAGE_PAGE</span> <span class="o">=</span> <span class="mh">0xFF60</span><span class="p">,</span>
  <span class="n">USAGE</span> <span class="o">=</span> <span class="mh">0x61</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">res</span><span class="p">;</span>
  <span class="kt">wchar_t</span> <span class="n">wstr</span><span class="p">[</span><span class="n">MAX_STR</span><span class="p">];</span>
  <span class="n">hid_device</span> <span class="o">*</span><span class="n">handle</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

  <span class="c1">// Initialize the hidapi library</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">hid_init</span><span class="p">();</span>

  <span class="k">struct</span> <span class="n">hid_device_info</span> <span class="o">*</span><span class="n">devices</span><span class="p">,</span> <span class="o">*</span><span class="n">current_device</span><span class="p">;</span>
  <span class="c1">// Enumerate over the Georgi devices using the VID, PID.</span>
  <span class="n">devices</span> <span class="o">=</span> <span class="n">hid_enumerate</span><span class="p">(</span><span class="n">VENDOR_ID</span><span class="p">,</span> <span class="n">PRODUCT_ID</span><span class="p">);</span>
  <span class="n">current_device</span> <span class="o">=</span> <span class="n">devices</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">usage_known</span> <span class="o">=</span> <span class="p">(</span><span class="n">USAGE_PAGE</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">USAGE</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">current_device</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="kt">int</span> <span class="n">usage_page</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">usage_page</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="kt">int</span> <span class="n">usage</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">usage</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">usage_known</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">usage_page</span> <span class="o">!=</span> <span class="n">USAGE_PAGE</span> <span class="o">||</span> <span class="n">usage</span> <span class="o">!=</span> <span class="n">USAGE</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"Skipping -- Usage (page): 0x%hx (0x%hx)</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">usage</span><span class="p">,</span> <span class="n">usage_page</span><span class="p">);</span>
      <span class="n">current_device</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Opening -- Usage (page): 0x%hx (0x%hx)...</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">usage</span><span class="p">,</span> <span class="n">usage_page</span><span class="p">);</span>
    <span class="n">handle</span> <span class="o">=</span> <span class="n">hid_open_path</span><span class="p">(</span><span class="n">current_device</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"Unable to open device</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">usage_known</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">current_device</span> <span class="o">=</span> <span class="n">current_device</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="k">continue</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Success!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">hid_free_enumeration</span><span class="p">(</span><span class="n">devices</span><span class="p">);</span>

  <span class="c1">// Read the Manufacturer String</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">hid_get_manufacturer_string</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="n">wstr</span><span class="p">,</span> <span class="n">MAX_STR</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"Manufacturer String: %ls</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">wstr</span><span class="p">);</span>

  <span class="c1">// Close the device if its valid</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">hid_close</span><span class="p">(</span><span class="n">handle</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// Finalize the hidapi library</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">hid_exit</span><span class="p">();</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Compiling and running these changes a couple of times gives us the following output:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Skipping -- Usage (page): 0x6 (0x1)
Skipping -- Usage (page): 0x2 (0x1)
Skipping -- Usage (page): 0x1 (0x1)
Skipping -- Usage (page): 0x80 (0x1)
Skipping -- Usage (page): 0x1 (0xc)
Opening -- Usage (page): 0x61 (0xff60)...
Success!
Manufacturer String: g Heavy Industries
</span><span class="gp">$</span><span class="w"> </span>./host
<span class="go">Opening -- Usage (page): 0x61 (0xff60)...
Success!
Manufacturer String: g Heavy Industries
</span></code></pre></div></div> <p>It works! And, if you have been following along (with your own Georgi or other keyboard of choice), you will notice that successful connections are now made much faster, even if you do not hit the target device on the first try!</p> <p>So, if you ever find yourself writing custom firmware that connects to HID devices, remember to always include the usage values, as well as vendor/product IDs, to ensure you can get a stable connection.</p> <blockquote> <p>If you are interested in seeing other host code containing more robust error handling, and the reading and writing of custom information to and from a device, check out my <a href="https://github.com/paulfioravanti/hid_hosts">HID Host</a> GitHub repository.</p> </blockquote> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>I’ve written about playing <a href="https://en.wikipedia.org/wiki/Doom_(1993_video_game)">Doom</a> [1993] with steno in <em><a href="https://www.paulfioravanti.com/blog/steno-gaming-doom-typist/">Steno Gaming: Doom Typist</a></em>, but the mechanics around making communication possible between the Georgi, Elgato pedal, and <a href="https://www.openstenoproject.org/plover/">Plover</a> probably warrants its own blog post. If you’re game, you can check out the code specifics in the following GitHub repos: <a href="https://github.com/paulfioravanti/hid_hosts">HID Host</a>, <a href="https://github.com/paulfioravanti/steno_tape">Steno Tape</a>, and my <a href="https://github.com/paulfioravanti/qmk_keymaps/tree/master/keyboards/gboards/georgi/keymaps/paulfioravanti">Georgi firmware</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p>Yes, technically, it is a <a href="https://en.wikipedia.org/wiki/Pointer_(computer_programming)">pointer</a> to a <a href="https://en.wikipedia.org/wiki/Linked_list">linked list</a> of <a href="https://github.com/libusb/hidapi/blob/baa0dab6114e8654161478e10a20c67cf5d1a1a3/hidapi/hidapi.h#L150"><code class="language-plaintext highlighter-rouge">hid_device_info</code></a> <code class="language-plaintext highlighter-rouge">struct</code>s, but that detail can be glossed over in this context. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3" role="doc-endnote"> <p>Vendor IDs are meant to be globally unique, while product IDs are meant to be unique within the scope of a vendor ID. The <a href="https://www.usb.org/about">USB Implementers Forum</a> (USB-IF) is the <a href="https://www.usb.org/developers">“authority which assigns and maintains all USB Vendor ID Numbers”</a> (a vendor ID <a href="https://www.usb.org/getting-vendor-id">costs US$6000</a> as of this writing). Also, apparently “unauthorized use of assigned or unassigned USB Vendor ID Numbers is strictly prohibited”. However, a search of popular hobbyist keyboard firmware <a href="https://qmk.fm/">QMK</a>’s codebase reveals that <a href="https://github.com/search?q=repo%3Aqmk%2Fqmk_firmware+%22vid%22%3A+%220xFEED%22+language%3AJSON&amp;type=code&amp;l=JSON">hundreds of devices</a> aside from the Georgi use <code class="language-plaintext highlighter-rouge">0xFEED</code> as their vendor ID (it seems to be QMK’s arbitrarily assigned <a href="https://github.com/qmk/qmk_firmware/blob/ca4541699915b37cd1f253bbed51854627efd2ce/docs/faq_build.md?plain=1#L54">default vendor ID</a>). So, we can conclude that:</p> <ul> <li>the <code class="language-plaintext highlighter-rouge">0xFEED</code> vendor ID does not belong exclusively to the Georgi</li> <li>enforcement of vendor ID uniqueness is lax/non-existent</li> <li>we cannot rely on the VID/PID combo alone to open a connection to a device: we need more information to target it correctly</li> </ul> <p><a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4" role="doc-endnote"> <p>Since I could not find any references on the web that describe what an “interface” means within the context of HIDAPI, <a href="https://chat.openai.com/">ChatGPT</a> says that it “can represent a specific device or a group of similar devices that share a common way of communicating with the computer. These interfaces are identified by interface numbers and can have different features, reports, and capabilities depending on the type of HID device”. I am not sure why the Georgi would need multiple ways to communicate with the computer, but I am just going to consider this an implementation detail we do not need to concern ourselves with. Also, as an aside, I cannot believe we are at the stage where I am quoting AI… <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="clang"/><category term="HID"/><category term="hidapi"/><category term="georgi"/><category term="stenography"/><category term="steno"/><category term="keyboards"/><summary type="html"><![CDATA[Does communicating with your HID device seem flaky? You may be looking at the wrong (usage) page.]]></summary></entry><entry><title type="html">Thanks, Past-Me</title><link href="https://www.paulfioravanti.com/blog/thanks-past-me/" rel="alternate" type="text/html" title="Thanks, Past-Me"/><published>2023-04-28T15:30:00+10:00</published><updated>2023-07-24T16:17:00+10:00</updated><id>https://www.paulfioravanti.com/blog/thanks-past-me</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/thanks-past-me/"><![CDATA[<div class="post-audio"> <div class="post-audio-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/8EX3aUYehNo" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> </div> <div class="spacer"></div> <div class="text"> :studio_microphone: This post has audio narration </div> </div> <p>After joining my last <a href="https://rubyonrails.org/">Ruby on Rails</a> project as a software developer, I wanted to see if I could quickly deliver some easy wins before starting any more difficult work. So, I decided to give my client’s web application a “technical audit”.</p> <p>I had done this kind of thing before on other Rails projects, but that had been many years ago, and I can barely remember what I coded last week, let alone all the steps on some check-list I wrote in the ancient past.</p> <p>Luckily, past-me apparently had the enormous foresight to write up all the steps he thought of in a post on a previous employer’s blog: <em><a href="https://reinteractive.com/posts/304-profile-your-future-app">Profile Your Future App</a></em>.</p> <p>Some of the content is a bit outdated as of this writing, particularly with regards to a few of the external services it references (which is unsurprising, given the dynamic nature of tech), but I was able to leverage a good deal of the post’s content to improve the quality of the application I was working on, without having to <a href="https://en.wikipedia.org/wiki/Reinventing_the_wheel">reinvent the wheel</a> (and maybe some other web developer might, too).</p> <p>So, thanks past-me, ya did good! As you figured stuff out, you wrote it down, and it paid future dividends: a beneficial and repeatable process that anyone can do for themselves.</p> <p>That’s it. That’s the lesson. <a href="https://knowyourmeme.com/memes/thanks-for-coming-to-my-ted-talk">Thanks for coming to my TED blog post</a>.</p> <p>Now you, the guy writing this sentence: you reckon you can take your own advice and keep this up?</p> <h2 id="happy-50th-postiversary">Happy 50th Postiversary</h2> <p>It has only taken over 5 years of writing, at the cracking average speed of less than one post per month, but you are reading this blog’s 50th post. In muted celebration of this extremely modest achievement, I thought I’d mark the occasion with a <a href="https://en.wikipedia.org/wiki/Retrospective#Software_development">retrospective</a>.</p> <p>My initial reasons for attempting to kick-start a blog (after <a href="https://www.paulfioravanti.com/blog/hello-blog/">failing once before</a>) were:</p> <ul> <li>Using it as a knowledge repository: get stuff out of my head and <a href="https://en.wikipedia.org/wiki/Persistence_(computer_science)">persisted</a> somewhere else, so I could “confidently forget” it until (maybe) future-me needed it again</li> <li>The intrinsic value of being able to share knowledge with others, in hopes that they, too, can benefit from it</li> <li>Get better at technical writing, and writing English in general</li> <li>Directly receive reputation-building <a href="https://en.wikipedia.org/wiki/Search_engine_optimization">SEO</a> “<a href="https://www.woorank.com/en/edu/seo-guides/link-juice">link juice</a>” for stuff I write, rather than just give it away for free to other third-party sites (though these days I guess all original content is just info-<a href="https://en.wiktionary.org/wiki/chum#Etymology_2">chum</a> to be ravenously devoured and digested as <a href="https://en.wikipedia.org/wiki/Training,_validation,_and_test_data_sets#Training_data_set">training data</a> by <a href="https://en.wikipedia.org/wiki/Artificial_intelligence">AI</a> <a href="https://en.wikipedia.org/wiki/Chatbot">chatbots</a>, so who knows if creators will receive even a sip of whatever ends up substituting for link juice…)</li> </ul> <p>How did all of that go? Below are the results of my <em><a href="https://en.wikipedia.org/wiki/Navel_gazing">Omphaloskepsis</a></em> Report, though the <a href="https://www.merriam-webster.com/dictionary/TL%3BDR">TL;DR</a> could be summed up with this tweet:</p> <blockquote> <p>“deeply disgusted to discover that in order to get good at a thing I have to do it badly first” — <a href="https://twitter.com/megelison/status/1549788560756281345?ref_src=twsrc%5Etfw">Meg Elison</a> (<a href="https://twitter.com/megelison">@megelison</a>)</p> </blockquote> <h2 id="what-was-done-well">What was Done Well</h2> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2023-04-28/nils-gFeYSbDCJM0-unsplash.jpg" alt="man in black t-shirt and blue denim jeans riding motorcycle on road during daytime"/> <figcaption> Photo by <a href="https://unsplash.com/@ni_ls_h?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Nils </a> on <a href="https://unsplash.com/photos/gFeYSbDCJM0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Unsplash </a> </figcaption> </figure> </div> <p>I’m going to consider “well” in the subjective: how I generally felt I benefitted from writing the posts up to now. If I was going to attempt to consider what was done well in the objective, then <a href="https://analytics.google.com/">all signs</a> would point toward a complete pivot to only ever writing about <a href="https://www.paulfioravanti.com/blog/classic-doom-mac/">Doom on macOS</a> in the future.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2023-04-28/blog-page-views.jpg" alt="Google Analytics page views for my blog"/> <figcaption> Doomguy chugs more than his fair share of SEO juice </figcaption> </figure> </div> <p>I may really like Doom, but I don’t want to do that. So, I’d like to have a list of positives for future-me to look back on: help keep my motivation up to continue writing about potentially niche topics, especially when vanity metrics show low levels of reach and impact for a particular post. Here’s what I came up with.</p> <h3 id="certificate-of-participation">Certificate of Participation</h3> <p>Framed against a digital wasteland of abandoned blogs, I give myself a light pat on the back for demonstrating enough grit to actually ship fifty posts worth of content to the internet.</p> <p>There were plenty of times where I just did not want to start, or continue, writing a post. Mustering up the enthusiasm, or summoning enough stubbornness, to persevere in the face of any other reason I could think of, personally beneficial or not, has been tough<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>.</p> <p>I don’t advocate continuing to pay <a href="https://en.wikipedia.org/wiki/Sunk_cost">sunk costs</a> where there is no benefit, but even if no one reads this, or any of my other posts, I know I get at least some kind of immediate fixed value from finishing a post (even if just a <a href="https://en.wikipedia.org/wiki/Dopamine#Reward">dopamine</a> hit), and then hopefully some kind of variable value in the future (it gets picked up by an <a href="https://en.wikipedia.org/wiki/News_aggregator">aggregator</a>, or future-me re-reads it etc).</p> <p>Speaking of aggregators, these are the ones that picked up one or more of the previous posts from this one, and provided nice spikes in readership (and some warm fuzzies for me):</p> <table style="margin: auto; width: 50%; font-size: large; margin-bottom: 1rem;"> <thead> <tr> <th style="text-align: left">Source</th> <th style="text-align: right">Links</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><a href="https://elixirweekly.net/">Elixir Weekly</a></td> <td style="text-align: right">8</td> </tr> <tr> <td style="text-align: left"><a href="https://www.elmweekly.nl/">Elm Weekly</a></td> <td style="text-align: right">3</td> </tr> <tr> <td style="text-align: left"><a href="http://plover.stenoknight.com/">Plover Blog</a></td> <td style="text-align: right">3</td> </tr> <tr> <td style="text-align: left"><a href="https://elixir-radar.com/">Elixir Radar</a></td> <td style="text-align: right">1</td> </tr> <tr> <td style="text-align: left"><a href="https://www.graphqlweekly.com/">GraphQL Weekly</a></td> <td style="text-align: right">1</td> </tr> <tr> <td style="text-align: left"><a href="https://hnblogs.substack.com/">Hacker News Blog Newsletter</a></td> <td style="text-align: right">1</td> </tr> <tr> <td style="text-align: left"><a href="https://rubyweekly.com/">Ruby Weekly</a></td> <td style="text-align: right">1</td> </tr> <tr> <td style="text-align: left">Test Automation Weekly</td> <td style="text-align: right">1</td> </tr> <tr> <td style="text-align: left"><strong>Total</strong></td> <td style="text-align: right"><strong>18</strong></td> </tr> </tbody> </table> <p>Two of the Elixir Weekly links are from the same article, but in different newsletters, giving a hit rate of about 34% of the posts being apparently deemed worthy enough to share widely: not a huge number at all, but I’ll take it over zero!</p> <h3 id="idea-pipeline">Idea Pipeline</h3> <p>In order to combat the classic “I don’t know what to write about” problem, that serves as a convenient escape hatch to avoid expending any effort at all, I made sure to create an easily accessible place where ideas could be stored, as close as possible to the time they appear. I use <a href="https://trello.com/">Trello</a> boards and cards for this, but any tool, digital or physical, would work fine.</p> <p>An idea may just be the title of a post, a theme, keywords, random thoughts, or a fully fleshed out plan: whatever information happens to come to hand, it goes in the idea bucket. I may not action an idea at the time it materialises, or in the next few months, or even ever, but they are there to be referenced whenever it comes time to put text to web page.</p> <p>Forgetting some ideas, because I did not put them anywhere when they came up, was painful enough that even if I am in the middle of doing something else, I will make sure to put <em>something</em> down to follow up later. So, there is never an issue with <em>what</em> to write about, just the hard stuff about <em>how</em> to allocate the time and effort to actually do the work.</p> <h3 id="deep-diving">Deep Diving</h3> <p>Writing about certain topics forced me to attempt to <em>really</em> learn about them in detail. No self-imposed deadlines meant I would often happily abseil down every rabbit hole I encountered, and attempt to be as thorough as possible in surfacing information for posts.</p> <p>This could sometimes make writing a post feel like maintaining a long running <a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell">Git branch</a> in a codebase. All the voluminous information editing, shuffling, and moulding needed in order to attempt to create a coherent narrative could be taxing, and there were many times where I just wanted a post to hurry up and end so I could finally move on to something else.</p> <p>However, the goals of making a post a <a href="https://english.stackexchange.com/a/345796/23058">one and done</a> exercise, and future-me’s single point of reference for a topic<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>, enabled me to keep trudging forward, even when it ended up taking months of preparation. Most importantly, especially given the effort expended, I’m happy overall with the way that the posts have turned out, even the ones that were so niche that their audiences were tiny<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>.</p> <h3 id="stories-and-narratives">Stories and Narratives</h3> <p>Many of my posts have revolved around explaining the processes of how to use some kind of technology, show off a thing, or provide some kind of subjective advice. As well as scratching an itch, justifying the time and effort it takes to write these kinds of posts is easy within the context of being relevant to my profession or interests, and helping out future-me.</p> <p>However, I have also found great benefit in writing posts that just tell a straight story. These posts<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup> never really get much traction in analytics — I guess they are not considered as “useful” as how-to guides — but as well as being personally fulfilling to write, I believe they have helped lift the narrative quality of other posts.</p> <p>Obviously, I never set out to write boring or dry content, but I do feel that writing stories has been able to positively influence the structure and word smithing of other more prescriptive posts, and make them more interesting to read (or, at least it has for present-me looking back on them).</p> <p>So, in an attempt to get better at writing, and improve my blog “voice”, I plan to pepper in more story-based posts to counterbalance the hardcore technical-based ones.</p> <h3 id="blog-tinkering">Blog Tinkering</h3> <p>Software nerds love to tinker, and this blog has provided ample opportunities for that. From changing the theme, setting up and integrating a mailing list, and overriding <a href="https://jekyllrb.com/">Jekyll</a> templates to get pages looking <em>just</em> the way I want them to.</p> <p>The (sometimes painful) journeys that making those changes took me on either <a href="https://www.paulfioravanti.com/tags/jekyll/">became posts</a>, or are in my idea pipeline for future posts, creating a <a href="https://www.dictionary.com/browse/virtuous-circle">virtuous circle</a> of content generation. Jekyll may not be the coolest blog kid on the block, but there are enough people using it that someone out there will have a similar problem to one that a post addresses, making its creation worthwhile.</p> <h3 id="guest-posting">Guest Posting</h3> <p>Although I mentioned earlier about wanting to keep SEO link juice to myself, there are times where I think it is worth giving it away to get your work in front of an audience you do not have, yet want to reach, in order to accomplish some goal.</p> <p>Back in 2021, I reached out to <a href="https://www.zsa.io/">ZSA</a> to ask if they would consider supporting <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/feature_stenography.md#keycode-reference-idkeycode-reference">QMK stenography keys</a> in their <a href="https://configure.zsa.io/">Oryx</a> keyboard configurator. I hoped that by doing so, the barrier to entry to use <a href="https://en.wikipedia.org/wiki/Stenotype">stenography</a> on their popular keyboards could be significantly lowered, encouraging more people to give it a try.</p> <p>I showed them my <em><a href="https://www.paulfioravanti.com/blog/starting-stenography-ergodox/">Starting Stenography with an Ergodox</a></em> post, which led to collaborating with the ZSA team over the following few months during development of the feature, and culminated in writing its announcement post: <em><a href="https://blog.zsa.io/2107-steno-tutorial/">Stenography with ZSA Keyboards: A Tutorial</a></em>.</p> <p>That whole process was a lot of work, potentially benefitted(?) a for-profit company, no compensation was asked or offered, and, of course, I get no direct link juice (though I did make sure to relevantly link as many of my own posts in it as possible without being spammy [I hope…]). But, getting steno out into the minds and hands of a wider audience than I ever could by myself was the overarching goal, and I think it succeeded there, making the whole exercise worthwhile. I am also proud of the end result, and collaborating with the ZSA team was a really great experience.</p> <p>I do see doing something like this as the exception, rather than the rule, though. I have been approached by other organisations about writing for-pay articles for their blogs based on what they have read here (which, in itself, is flattering). But, the numbers offered just do not personally justify the sheer amount of effort required for creating what I consider a good technical post (not just the writing, but likely also development of complimenting assets like working software programs and videos etc).</p> <p>This means I would rather not get paid, and keep a post on my blog in order to maintain ownership, than sell it for some <a href="https://en.wiktionary.org/wiki/going_rate">going rate</a>. I definitely consider this a luxury<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>.</p> <h2 id="what-could-be-done-better">What could be Done Better</h2> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2023-04-28/matthew-henry-kX9lb7LUDWc-unsplash.jpg" alt="grayscale photogaphy of man sitting on concrete bench"/> <figcaption> Photo by <a href="https://unsplash.com/@matthewhenry?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Matthew Henry </a> on <a href="https://unsplash.com/photos/kX9lb7LUDWc?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Unsplash </a> </figcaption> </figure> </div> <p>Not everything in the competitive and glamorous world of writing personal blog posts is glowing praise and fawning over your words. Things can go wrong, opportunities are potentially missed, and sometimes unwitting self-sabotage takes place.</p> <p>Here is a selection of points where I am cognisant of some kind of shortcoming, though I am sure there are more I have just not noticed (feel free to bring any others to my attention).</p> <h3 id="cadence-and-releasing">Cadence and Releasing</h3> <p>I write posts on a very sporadic schedule. Regardless of having an idea pipeline, my urge and ability to write fluctuated significantly: some months I would be blessed with periods of extended <a href="https://en.wikipedia.org/wiki/Flow_(psychology)">flow</a>, and be able to release up to three posts — others, zero (and sometimes that drought could last for many months, like the massive gap between this post and the previous one).</p> <p>On those months where I was able to write multiple posts, in my rush to get them out the digital door and off my plate, I would sometimes release them on consecutive days, giving the initially-released post no room to “breathe” before the next one barreled through. I do not have any evidence that this resulted in either post losing any short-term readership, but I think there may be the potential for that. Therefore, I do not intend to do releases in quick succession again, unless there is a compelling reason to do so.</p> <p>Much like I have an inbound idea pipeline that stacks up and waits for me to action them, I now understand that having an outbound post pipeline is just as important, in order to give the impression of having some sort of cadence, and buy me time when flow is in short supply.</p> <h3 id="promotion">Promotion</h3> <p>When I release a post, my next item of business is to try and get people to read it. I currently do this by:</p> <ul> <li>writing out a short message to send to my mailing list members</li> <li>posting links to social media: specifically, <a href="https://twitter.com/paulfioravanti">Twitter</a>, <a href="https://www.linkedin.com/in/paulfioravanti/">LinkedIn</a>, and <a href="https://www.facebook.com/">Facebook</a></li> </ul> <p>Different kinds of posts seem to resonate with people on different platforms: tech posts seem to get more traction on Twitter (aggregators are especially more likely to pick them up if they are hashtagged correctly), while personal stories get more interaction on Facebook, where people tend to know me personally.</p> <p>Promoting to these places has generally been fine, but I wonder whether I am missing out on promotion opportunities by not also aiming at more specific targets like relevant <a href="https://www.reddit.com/">Reddit</a> subreddits, <a href="https://slack.com/">Slack</a>/<a href="https://discord.com/">Discord</a> communities, LinkedIn groups, or maybe even <a href="https://news.ycombinator.com/">Hacker News</a>.</p> <p>I am sure many of these communities will have their own rules and etiquette around sharing self-serving content, possibly including being a regularly contributing community member (or maybe they just outright ban it). I do not want to come off as a spammer or leech, so I will have to overcome my laziness and figure out if any avenues are open to me here, and pick ones that seem the most appropriate.</p> <p>Regarding the mailing list, it is very subtly shown on the page, and although options like having some <a href="https://en.wikipedia.org/wiki/Modal_window">modal window</a> pop up and shove it in your face are available (something that apparently has been shown to increase conversions), I know I hate them, so I will assume you do as well, and, therefore, that is not something I would consider.</p> <h3 id="theming">Theming</h3> <p>This blog currently uses a theme: <a href="https://mmistakes.github.io/minimal-mistakes/">Minimal Mistakes</a>. I have benefitted significantly from having it, as it takes care of all the stuff I am not good at, like design. However, much like all sites that use themes, this blog looks really similar, if not the same, as other sites that also use the same theme.</p> <p>This issue is not hugely painful for me right now, since I am more focused on just writing content, but it would be nice for this site to have at least a bit more of a unique skin. I do feed myself by creating websites after all, but my viewpoint on this blog using a framework (Jekyll) and theme has been “why re-create the (blog framework/<a href="https://en.wikipedia.org/wiki/Content_management_system">CMS</a>-shaped) wheel when I can leverage the good work of others?”. Maybe I just need to do some more interesting customisations within this sandbox before investing the time and effort in doing a re-write.</p> <h3 id="voice">Voice</h3> <p>As an experiment, I decided to try adding voice narration to some of my posts. Personally, I got a kick out of doing them, but their <a href="https://www.youtube.com/">YouTube</a> metrics would seem to indicate that they have been greeted mostly with crickets<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup>.</p> <p>This is not surprising at all, and matches the expectations I had for it. By all accounts it is a failed experiment, but regardless of that, I am going to keep doing it.</p> <p>Aside from it being fun, I did get some feedback from a non-native English speaking peer, who said they used them for listening practice, which I was thrilled by! It just goes to show that your users will consume your content in ways that you will not expect!</p> <h3 id="monetisation">Monetisation</h3> <p>Every time I look at the “Pages and screens” report on <a href="https://analytics.google.com/">Google Analytics</a>, I always see, for every page, a display of “<strong>Total revenue: $0.00</strong>”.</p> <p><a href="https://www.google.com/">Google</a> <em>knows</em> I do not have ads on any of my pages, so it could choose to just <em>not</em> display this information, but it does anyway. Of course, this has the likely intended effect of making me think that Google sees some wasted potential, and perhaps I <em>could</em> make some pocket money from my posts, even if just the Doom for macOS one.</p> <p>However, consulting my blog bible, <em><a href="https://pragprog.com/titles/actb2/technical-blogging-second-edition/">Technical Blogging, Second Edition</a></em>, helped give me some clarity by providing a bunch of tips that brought my monetisation ponderings crashing straight back to earth, including this one that stops me dead in my tracks:</p> <blockquote> <p>Don’t place ads on your blog until you have at least 10,000 pageviews per month.</p> </blockquote> <p>My best single page is but a tenth of that, with the rest not even worth a mention. Even if I did reach that goal, the risk/reward ratio of running ads, particularly against a technical audience, would seem to skew heavily towards continuing to blog just for fun, which is fine by me.</p> <h2 id="actions-for-improvement">Actions for Improvement</h2> <div class="centered-image" style="width: 80%"> <figure> <img src="/assets/images/2023-04-28/alayna-tam-xmIrHafFlP0-unsplash.jpg" alt="person in yellow hoodie sitting on rock near lake and snow covered mountain during daytime"/> <figcaption> Photo by <a href="https://unsplash.com/@alayna_michelle?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Alayna Tam </a> on <a href="https://unsplash.com/photos/xmIrHafFlP0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Unsplash </a> </figcaption> </figure> </div> <p>After all this reflection, I think the best actions I can take for improvement are the following, in order of priority and immediate impact:</p> <ul> <li>Space out post releases by <em>at least</em> a week</li> <li>Establish a regular blogging habit, plan for once a month</li> <li>Attempt to submit a post to at least one social network I have not used before</li> <li>Increase the ratio of narrative-based posts</li> <li>Maybe consider revamping the site, if I have nothing better to do…</li> </ul> <p>Here’s hoping that it yields results of some kind. Did I miss anything? I love feedback, so let me know!</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>This post was started on September 9, 2022, and has been one of the grindiest posts so far: delayed for some good reasons, but also procrastinated on for a bunch of excuses. Self-reflection is quite hard, it would seem. But, I made a pact with myself: I cannot proceed with any other post, no matter how interesting or timely, until this one gets out the door. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p>Except for the times I would write about the same tech in <a href="https://www.paulfioravanti.com/blog/python-bitcoin-libraries-elixir/">multiple</a> <a href="https://www.paulfioravanti.com/blog/c-plus-plus-bitcoin-libraries-elixir/">languages</a>… or when some tech went through a major <a href="https://www.paulfioravanti.com/blog/elm-phoenix-13/">version</a> <a href="https://www.paulfioravanti.com/blog/elm-phoenix-14-webpack/">upgrade</a>… or when writing about <a href="https://www.paulfioravanti.com/blog/speak-at-meetups/">two</a> <a href="https://www.paulfioravanti.com/blog/organise-meetups/">sides</a> of the same topic… or when the topic was just too big and needed to be split <a href="https://www.paulfioravanti.com/blog/internationalisation-phoenix-liveview/">into</a> <a href="https://www.paulfioravanti.com/blog/internationalisation-phoenix-live-components/">multiple</a> <a href="https://www.paulfioravanti.com/blog/internationalisation-phoenix-live-layouts/">parts</a>… so, I made peace with embracing the meta, and allowing the posts to <a href="https://www.youtube.com/watch?v=yFqFLo_bYq0">rhyme</a> sometimes. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3" role="doc-endnote"> <p>There were times where I would want to make changes to a post after publishing, from minor typo fixes to more major updates involving significant amounts of content. So, even if I was not happy with a post, just because it is on the internet, does not mean it cannot be iterated on (however, I tend to consider posts with audio narration, like this one, frozen in time upon release so that voice and text always match). Anyone actually interested in seeing what a post looked like on its first release can just trawl through the <a href="https://github.com/paulfioravanti/paulfioravanti.github.io/commits/release">blog’s commit history</a>. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4" role="doc-endnote"> <p>Posts like <em><a href="https://www.paulfioravanti.com/blog/persons-character/">A Person’s Character (人という字は)</a></em>, <em><a href="https://www.paulfioravanti.com/blog/mums-meetup/">Mum’s Meetup</a></em>, and <em><a href="https://www.paulfioravanti.com/blog/welcome-back-overwork/">“Welcome back”</a></em>. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:5" role="doc-endnote"> <p>Which sounds very lofty; more realistically, though, the first-world problem is likely to be that the going rate is just not high enough for me, nor others I know who work in information technology that have their own blogs and share this view. This is also probably reflective of my limitations as a writer: if I was faster at generating content, and could pump out articles easily and naturally, then the time spent to going rate compensation ratio might look more enticing. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:6" role="doc-endnote"> <p>As of this writing, the top narration performer has a whopping 7 plays, while the least popular one languishes at 0 plays. <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="meta"/><category term="blogging"/><summary type="html"><![CDATA[Past-me wrote stuff down that benefited future-me. Present-me needs to keep paying that forward.]]></summary></entry><entry><title type="html">Sharing AppleScript Handlers</title><link href="https://www.paulfioravanti.com/blog/sharing-applescript-handlers/" rel="alternate" type="text/html" title="Sharing AppleScript Handlers"/><published>2022-07-05T08:30:00+10:00</published><updated>2022-07-05T08:30:00+10:00</updated><id>https://www.paulfioravanti.com/blog/sharing-applescript-handlers</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/sharing-applescript-handlers/"><![CDATA[<p>Being able to share code between files is a great way to put programming logic “<a href="https://en.wikipedia.org/wiki/Single_source_of_truth">in its right place</a>”, and prevent single files from containing hundreds or thousands of lines of code.</p> <p>A very basic example of sharing code in <a href="https://www.python.org/">Python</a> could be having a directory called <code class="language-plaintext highlighter-rouge">code/</code>, and in it, a file called <code class="language-plaintext highlighter-rouge">greetings.py</code>. This file contains very important business logic about how to say “hello”:</p> <p><strong><code class="language-plaintext highlighter-rouge">code/greetings.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello there!</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>Now, say I have a <code class="language-plaintext highlighter-rouge">greeter.py</code> file in the same directory, who has no idea how to say “hello”, and wants to leverage the specialised knowledge its neighbour file has on how to do it. It can do so easily by <code class="language-plaintext highlighter-rouge">import</code>ing the <code class="language-plaintext highlighter-rouge">hello</code> function from the <code class="language-plaintext highlighter-rouge">greetings</code> file, and using it:</p> <p><strong><code class="language-plaintext highlighter-rouge">code/greeter.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">greetings</span> <span class="kn">import</span> <span class="n">hello</span>

<span class="nf">hello</span><span class="p">()</span>
</code></pre></div></div> <p>Running the <code class="language-plaintext highlighter-rouge">greeter</code> program outputs what you would expect:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python code/greeter.py
<span class="go">Hello there!
</span></code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">from greetings import hello</code> line is able to find the <code class="language-plaintext highlighter-rouge">greetings</code> file thanks to Python’s <a href="https://docs.python.org/3/library/sys.html#sys.path"><code class="language-plaintext highlighter-rouge">sys.path</code></a>, a “list of strings that specifies the search path for modules”, which includes the directory of the script being run: in this case, the <code class="language-plaintext highlighter-rouge">code/</code> directory. Makes sense.</p> <p>Many programming languages have similar mechanisms to allow sharing code in simple, unobstructive ways. <a href="https://en.wikipedia.org/wiki/AppleScript">AppleScript</a> <em>can</em> share code, but certainly not in an intuitive way like Python. The extra steps required to do so compelled me to make a note of them somewhere, in order to not have to scour the internet to figure this out again.</p> <p>So, I will illustrate this sharing process by <a href="https://en.wikipedia.org/wiki/Code_refactoring">refactoring</a> out <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH">handlers</a> (read: <a href="https://en.wikipedia.org/wiki/Subroutine">functions</a>) into separate files using an example from <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/src/command">my stenography dictionaries</a>, where I have employed AppleScript to control my Mac using <a href="https://www.artofchording.com/introduction/how-steno-works.html">stenographic chords</a> (don’t worry, the <a href="https://en.wikipedia.org/wiki/Stenotype">stenography</a> context here is not important).</p> <h2 id="contextual-refreshing">Contextual Refreshing</h2> <p>I have an AppleScript file that performs a keyboard shortcut for a “refresh”.</p> <p>The most common <a href="https://en.wikipedia.org/wiki/Use_case">use case</a> for a “refresh” on a computer would probably be refreshing a browser window, and its keyboard shortcut on <a href="https://en.wikipedia.org/wiki/MacOS">macOS</a> is ⌘R (<a href="https://en.wikipedia.org/wiki/Command_key">Command</a>-R). Many other applications use the same ⌘R shortcut for their own interpretation of “refresh”, so contextually, it is quite a safe one to use.</p> <p>However, when I have the very specific use case of using the <a href="https://www.vim.org/">Vim</a> text editor in an <a href="https://iterm2.com/">iTerm2</a> terminal, I need a “refresh” to mean “refresh the <a href="https://github.com/ctrlpvim/ctrlp.vim">ctrlp.vim</a> fuzzy file finder’s cache, so it picks up the existence of any new files”, and the shortcut for that is F5 (<a href="https://en.wikipedia.org/wiki/Function_key">Function Key</a>-5).</p> <p>So, the script needs to figure out what current the “active” application is, and then “press” the appropriate keyboard shortcut (either ⌘R, or F5). Here is what that looks like in my code:</p> <p><strong><code class="language-plaintext highlighter-rouge">src/command/actions/refresh.applescript</code></strong></p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">on</span> <span class="nb">run</span><span class="w">
  </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">getActiveApp</span><span class="p">()</span><span class="w">

  </span><span class="k">if</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="s2">"iTerm2"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="nv">performiTerm2Refresh</span><span class="p">()</span><span class="w">
  </span><span class="k">else</span><span class="w">
    </span><span class="nv">performRefresh</span><span class="p">(</span><span class="nv">activeApp</span><span class="p">)</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">if</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nb">run</span><span class="w">

</span><span class="k">on</span> <span class="nv">performiTerm2Refresh</span><span class="p">()</span><span class="w">
  </span><span class="k">set</span><span class="w"> </span><span class="nv">processName</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">getiTermProcessName</span><span class="p">()</span><span class="w">

  </span><span class="k">if</span><span class="w"> </span><span class="nv">processName</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s2">"vim"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="nv">performVimRefresh</span><span class="p">()</span><span class="w">
  </span><span class="k">else</span><span class="w">
    </span><span class="nb">display</span><span class="w"> </span><span class="nv">notification</span><span class="w"> </span><span class="s2">"Nothing to refresh."</span><span class="w"> </span><span class="nv">with</span><span class="w"> </span><span class="na">title</span><span class="w"> </span><span class="s2">"Error"</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">if</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">performiTerm2Refresh</span><span class="w">

</span><span class="k">on</span> <span class="nv">performVimRefresh</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="s2">"iTerm2"</span><span class="w">
    </span><span class="c1"># 96 = F5</span><span class="w">
    </span><span class="na">key code</span><span class="w"> </span><span class="mi">96</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">performVimRefresh</span><span class="w">

</span><span class="k">on</span> <span class="nv">performRefresh</span><span class="p">(</span><span class="nv">activeApp</span><span class="p">)</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="s2">"r"</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">performRefresh</span><span class="w">

</span><span class="k">on</span> <span class="nv">getActiveApp</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="nb">return</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getActiveApp</span><span class="w">

</span><span class="k">on</span> <span class="nv">getiTermProcessName</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"iTerm2"</span><span class="w">
    </span><span class="nb">return</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">current</span><span class="w"> </span><span class="nv">session</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">current</span><span class="w"> </span><span class="na">window</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getiTermProcessName</span><span class="w">
</span></code></pre></div></div> <p>In this file there are six handlers, with the <code class="language-plaintext highlighter-rouge">on run</code> handler at the top being the entry point for when the script is run. The first four handlers contain code that is <em>specific</em> to “refreshing”, but the final two handlers, <code class="language-plaintext highlighter-rouge">getActiveApp()</code> and <code class="language-plaintext highlighter-rouge">getiTermProcessName()</code>, contain code that is general enough that other scripts could leverage them. Therefore, they are the perfect candidates for extraction into some other file, where they can be shared.</p> <p>Let’s remove them from <code class="language-plaintext highlighter-rouge">refresh.applescript</code>, and put them into a “utilities” file:</p> <p><strong><code class="language-plaintext highlighter-rouge">src/command/actions/util.applescript</code></strong></p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">on</span> <span class="nv">getActiveApp</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="nb">return</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getActiveApp</span><span class="w">

</span><span class="k">on</span> <span class="nv">getiTermProcessName</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"iTerm2"</span><span class="w">
    </span><span class="nb">return</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">current</span><span class="w"> </span><span class="nv">session</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">current</span><span class="w"> </span><span class="na">window</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getiTermProcessName</span><span class="w">
</span></code></pre></div></div> <p>Okay, so now the big question: how can <code class="language-plaintext highlighter-rouge">refresh.applescript</code> use the code that now lives in <code class="language-plaintext highlighter-rouge">util.applescript</code>?</p> <h2 id="creating-shared-libraries">Creating Shared Libraries</h2> <p>AppleScript cannot just reach into neighbouring files with a line like <code class="language-plaintext highlighter-rouge">from util import getActiveApp</code>. What needs to occur is the metamorphosis of the utilities script into what AppleScript calls a <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_script_objects.html#//apple_ref/doc/uid/TP40000983-CH207-SW6">Script Library</a>, which involves:</p> <ul> <li>Creating a compiled version of the script with the <a href="https://ss64.com/osx/osacompile.html"><code class="language-plaintext highlighter-rouge">osacompile</code></a> command line tool (the compiled script will have a <a href="https://fileinfo.com/extension/scpt"><code class="language-plaintext highlighter-rouge">.scpt</code></a> file extension, instead of <code class="language-plaintext highlighter-rouge">.applescript</code>)</li> <li>Putting the compiled script in a designated “Script Libraries” folder, whose locations are numerous (see previous <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_script_objects.html#//apple_ref/doc/uid/TP40000983-CH207-SW6">Script Library</a> link), but the one I have seen cited most often, and that <em>did</em> work for me, is in the user Library directory, specifically: <code class="language-plaintext highlighter-rouge">~/Library/Script Libraries/</code></li> </ul> <p>After those steps are done, we can use the utility handlers again, so let’s give it a shot!</p> <p>First, create the compiled script:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">osacompile -o util.scpt util.applescript
</span></code></pre></div></div> <p>Now, move the newly created <code class="language-plaintext highlighter-rouge">util.scpt</code> script to the Script Libraries directory. Since that directory gets used by other programs as well, let’s silo the file in its own directory called <code class="language-plaintext highlighter-rouge">steno-dictionaries</code>:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">mkdir -p ~/Library/Script Libraries/steno-dictionaries
mv util.scpt ~/Library/Script Libraries/steno-dictionaries
</span></code></pre></div></div> <p>Now, we can change <code class="language-plaintext highlighter-rouge">refresh.applescript</code> to use the handlers in the newly-minted Script Library:</p> <p><strong><code class="language-plaintext highlighter-rouge">src/command/actions/refresh.applescript</code></strong></p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">property</span><span class="w"> </span><span class="nv">Util</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nv">script</span><span class="w"> </span><span class="s2">"steno-dictionaries/util"</span><span class="w">

</span><span class="k">on</span> <span class="nb">run</span><span class="w">
  </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">Util</span>'s <span class="nv">getActiveApp</span><span class="p">()</span><span class="w">

  </span><span class="c1"># ...</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nb">run</span><span class="w">

</span><span class="k">on</span> <span class="nv">performiTerm2Refresh</span><span class="p">()</span><span class="w">
  </span><span class="k">set</span><span class="w"> </span><span class="nv">processName</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">Util</span>'s <span class="nv">getiTermProcessName</span><span class="p">()</span><span class="w">

  </span><span class="c1"># ...</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">performiTerm2Refresh</span><span class="w">

</span><span class="c1"># ...</span><span class="w">
</span></code></pre></div></div> <p>Done! Since Shared Libraries are compiled, this enables us to reference them as a static <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_fundamentals.html#//apple_ref/doc/uid/TP40000983-CH218-SW5">Property</a> (here named <code class="language-plaintext highlighter-rouge">Util</code>), allowing for commands to be sent to it using the <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_script_objects.html#//apple_ref/doc/uid/TP40000983-CH207-SW3">possessive syntax</a> (<code class="language-plaintext highlighter-rouge">'s</code>).</p> <h2 id="shared-libraries-at-scale">Shared Libraries at Scale</h2> <p>The example above is all well and good for compiling a single Shared Library, but performing those commands for multiple files gets tiresome quite quickly.</p> <p>In order to automate this in my <a href="https://github.com/paulfioravanti/steno-dictionaries">steno-dictionaries repo</a>, I wrote some <a href="https://en.wikipedia.org/wiki/Shell_script">shell scripts</a> (that live in its <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/bin"><code class="language-plaintext highlighter-rouge">bin/</code> directory</a>) that “bootstrap” the process of making the AppleScript code in the repository ready to use after being <a href="https://git-scm.com/docs/git-clone">cloned</a>. They ensure that running one command (<code class="language-plaintext highlighter-rouge">./bin/bootstrap</code>) will, in the following order:</p> <ul> <li>Create a <code class="language-plaintext highlighter-rouge">~/Library/Script Libraries/steno-dictionaries</code> directory</li> <li>Compile all AppleScript files that will become Script Libraries into <code class="language-plaintext highlighter-rouge">.scpt</code> files</li> <li>Move the Script Library <code class="language-plaintext highlighter-rouge">.scpt</code> files to <code class="language-plaintext highlighter-rouge">~/Library/Script Libraries/steno-dictionaries</code></li> <li>Then, compile all other AppleScript files that reference the Script Libraries (but are not, themselves, Script Libraries) into <code class="language-plaintext highlighter-rouge">.scpt</code> files</li> </ul> <blockquote> <p>(I’m assuming that running <code class="language-plaintext highlighter-rouge">.scpt</code> files are faster than <code class="language-plaintext highlighter-rouge">.applescript</code> files since they are compiled, but I cannot seem to find conclusive evidence to back up that assumption on the internet, which is weird…).</p> </blockquote> <p>The <code class="language-plaintext highlighter-rouge">.scpt</code> scripts are executed by shell commands that run <a href="https://ss64.com/osx/osascript.html"><code class="language-plaintext highlighter-rouge">osascript</code></a> commands, which are contained in steno chord entries in the repo’s <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/src/command"><code class="language-plaintext highlighter-rouge">commands</code> directory</a>. The one that runs the “refresh” script looks like this:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash <span class="nt">-ci</span> <span class="s1">'osascript $STENO_DICTIONARIES/src/command/actions/refresh.scpt'</span>
</code></pre></div></div> <blockquote> <p>The shell commands run in <a href="https://www.gnu.org/software/bash/manual/html_node/Interactive-Shell-Behavior.html">interactive mode</a> for <a href="https://github.com/paulfioravanti/steno-dictionaries/blob/main/dictionaries/command.md">reasons</a>.</p> </blockquote> <h2 id="caring-about-sharing">Caring about Sharing</h2> <p>I really wish that sharing code in AppleScript was not as complex as it currently is, but I do not see that changing at all, assuming that AppleScript itself even survives into the future.</p> <p>The revamped <a href="https://developer.apple.com/">Apple Developer site</a> would seem to ignore AppleScript’s existence altogether (all the documentation links used in this post seem to come from the archive, implying they are now legacy and unmaintained…), but I do not see any alternative candidate language being put forward for macOS system automation programming.</p> <p>Personally, I would be happy to change everything I have written into <a href="https://www.swift.org/">Swift</a>, if that was possible. But, for now, I need AppleScript, and if you do too, hopefully this post has been able to serve as some reference.</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="apple"/><category term="scripting"/><summary type="html"><![CDATA[Navigating AppleScript's awkward handshakes between files.]]></summary></entry><entry><title type="html">“Welcome back”</title><link href="https://www.paulfioravanti.com/blog/welcome-back-overwork/" rel="alternate" type="text/html" title="“Welcome back”"/><published>2022-07-03T12:50:00+10:00</published><updated>2022-07-03T12:50:00+10:00</updated><id>https://www.paulfioravanti.com/blog/welcome-back-overwork</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/welcome-back-overwork/"><![CDATA[<div class="post-audio"> <div class="post-audio-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/_nkqjga6doM" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> </div> <div class="spacer"></div> <div class="text"> :studio_microphone: This post has audio narration </div> </div> <p>In the late <a href="https://en.wiktionary.org/wiki/noughties">noughties</a>, I worked for an American software company in Japan.</p> <p>That period in Tokyo, just pre-<a href="https://en.wikipedia.org/wiki/Bankruptcy_of_Lehman_Brothers">Lehman Shock</a>, felt like a mini tech boom: the company had managed to hit the jackpot by selling a colossal software and professional services deal to a huge Japanese company.</p> <p>Money from sales expense accounts flowed freely, even into the beers of the engineers; all in an attempt to foster goodwill, encourage a successful project implementation, and keep the customer happy.</p> <p>However, I do not recall anyone on the project ever being happy.</p> <p>The customer was not happy, because the software and its ecosystem did not work as they expected, for reasons which were obvious to them, but perhaps not to anyone outside Japan<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>.</p> <p>The project implementation team were not happy, because the responsibility to bridge the gap on these issues fell directly on them.</p> <p>During the worst periods, we were working literal 18-22 hour days. There were periods where I had no time to actually go home, and had to get my partner to physically bring me changes of clothes to the office; I had to grab showers, and maybe a couple of hours sleep, at my teammate’s apartment close by.</p> <p>Many weeks were spent on a schedule of getting an earful of frustration from the customer about the software product during the day (as well as from our own sales staff, who did not want to have their commissions jeopardised), then getting on calls with the US support and development teams throughout the night, in hopes they could create <a href="https://en.wikipedia.org/wiki/Patch_(computing)">patches</a> for the product. If they could, we would apply them, re-adapt our implementation to account for them, then rinse and repeat this cycle of insanity: we were very figuratively repairing the aeroplane, and replacing its parts, mid-flight.</p> <p>On one particular night, when I was actually able to make it home, my company-issued <a href="https://en.wikipedia.org/wiki/BlackBerry">BlackBerry</a> summoned me to a 2:00am conference call with one of the US regional offices to discuss the usual product issues found by the customer, which I joined lying flat on the floor.</p> <p>A lot of the conversation content was out of my depth, since I lacked background context from previous projects. But, when Japan-related questions finally came up, I was able to chime in and attempt to provide something of value, at which point my project teammate said the words that I can still hear clearly to this day:</p> <blockquote style="font-size: xx-large"> <p>“Welcome back”</p> </blockquote> <p>Confused, I asked what he was talking about, and his response impacted like a fireworks display of every red flag I had ignored about this project and the company.</p> <p>I was duly informed that I had <em>fallen asleep</em> on the call, and our colleagues across the <a href="https://en.wikipedia.org/wiki/Pacific_Ocean">Pacific</a> had decided to broadcast my snoring <em>office-wide</em> on their speakerphone for laughs.</p> <p>As far as I was concerned, I was <em>fully conscious</em>, alert, and focused on the discussions. But, it would seem that even in my dreams I couldn’t escape this waking nightmare of a project.</p> <p>Eventually, though, the project did end (“successfully”, so that everyone saved face), and I began formulating an exit strategy.</p> <p>Not fast enough to beat the start of a new assignment, though, which was shaping up to be even worse than the previous one: the project owner was a horrid person who, among many terrible traits, could not seem to grasp the concept of using a <a href="https://en.wikipedia.org/wiki/Deployment_environment#Staging">staging environment</a> to preview the current state of a website being actively developed on.</p> <p>He insisted that <em>every page of the <strong>website</strong></em> be <strong><em>printed out on paper</em></strong> periodically, and <em>put in a <strong>3-ring binder</strong></em> for his review, where he would <em><strong>manually mark out “corrections”</strong> he wanted with a <strong>pen</strong></em>!</p> <p>I just…yeah, no thanks.</p> <p>Even without a new employer to join, I knew I was severely burnt out, and just needed to leave <em>immediately</em>. Regardless of my youth, I could not ignore the toll the work took on me physically, and spent the following few months recovering before even thinking of looking for a new job.</p> <p>The fire of the trenches may have forged some great friendships between myself and former colleagues that still last to this day, but I do regret giving so much to a company, while receiving so comparatively little in return, in order to achieve such an inconsequential objective, that was not appreciated, which then required me to use my own time to heal the damage it caused.</p> <p>Unlike the software we implemented, which is long gone, the visceral mental rulebook for work that resulted from my experience at the company continues to serve me well (and has collected a few more entries over the years). With regards to overwork, my rules are quite simple:</p> <ol> <li>Do not overwork. It is just not worth it.</li> <li>Do not violate Rule 1. If you are foolish enough to do so, the incentives received had better take into consideration all the opportunity costs of that extra work time, the impact to physical and mental health, and the time needed to recover: all of which are higher than you likely think, so go check yourself and read Rule 1 again.</li> </ol> <p>What cannot reasonably be done today, can be done tomorrow; work is never “done”. A contract for employment is not an agreement to indentured servitude. Charity is for charities and other good causes, not for-profit organisations.</p> <p>I hope that you keep your own relationship with work healthy, and can leverage this cautionary tale to avoid ever being “welcomed back”.</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>Issues that I can specifically remember with the system included:</p> <ul> <li>Display, formatting, and encoding issues related to <a href="https://en.wikipedia.org/wiki/DBCS">double-byte character sets</a> and <a href="https://en.wikipedia.org/wiki/Half-width_kana">half-width <em>kana</em></a> (imagine a system that had problems displaying, say, English capital letters…)</li> <li>Inability to relate <em><a href="https://en.wikipedia.org/wiki/Furigana">furigana</a></em> readings to <em><a href="https://en.wikipedia.org/wiki/Kanji">kanji</a></em>, meant ordering of words would be based on their <a href="https://en.wikipedia.org/wiki/Unicode">Unicode</a> <a href="https://en.wikipedia.org/wiki/Code_point">code points</a>, rather than their <em><a href="https://en.wikipedia.org/wiki/Goj%C5%ABon">gojūon</a></em> ordering (imagine a system that couldn’t sort words alphabetically…)</li> <li>Garbled text (<em><a href="https://en.wikipedia.org/wiki/Mojibake">mojibake</a></em>) display when attempting to send emails to early Japanese mobile phones (<a href="https://en.wikipedia.org/wiki/Gal%C3%A1pagos_syndrome#Mobile_phones">Galápagos phones</a>) due to not being able to handle <a href="https://en.wikipedia.org/wiki/Japanese_language_and_computers#Character_encodings">Japanese character encodings</a> like <a href="https://en.wikipedia.org/wiki/ISO/IEC_2022#ISO-2022-JP">ISO-2022-JP</a> (imagine a system that only sent out emails in <a href="https://en.wikipedia.org/wiki/Dingbat">dingbat</a> font…)</li> <li>Limited ability to customise the software product for their specific business processes (which smells to me like they were oversold on the software product’s <a href="https://en.wikipedia.org/wiki/Extensibility">extensibility</a>)</li> <li>Poorly translated Japanese documentation, if there was any at all</li> </ul> <p><a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="japan"/><category term="work"/><category term="overwork"/><category term="software"/><category term="japanization"/><category term="j10n"/><category term="feature-phones"/><category term="日本"/><category term="ガラケー"/><summary type="html"><![CDATA[A short story of overwork from the software trenches of Tokyo.]]></summary></entry><entry><title type="html">Flexbox Furigana</title><link href="https://www.paulfioravanti.com/blog/flexbox-furigana/" rel="alternate" type="text/html" title="Flexbox Furigana"/><published>2022-06-25T10:30:00+10:00</published><updated>2022-06-28T09:00:00+10:00</updated><id>https://www.paulfioravanti.com/blog/flexbox-furigana</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/flexbox-furigana/"><![CDATA[<p><em><a href="https://en.wikipedia.org/wiki/Furigana">Furigana</a></em> are annotations used to indicate the Japanese reading, or pronunciation, of Chinese <em><a href="https://en.wikipedia.org/wiki/Kanji">kanji</a></em> characters.</p> <p>As a simple example, let’s say we have a character like this<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>:</p> <div class="japanese-hero"> 車 </div> <p><em>Furigana</em> for the <em>kanji</em>, written with <em><a href="https://en.wikipedia.org/wiki/Hiragana">hiragana</a></em><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>, can be placed above it<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>:</p> <div class="japanese-hero" style="padding-top: 20px;"> <ruby lang="ja"> 車 <rp>(</rp> <rt style="ruby-align: center; text-align: center; font-size: medium;"> くるま </rt> <rp>)</rp> </ruby> </div> <p>This is all well and good for Japanese speakers, but what if I wanted English-speakers to be able to read along as well? This can be done by adding the character’s pronunciation using Latin script (<em><a href="https://en.wikipedia.org/wiki/Romanization_of_Japanese">romaji</a></em>) as another <em>furigana</em>-style annotation:</p> <div class="japanese-hero"> <ruby lang="ja" class="japanese"> <ruby lang="ja"> 車 <rp>(</rp> <rt style="ruby-align: center; text-align: center; font-size: medium;"> くるま </rt> <rp>, </rp> </ruby> <rt style="font-style: italic; font-size: medium;"> kuruma </rt> <rp>)</rp> </ruby> </div> <p>Okay, but what does this word actually mean? We could put an English translation to the right of the word, or pile on <em>yet another</em> annotation for the English meaning<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>:</p> <div class="japanese-hero"> <ruby lang="en" class="japanese"> <ruby lang="ja" class="japanese"> <ruby lang="ja"> 車 <rp>(</rp> <rt style="ruby-align: center; text-align: center; font-size: medium;"> くるま </rt> <rp>, </rp> </ruby> <rt style="font-style: italic; font-size: medium;"> kuruma </rt> <rp>, </rp> </ruby> <rt lang="en" style="font-weight: bold; text-align: center;"> car </rt> <rp>) </rp> </ruby> </div> <p>For single words, this “full-suite” of annotations could be considered acceptable, but for complete sentences, where the objective is to have a non-Japanese speaker read along <ruby lang="ja">phonetically<rp>(</rp><rt style="">fuh·neh·ti·kuh·lee</rt><rp>)</rp></ruby>, I think any translation needs its own dedicated section.</p> <p>I did exactly this in a previous blog post, <em><a href="https://www.paulfioravanti.com/blog/persons-character/">A Person’s Character (人という字は)</a></em>, where I wanted to show the <ruby lang="ja">pronunciation<rp>(</rp><rt style="">/pɹəˌnʌn.siˈeɪ.ʃən/</rt><rp>)</rp></ruby> and meaning of some lines of dialogue from the television drama <em><a href="https://en.wikipedia.org/wiki/Kinpachi-sensei">Kinpachi-sensei</a></em>. The intention was to enable English speakers to follow the Japanese dialogue using the <em>romaji</em> annotations, and <em>then</em> read the translation:</p> <blockquote> <div class="japanese-with-furigana-romaji"> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">君<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">きみ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> Kimi</rt> </ruby> <ruby lang="ja" class="japanese"> たち <rt class="romaji" style="font-size: 50%"> tachi</rt> </ruby> <ruby lang="ja" class="japanese"> いい <rt class="romaji" style="font-size: 50%"> ii</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu</rt> </ruby> <ruby lang="ja" class="japanese"> か <rt class="romaji" style="font-size: 50%"> ka~.</rt> </ruby> <ruby lang="ja" class="japanese"> 〜。 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> Hito</rt> </ruby> <ruby lang="ja" class="japanese"> と <rt class="romaji" style="font-size: 50%"> to</rt> </ruby> <ruby lang="ja" class="japanese"> いう <rt class="romaji" style="font-size: 50%"> iu</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">字<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">じ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> ji</rt> </ruby> <ruby lang="ja" class="japanese"> は <rt class="romaji" style="font-size: 50%"> wa</rt> </ruby> <ruby lang="ja" class="japanese"> ねぇ <rt class="romaji" style="font-size: 50%"> nē,</rt> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> ひとり <rt class="romaji" style="font-size: 50%"> hitori</rt> </ruby> <ruby lang="ja" class="japanese"> の <rt class="romaji" style="font-size: 50%"> no</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">「人」<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:8px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> "hito"</rt> </ruby> <ruby lang="ja" class="japanese"> が <rt class="romaji" style="font-size: 50%"> ga</rt> </ruby> <ruby lang="ja" class="japanese"> もう <rt class="romaji" style="font-size: 50%"> mō</rt> </ruby> <ruby lang="ja" class="japanese"> ひとり <rt class="romaji" style="font-size: 50%"> hitori</rt> </ruby> <ruby lang="ja" class="japanese"> の <rt class="romaji" style="font-size: 50%"> no</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">「人」<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:8px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> "hito"</rt> </ruby> <ruby lang="ja" class="japanese"> を <rt class="romaji" style="font-size: 50%"> o</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">支えて<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:3px;">ささ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> sasaete</rt> </ruby> <ruby lang="ja" class="japanese"> いる <rt class="romaji" style="font-size: 50%"> iru</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">字<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">じ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> ji</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu.</rt> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> <ruby lang="ja" class="japanese"> つまり <rt class="romaji" style="font-size: 50%"> Tsumari,</rt> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> と <rt class="romaji" style="font-size: 50%"> to</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> が <rt class="romaji" style="font-size: 50%"> ga</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-compound-word"> <ruby lang="ja" class="japanese"> <ruby lang="ja">支え<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:3px;">ささ</rt><rp>)</rp></ruby> <rt class="romaji" style="font-size: 50%"> sasae</rt> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">合ってる<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:8px;">あ</rt><rp>)</rp></ruby> <rt class="romaji" style="font-size: 50%"> atteru</rt> </ruby> </span> </ruby> <ruby lang="ja" class="japanese"> から <rt class="romaji" style="font-size: 50%"> kara</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> なん <rt class="romaji" style="font-size: 50%"> nan</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu.</rt> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> Hito</rt> </ruby> <ruby lang="ja" class="japanese"> は <rt class="romaji" style="font-size: 50%"> wa</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> に <rt class="romaji" style="font-size: 50%"> ni</rt> </ruby> <ruby lang="ja" class="japanese"> よって <rt class="romaji" style="font-size: 50%"> yotte</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">支えられ<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:3px;">ささ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> sasaerare,</rt> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> の <rt class="romaji" style="font-size: 50%"> no</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">間<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:5px;">あいだ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> aida</rt> </ruby> <ruby lang="ja" class="japanese"> で <rt class="romaji" style="font-size: 50%"> de</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人間<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:6px;">にんげん</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> ningen</rt> </ruby> <ruby lang="ja" class="japanese"> として <rt class="romaji" style="font-size: 50%"> toshite</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">磨かれて<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:4px;">みが</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> migakarete</rt> </ruby> <ruby lang="ja" class="japanese"> いくん <rt class="romaji" style="font-size: 50%"> ikun</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu.</rt> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> </div> <br/> Can I have your attention, please. So, the character for "person" consists of one person holding up and sustaining another person. In other words, it is a "person" precisely <em>because</em> a person and another person are supporting each other. A person gets support from other people and their community, and through that support, grows and develops as a human. </blockquote> <p>Figuring out the idiosyncrasies of how to mark-up and display all of these annotations in the way I wanted using <a href="https://en.wikipedia.org/wiki/HTML">HTML</a> and <a href="https://en.wikipedia.org/wiki/CSS">CSS</a>, and then developing a way to extract that logic out into functionality that could be shared across multiple <a href="https://daringfireball.net/projects/markdown/">Markdown</a>-based blog posts using <a href="https://shopify.github.io/liquid/">Liquid</a>, took me far more time than I expected, and became the catalyst for writing this particular blog post.</p> <p>So, the following is my <a href="https://en.wiktionary.org/wiki/brain_dump">brain dump</a> on what I learned about using annotations on the web.</p> <h2 id="annotation-markup">Annotation Markup</h2> <div class="centered-image" style="width: 60%;"> <figure style="margin-bottom: 0; margin-top: 20px;"> <img src="/assets/images/2022-06-25/Furigana_example.png" alt="Japanese word meaning 'furigana' with above smaller orange phonetic hiragana called 'furigana' helping to pronounce it."/> </figure> <figcaption style="margin-bottom: 0.75em;"> Image by Kang Seonghoon, Public domain, via <a href="https://commons.wikimedia.org/wiki/File:Furigana_example.svg"> Wikimedia Commons </a> </figcaption> </div> <p><em>Furigana</em> is a type of <a href="https://en.wikipedia.org/wiki/Ruby_character">Ruby character</a> annotation<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>, and is marked up in HTML using the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby"><code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code></a> tag.</p> <p>Searching the internet for how to mark-up <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> elements leads to a significant amount of conflicting information. The <a href="https://www.w3.org/TR/2001/REC-ruby-20010531/Overview.html.utf-8">W3 Ruby Annotation</a> document mentions a selection of markup tags that can appear inside a <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tag:</p> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt"><code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code></a>: ruby text (the annotation)</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp"><code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code></a>: ruby parenthesis (for when a browser does not support ruby annotations and the ruby text gets rendered inline)</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rb"><code class="language-plaintext highlighter-rouge">&lt;rb&gt;</code></a>: ruby base (the text that is being annotated)</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rtc"><code class="language-plaintext highlighter-rouge">&lt;rtc&gt;</code></a>: ruby text container (a container for <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> elements when markup is “complex”)</li> <li><code class="language-plaintext highlighter-rouge">&lt;rbc&gt;</code>: ruby base container (a container for <code class="language-plaintext highlighter-rouge">&lt;rb&gt;</code> elements when markup is “complex”)</li> </ul> <p>Each of the tag links in the list above is from the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML">Mozilla HTML documentation</a>, a trustworthy source for this kind of information (in my opinion), and they say that the <code class="language-plaintext highlighter-rouge">&lt;rb&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;rtc&gt;</code>, and <code class="language-plaintext highlighter-rouge">&lt;rbc&gt;</code> tags are <a href="https://en.wikipedia.org/wiki/Deprecation">deprecated</a>, and should be avoided. In order to future-proof <em>furigana</em> annotations, it would seem that only three tags should be used: container <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags, along with child <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tags.</p> <p>So, for the “car” <em>kanji</em> from the example above, <ruby lang="ja">車<rp>(</rp><rt style="">くるま</rt><rp>)</rp></ruby>, the markup could look like the following:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
  車
  <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;rt&gt;</span>くるま<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <blockquote> <p>What are those <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tags for? In the event that a browser does not support ruby annotations, the code above will display as:</p> <div class="japanese-hero" style="margin-top: -20px; font-size: xx-large;"> 車(くるま) </div> <figure style=" float: right; margin-bottom: 0; margin-left: 10px; margin-top: 10px; width: 40%; "> <img src="/assets/images/2022-06-25/browser-dev-tools.jpg" alt="Ruby &lt;rt&gt; tag base CSS styles in Chrome dev tools"/> </figure> <p>I could not find any built-in functionality that would force a modern browser to “pretend” it does not support annotations, but I was able to follow the <a href="https://www.w3.org/TR/css-ruby-1/#default-inline">Inlining Ruby Annotations</a> section of <a href="https://www.w3.org/TR/css-ruby-1/">CSS Ruby Annotation Layout Module</a>, and add styling via the browser developer tools to achieve the desired display behaviour:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">rp</span><span class="o">,</span> <span class="nt">rt</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">inline</span><span class="p">;</span>
  <span class="nl">white-space</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>
  <span class="nl">font</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>
  <span class="nl">text-emphasis</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div> </div> </blockquote> <p>Given that the <a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-ruby-element">HTML spec for the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> element</a> says that a <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tag can contain “one or more <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> elements”, you may be forgiven for thinking that adding the extra <em>romaji</em> annotation would be a case of perhaps appending it beneath the <em>furigana</em>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
  車
  <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;rt&gt;</span>くるま<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>, <span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;rt&gt;</span>kuruma<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero" style="padding-top: 40px;"> <ruby lang="ja"> 車 <rp>(</rp> <rt>くるま</rt> <rp>, </rp> <rt>kuruma</rt> <rp>)</rp> </ruby> </div> <p>Not great. We can, however, rearrange the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> child elements, and leverage CSS <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox">Flexbox</a> styling, to exhert more control over the visuals (we will keep styling <a href="https://www.w3schools.com/html/html_css.asp">inline</a> for demonstration purposes moving forward):</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column-reverse;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;rt&gt;</span>kuruma<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>, <span class="nt">&lt;/rp&gt;</span>
  車
  <span class="nt">&lt;rt&gt;</span>くるま<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style=" display: inline-flex; flex-direction: column-reverse; "> <rp>(</rp> <rt>kuruma</rt> <rp>, </rp> 車 <rt>くるま</rt> <rp>)</rp> </ruby> </div> <p>This displays in a similar way to the initial example at the beginning of the post (though the default gap between the <em>kanji</em> and <em>furigana</em> is a bit concerning…). However, I think the meaning behind the child elements of the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> parent tag have become muddled.</p> <p>What is annotating what? Is 車 annotating <em>kuruma</em>, along with くるま annotating 車? Technically, it seems these semantics are valid, but is there is another way to communicate the desired annotations via markup?</p> <blockquote> <p>Note, also, that we have headed into exploitation territory for the meaning of the <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tag to make sure that we get <strong>車(くるま, kuruma)</strong> displayed when annotations are not supported (commas are not parentheses, after all). I do not currently know of a “better” way to mark this up to allow for a similar kind of display.</p> </blockquote> <p>The code examples in the <a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-ruby-element">HTML spec for the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> element</a> show that “a nested <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> element” can be used for inner annotations. In our case, this could mean that the markup should indicate that:</p> <ul> <li>くるま annotates 車 (one <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> inner nested element)</li> <li><em>kuruma</em> annotates the <ruby lang="ja">車<rp>(</rp><rt style="">くるま</rt><rp>)</rp></ruby> compound (another <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> outer nesting element)</li> </ul> <p>Let’s see how this could look in markup:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    車
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>くるま<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>kuruma<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 車 <rp>(</rp> <rt>くるま</rt> <rp>)</rp> </ruby> <rt>kuruma</rt> </ruby> </div> <p>Looks acceptable to me, and I think the meaning of the markup is conveyed in a clearer way.</p> <blockquote> <p>Nesting <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags like this means we have to give up the ability to display the <em>furigana</em> and <em>romaji</em> together [<strong>車(くるま, kuruma)</strong>], when annotations are not supported. But, I am prepared to accept this compromise because the fallback display looks good enough for the rare times it will probably ever be viewed:</p> <div class="japanese-hero" style="font-size: xx-large;"> <div>車(くるま)</div> <div>kuruma</div> </div> </blockquote> <p>Before concluding that we have the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> markup and styling to use as a foundation to build with, let’s test it with a few other <em>kanji</em> scenarios.</p> <h2 id="single-word-multiple-kanji">Single Word, Multiple <em>Kanji</em></h2> <p>Not every word in Japanese can be written with a single <em>kanji</em>; many require multiple <em>kanji</em> together in a compound. So, let’s test the current markup’s display of <em>kanji</em> compounds by changing the “car” into an “automobile”:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    自動車
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>じどうしゃ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>jidōsha<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 自動車 <rp>(</rp> <rt>じどうしゃ</rt> <rp>)</rp> </ruby> <rt>jidōsha</rt> </ruby> </div> <p>This looks like it displays as expected. However, pedanticism is going to get the best of me here: even though the <em>furigana</em> is correct for the entire word, they <em>don’t quite</em> line up perfectly above the individual characters they are annotating the reading for.</p> <p>Let’s see if we can fix that by adding more <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code>/<code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tag sets:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    自
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>じ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    動
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>どう<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    車
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>しゃ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>
    jidōsha
  <span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 自 <rp>(</rp> <rt>じ</rt> <rp>)</rp> 動 <rp>(</rp> <rt>どう</rt> <rp>)</rp> 車 <rp>(</rp> <rt>しゃ</rt> <rp>)</rp> </ruby> <rt> jidōsha </rt> </ruby> </div> <p>Ah, much better! The difference may be minor, but I think it’s important!</p> <blockquote> <p>Doing this, unfortunately, “breaks” the <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> fallback display even more, as the <em>furigana</em> readings are now displayed broken down not by full word, but by character:</p> <div class="japanese-hero" style="font-size: xx-large;"> <div>自 (じ) 動 (どう) 車 (しゃ)</div> <div>jidōsha</div> </div> <p>At this point, I think attempting to handle the fallback display gracefully is going to be prioritised to a distant second compared to getting the <em>furigana</em> displaying well for “normal” modern browser usage.</p> </blockquote> <h2 id="single-word-alternating-kanji-and-kana">Single Word, Alternating <em>Kanji</em> and <em>Kana</em></h2> <p><a href="https://www.wasabi-jpn.com/japanese-grammar/japanese-compound-verbs/">Compound verbs</a> in Japanese are a good example of words that alternate between <em>kanji</em> and <em><a href="https://en.wikipedia.org/wiki/Kana">kana</a></em> in their construction. For example, in the annotations for the word <em>norikomu</em> (乗り込む), meaning “to get into (a vehicle)”, I would expect there to be <em>furigana</em> over 乗 and 込, but not over り or む. As for the <em>romaji</em>, I think a single annotation under the word would suffice.</p> <p>Let’s see if we can re-use the code from the <em>kanji</em> compound to achieve the effect we want:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    乗
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    り
    込
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    む
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>
    norikomu
  <span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> <rt> norikomu </rt> </ruby> </div> <p>Hmm, not quite right: that second <em>furigana</em> positioning is incorrect, and there is an awkward space between 乗り and 込む. Perhaps each half of this word needs to be its own <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> element? Let’s give that a try:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    乗
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    り
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    込
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    む
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>norikomu<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り </ruby> <ruby lang="ja"> 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> <rt>norikomu</rt> </ruby> </div> <p>The <em>furigana</em> positioning is fixed, but since we now have three child elements under the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tag, the <code class="language-plaintext highlighter-rouge">flex-direction: column</code> styling is displaying them all vertically, which is not the result we want.</p> <p>In order to get them to display as one set, we will need to wrap a container around the 乗り and 込む <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags. Yet another <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tag seems like it could be overkill here, so, instead, let’s try a plain old <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span"><code class="language-plaintext highlighter-rouge">&lt;span&gt;</code></a> tag, and give it some Flexbox styling as well:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"display: inline-flex;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
      乗
      <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
      <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      り
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
      込
      <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
      <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      む
    <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;rt&gt;</span>norikomu<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <span style="display: inline-flex;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り </ruby> <ruby lang="ja"> 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> </span> <rt>norikomu</rt> </ruby> </div> <p>Looks good to me! If we <em>did</em> want to split the <em>romaji</em>, so the annotation was under each part of the word, we have the option of changing the tag nesting around to achieve that effect:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"display: inline-flex;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
      乗
      <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
      <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      り
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;rt&gt;</span>nori<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
      込
      <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
      <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      む
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;rt&gt;</span>komu<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
<span class="nt">&lt;/span&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <span style="display: inline-flex; justify-content: center;"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り </ruby> <rt>nori</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> <rt>komu</rt> </ruby> </span> </div> <p>Great! We now know there are options around the display for <em>romaji</em>, for potential readability and/or aesthetic reasons.</p> <h2 id="styled-furigana">Styled <em>Furigana</em></h2> <p>Speaking of aesthetics, does <em>furigana</em> still display as expected if the CSS <code class="language-plaintext highlighter-rouge">font-style</code> changes, like how everything gets italicised on this page when the content is within <code class="language-plaintext highlighter-rouge">&lt;blockquote&gt;</code> tags? Let’s find out with the phrase <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">自<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:0;">じ</rt><rp>)</rp></ruby> <ruby lang="ja">動<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:0;">どう</rt><rp>)</rp></ruby> <ruby lang="ja">車<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:0;">しゃ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> jidōsha</rt> </ruby><ruby lang="ja" class="japanese"> に <rt class="romaji" style="font-size: 50%"> ni</rt> </ruby><ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">乗り<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:5px;">の</rt><rp>)</rp></ruby> <ruby lang="ja">込む<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:7px;">こ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> norikomu</rt> </ruby> (“to get into the automobile”):</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;blockquote&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"align-items: baseline; display: inline-flex;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
        自
        <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
        <span class="nt">&lt;rt&gt;</span>じ<span class="nt">&lt;/rt&gt;</span>
        <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
        動
        <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
        <span class="nt">&lt;rt&gt;</span>どう<span class="nt">&lt;/rt&gt;</span>
        <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
        車
        <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
        <span class="nt">&lt;rt&gt;</span>しゃ<span class="nt">&lt;/rt&gt;</span>
        <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;/ruby&gt;</span>
      <span class="nt">&lt;rt&gt;</span>jidōsha<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
      に
      <span class="nt">&lt;rt&gt;</span>ni<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"display: inline-flex;"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
          乗
          <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
          <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
          <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
          り
        <span class="nt">&lt;/ruby&gt;</span>
        <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
          込
          <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
          <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
          <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
          む
        <span class="nt">&lt;/ruby&gt;</span>
      <span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;rt&gt;</span>norikomu<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/blockquote&gt;</span>
</code></pre></div></div> <blockquote> <div class="japanese-hero"> <div style="align-items: baseline; display: inline-flex;"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 自 <rp>(</rp> <rt>じ</rt> <rp>)</rp> 動 <rp>(</rp> <rt>どう</rt> <rp>)</rp> 車 <rp>(</rp> <rt>しゃ</rt> <rp>)</rp> </ruby> <rt>jidōsha</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> に <rt>ni</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <span style="display: inline-flex;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り </ruby> <ruby lang="ja"> 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> </span> <rt>norikomu</rt> </ruby> </div> </div> </blockquote> <p>Well, it seems that annotations do not really understand italics; they look a tiny bit off, don’t they? It would be nice to be able to nudge them a bit to the right on an individual character basis.</p> <p>Luckily, this is a simple matter of just adding in some <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-align"><code class="language-plaintext highlighter-rouge">text-align</code></a> styling in the <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> tags:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;blockquote&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"..."</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"..."</span><span class="nt">&gt;</span>
      <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
        自
        <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
        <span class="nt">&lt;rt</span> <span class="na">style=</span><span class="s">"text-align: right;"</span><span class="nt">&gt;</span>じ<span class="nt">&lt;/rt&gt;</span>
        <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>
      <span class="nt">&lt;/ruby&gt;</span>
      <span class="nt">&lt;rt&gt;</span>jidōsha<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="c">&lt;!-- ... --&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/blockquote&gt;</span>
</code></pre></div></div> <blockquote> <div class="japanese-hero"> <div style="align-items: baseline; display: inline-flex;"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> <span> 自 </span> <rp>(</rp> <rt style="text-align: right;">じ</rt> <rp>)</rp> <span> 動 </span> <rp>(</rp> <rt style="text-align: right;">どう</rt> <rp>)</rp> <span> 車 </span> <rp>(</rp> <rt style="text-align: right;">しゃ</rt> <rp>)</rp> </ruby> <rt>jidōsha</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> に <rt>ni</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <span style="display: inline-flex;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt style="text-align: right;">の</rt> <rp>)</rp> り </ruby> <ruby lang="ja"> 込 <rp>(</rp> <rt style="text-align: right;">こ</rt> <rp>)</rp> む </ruby> </span> <rt>norikomu</rt> </ruby> </div> </div> </blockquote> <p>This looks a tiny bit better, though it seems to be more effective for single character <em>furigana</em> than those for compound characters. Pushing the <em>furigana</em> any further to the right would involve adding some <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left"><code class="language-plaintext highlighter-rouge">padding-left</code></a> attributes to the <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> tag (which could push the <em>kanji</em> into places you may not want), so feel free to experiment on getting the alignment just right for your tastes.</p> <p>Finally, let’s just confirm the markup works for some exceptional circumstances.</p> <h2 id="long-and-short-furigana">Long and Short <em>Furigana</em></h2> <p>There are some words in Japanese where up to five syllables can be represented by a single <em>kanji</em>. Let’s use the markup with <em>uketamawaru</em> a word that fits these conditions, and means “to be told” or “to receive (an order)”:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    承
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>うけたまわ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    る
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>uketamawaru<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 承 <rp>(</rp> <rt>うけたまわ</rt> <rp>)</rp> る </ruby> <rt>uketamawaru</rt> </ruby> </div> <p>I think this display is <em>okay</em>, given the awkwardness of the <em>furigana</em> to <em>kanji</em> ratio. But, that gap between 承 and る just seems too big to me, and makes me wonder whether allowing for more flexibility in the size of the <em>furigana</em> annotation would make it less unwieldy.</p> <p>Let’s see what happens if we give the <em>furigana</em> a smaller absolute CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size"><code class="language-plaintext highlighter-rouge">font-size</code></a> value:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    承
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt</span> <span class="na">style=</span><span class="s">"font-size: small;"</span><span class="nt">&gt;</span>うけたまわ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    る
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>uketamawaru<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 承 <rp>(</rp> <rt style="font-size: small;">うけたまわ</rt> <rp>)</rp> る </ruby> <rt>uketamawaru</rt> </ruby> </div> <p>Much better, I think, and it can be adjusted to preference on a per-character basis.</p> <p>Now, what about the opposite scenario, when there are more <em>kanji</em> than <em>furigana</em> characters? This will only really happen with so-called <a href="https://en.wikipedia.org/wiki/Kanji#Special_readings">Special Readings</a>, which occur frequently with geographical or human names. So, let’s try the markup with a good example of this, the surname <em>Hozumi</em>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    八月一日
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>ほずみ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>Hozumi<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 八月一日 <rp>(</rp> <rt>ほずみ</rt> <rp>)</rp> </ruby> <rt>Hozumi</rt> </ruby> </div> <p>I think this display of ほずみ<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup> looks fine. The spacing of the <em>furigana</em> may look a bit strange, but since there is no correlation between the annotation and the pronunciation of each individual <em>kanji</em>, having them spread out evenly across the top of the word, or center-aligned, is probably the most logical way to display them.</p> <h2 id="markup-reuse">Markup Reuse</h2> <p>As you can see from the chunky markup blocks above, annotations can take up a lot of coding space. Personally, I do not want to have to manually write <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags every time I want to insert a Japanese word with any kind of annotation into my blog posts, so I wanted a way to reuse that markup.</p> <p><a href="https://jekyllrb.com/">Jekyll</a> is the engine that currently powers this blog, and it allows the usage of <a href="https://shopify.github.io/liquid/">Liquid</a>, a templating language, which has enabled me to put <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> code into functions that take parameters to fine-tune how annotations should display. These functions are littered throughout the <a href="https://raw.githubusercontent.com/paulfioravanti/paulfioravanti.github.io/release/_posts/2022-06-25-flexbox-furigana.md">code for this blog post</a>, as well as other Japanese language-related posts, and fall into two main groups.</p> <h3 id="basic-ruby-tags">Basic Ruby Tags</h3> <p>These are functions that wrap around <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags for purposes of general annotation, and are not specific to Japanese (though they can certainly be used that way). Some examples used in this blog post that you may have noticed are:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>ruby.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"phonetically"</span><span class="w"> </span><span class="na">annotation</span><span class="o">=</span><span class="s2">"fuh·neh·ti·kuh·lee"</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>ruby.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"pronunciation"</span><span class="w"> </span><span class="na">annotation</span><span class="o">=</span><span class="s2">"/pɹəˌnʌn.siˈeɪ.ʃən/"</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>ruby.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"車"</span><span class="w"> </span><span class="na">annotation</span><span class="o">=</span><span class="s2">"くるま"</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <h3 id="ruby-tags-for-japanese">Ruby Tags for Japanese</h3> <p>There are also functions that take in parameters which allow all the fine-tuning customisations to <em>furigana</em> and <em>romaji</em> we have seen in the examples above, and are hence specific for use with Japanese. Under the hood, they all leverage the <code class="language-plaintext highlighter-rouge">{% include ruby.html %}</code> function. Some examples used in this post are:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>japanese.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"自,動,車"</span><span class="w">
                         </span><span class="na">furigana</span><span class="o">=</span><span class="s2">"じ,どう,しゃ"</span><span class="w">
                         </span><span class="na">romaji</span><span class="o">=</span><span class="s2">"jidōsha"</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>japanese.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"に"</span><span class="w"> </span><span class="na">romaji</span><span class="o">=</span><span class="s2">"ni"</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>japanese.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"乗り,込む"</span><span class="w">
                         </span><span class="na">furigana</span><span class="o">=</span><span class="s2">"の,こ"</span><span class="w">
                         </span><span class="na">romaji</span><span class="o">=</span><span class="s2">"norikomu"</span><span class="w">
                         </span><span class="na">furigana-align</span><span class="o">=</span><span class="s2">"left"</span><span class="w">
                         </span><span class="na">furigana-left-padding</span><span class="o">=</span><span class="s2">"5px,7px"</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>Going through the details of these functions is something I will leave up to the interested reader<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup>. You can find all the code in the <a href="https://github.com/paulfioravanti/paulfioravanti.github.io/tree/release/_includes"><code class="language-plaintext highlighter-rouge">_includes/</code> directory</a> of this blog’s codebase.</p> <h2 id="much-ado-about-annotations">Much Ado About Annotations</h2> <p>For such small text, the coding, display, debugging, and <a href="https://en.wikipedia.org/wiki/Code_refactoring">refactoring</a> of <em>furigana</em> has taken up a significant amount of my time and brain space. However, I still do not <em>really</em> know if I am doing it “right”.</p> <p>The developers over at the <a href="https://japanese.stackexchange.com/">Japanese Language Stack Exchange</a>, whom I assume are experts at all things Japanese for the web, would seem to eschew <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> tags for <code class="language-plaintext highlighter-rouge">&lt;span&gt;</code> tags in order to represent <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;rb&gt;</code> values for their cool <em>furigana</em> pop-ups:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">title=</span><span class="s">""</span> <span class="na">class=</span><span class="s">"ruby-rp popups"</span> <span class="na">style=</span><span class="s">"..."</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"rb"</span><span class="nt">&gt;</span>終幕<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"rt"</span> <span class="na">style=</span><span class="s">"..."</span><span class="nt">&gt;</span>さいご<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <p>However, <a href="https://www3.nhk.or.jp/news/easy/">NHK Easy News</a> <em>does</em> use <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> tags in the same way as the examples in this post. However, they, too, have opted to not use <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tags (perhaps they considered them to be legacy/unnecessary…?).</p> <p><a href="https://news.yahoo.co.jp/">Yahoo News Japan</a> does not support <em>furigana</em> annotations at all, preferring instead to display <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code>-style parenthesised <em>kanji</em> readings inline (perhaps because they are a bit <a href="https://en.wikipedia.org/wiki/Web_2.0#Web_1.0">Web 1.0</a>-in-the-tooth, and still want to support browsing on <ruby lang="ja"><a href="https://en.wikipedia.org/wiki/Gal%C3%A1pagos_syndrome#Mobile_phones">Galápagos phones</a><rp>(</rp><rt style="text-align: center">ガラケー</rt><rp>)</rp></ruby>, which display pages using <a href="https://en.wikipedia.org/wiki/I-mode">cHTML</a>, a subset of HTML that <a href="https://www.docomo.ne.jp/service/developer/make/content/browser/html/tag/">does not support <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags</a>).</p> <p>Regardless, this post represents everything I think I know about <em>furigana</em> for the web, and now you know it, too. If new information comes up, or the specification for use of <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code>-related tags changes, I am definitely happy to revise any content. If there is something I have missed, please reach out and let me know!</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>All Japanese character displays were confirmed to work as expected on <a href="https://www.google.com/chrome/">Google Chrome</a>. So, if you use another browser, and explanations do not quite match the display, that would be why. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p><em>Hiragana</em> is generally used for <em>furigana</em>, but you can also see <em><a href="https://en.wikipedia.org/wiki/Katakana">katakana</a></em> used to annotate some <a href="https://en.wikipedia.org/wiki/Furigana#Names">surnames and place names</a>, as well as convey <a href="https://en.wikipedia.org/wiki/Furigana#Punning_and_double_meaning">double meanings and linguistic puns</a>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3" role="doc-endnote"> <p>Placed above when the <em>kanji</em> is written left-to-right horizontally (<em><a href="https://en.wikipedia.org/wiki/Horizontal_and_vertical_writing_in_East_Asian_scripts#Japanese">yokogaki</a></em>), but placed to the right when written right-to-left vertically (<em><a href="https://en.wikipedia.org/wiki/Horizontal_and_vertical_writing_in_East_Asian_scripts#Japanese">tategaki</a></em>). <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4" role="doc-endnote"> <p>Or, you could use a browser extension like <a href="https://addons.thunderbird.net/en-us/firefox/addon/rikaichan/">Rikaichan</a> or <a href="https://chrome.google.com/webstore/detail/rikaikun/jipdnfibhldikgcjhfnomkfpcebammhp?hl=en">Rikaikun</a>, which display pop-up kanji readings and English translations when you mouse over them, making any lack of annotations irrelevant. For purposes of this post, we’ll pretend they do not exist (I still absolutely recommend using them, though!). <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:5" role="doc-endnote"> <p>The name of which is from an old British typography type that had a height of 5.5 <a href="https://en.wikipedia.org/wiki/Point_(typography)">points</a>, and not to be confused with anything related to the <a href="https://www.ruby-lang.org/en/">Ruby</a> programming language. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:6" role="doc-endnote"> <p>As well as <ruby lang="ja" class="japanese"> ほずみ <rt class="romaji" style="font-size: 50%"> Hozumi</rt> </ruby>, 八月一日 can be read as <ruby lang="ja" class="japanese"> ほづみ <rt class="romaji" style="font-size: 50%"> Hozumi</rt> </ruby>, <ruby lang="ja" class="japanese"> やぶみ <rt class="romaji" style="font-size: 50%"> Yabumi</rt> </ruby>, and <ruby lang="ja" class="japanese"> はっさく <rt class="romaji" style="font-size: 50%"> Hassaku</rt> </ruby>. <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:7" role="doc-endnote"> <p>It was tough to keep my own interest up with Liquid since I found using it so frustrating, even after changing my mindset to thinking of it as <a href="https://ideawrights.com/shopify-associative-arrays/">“smart HTML rather than dumb Ruby”</a>. Nevertheless, I got what I wanted in the end after significant trial and error; hopefully, you can save yourself some time and irritation by using the code if you have similar use cases. <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="japan"/><category term="japanese"/><category term="日本語"/><category term="振り仮名"/><category term="ふりがな"/><category term="annotation"/><category term="blog"/><category term="jekyll"/><category term="meta"/><summary type="html"><![CDATA[Styling _kanji_ readings is a big subject for such small text.]]></summary></entry><entry><title type="html">AppleScript Records: Strings as Keys</title><link href="https://www.paulfioravanti.com/blog/applescript-records-string-keys/" rel="alternate" type="text/html" title="AppleScript Records: Strings as Keys"/><published>2022-06-10T14:30:00+10:00</published><updated>2022-06-14T10:15:00+10:00</updated><id>https://www.paulfioravanti.com/blog/applescript-records-string-keys</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/applescript-records-string-keys/"><![CDATA[<p>I am a <a href="https://en.wikipedia.org/wiki/MacOS">macOS</a> user, and my attempts at creating programs to control my computer have necessitated working with <a href="https://en.wikipedia.org/wiki/AppleScript">AppleScript</a>. Like every programming language, it has its idiosyncrasies, but one in particular sent me down a <a href="https://en.wiktionary.org/wiki/rabbit_hole">rabbit hole</a>, which I hope this post can help you avoid should you find yourself in similar circumstances.</p> <p>Many programming languages have a built-in <a href="https://en.wikipedia.org/wiki/Key%E2%80%93value_database">key-value</a> data structure, which are known by different names: <a href="https://ruby-doc.org/core/Hash.html">hashes</a>, <a href="https://hexdocs.pm/elixir/Map.html">maps</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">objects</a>, <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a> etc. The AppleScript structure equivalent is called a <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_classes.html#//apple_ref/doc/uid/TP40000983-CH1g-BBCDGEAH">record</a>, and they look outwardly similar to those of other languages:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nv">product</span><span class="p">:</span><span class="s2">"pen"</span><span class="p">,</span><span class="w"> </span><span class="nv">price</span><span class="p">:</span><span class="mf">2.34</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>However, a big difference is that while many other languages will allow you to use any kind of data type as a key (<a href="https://en.wikipedia.org/wiki/String_(computer_science)">strings</a>, <a href="https://en.wikipedia.org/wiki/Integer">integers</a> etc), record keys can only be <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_fundamentals.html#//apple_ref/doc/uid/TP40000983-CH218-SW5">Properties</a>, which are <a href="http://books.gigatux.nl/mirror/applescriptdefinitiveguide/applescpttdg2-CHP-13-SECT-11.html">“effectively tokens created by AppleScript at compile time”</a>, and essentially act like <a href="https://en.wikipedia.org/wiki/Constant_(computer_programming)">constants</a> (which also means there’s no chance to, say, “<a href="https://api.rubyonrails.org/classes/String.html#method-i-constantize">constantize</a>” a string received at run time). Therefore, this kind of record is not legal:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="s2">"product"</span><span class="p">:</span><span class="s2">"pen"</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">:</span><span class="mf">2.34</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>The result of this is that a script must always know in advance what keys it plans to use to look up values in a record: no lookup is possible using, say, some variable that references a string.</p> <p>This is unfortunate, because I wanted to perform dynamic lookups on a record by fetching values from it based on some string I would receive from the result of a <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH">handler</a> (function) call. Here is a code snippet indicating what I <em>attempted</em> to write in order to perform a “zoom in”, which would send different shortcut keystrokes depending on what application was currently in focus:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Chrome Zoom In keyboard shortcut is ⌘+, while Postman is ⌘=</span><span class="w">
</span><span class="c1"># NOTE: This record will raise a syntax error.</span><span class="w">
</span><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="s2">"Google Chrome"</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Postman"</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">
</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="c1"># returns a string like "Google Chrome" for the application currently in focus</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="c1"># Fetch the appropriate "zoom in" value from the record based on the `activeApp` key</span><span class="w">
</span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w">

</span><span class="c1"># Perform the keyboard shortcut</span><span class="w">
</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span></code></pre></div></div> <p>I initially thought that perhaps the reason for the error was because the record key properties follow the rules of <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_lexical_conventions.html#//apple_ref/doc/uid/TP40000983-CH214-SW4">Identifiers</a>, which have a limited set of characters they are allowed to use (that do not include spaces). But…</p> <blockquote> <p>“AppleScript provides a loophole […]: identifiers whose first and last characters are vertical bars (|) can contain any characters”.</p> </blockquote> <p>So, I figured that changing the record definition to:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">|</span><span class="nv">Google</span><span class="w"> </span><span class="nv">Chrome</span><span class="err">|</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="err">|</span><span class="nv">Postman</span><span class="err">|</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>or</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">|</span><span class="s2">"Google Chrome"</span><span class="err">|</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="err">|</span><span class="s2">"Postman"</span><span class="err">|</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>would work. Alas, they did not. The workaround for getting this code running correctly was to fall back to a traditional <code class="language-plaintext highlighter-rouge">if</code> statement:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">

</span><span class="k">if</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="s2">"Google Chrome"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="s2">"+"</span><span class="w">
</span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="s2">"Postman"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="s2">"="</span><span class="w">
</span><span class="k">else</span><span class="w">
  </span><span class="nb">display</span><span class="w"> </span><span class="nv">notification</span><span class="w"> </span><span class="s2">"Cannot zoom in"</span><span class="w"> </span><span class="nv">with</span><span class="w"> </span><span class="na">title</span><span class="w"> </span><span class="s2">"Error"</span><span class="w">
  </span><span class="nb">return</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">if</span><span class="w">

</span><span class="c1"># Perform the keyboard shortcut</span><span class="w">
</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span></code></pre></div></div> <p>At this point, the sane thing to do is to accept that you now have working code that is fit for purpose, and move on.</p> <p>But, I could not shake the feeling that there <em>must</em> be a way for string keys to work, even though hours of internet searching turned up nothing. How could every other programming language I know of do this, but not AppleScript? It did not make sense to me.</p> <p>So, I asked the <a href="https://twitter.com">bird site</a> in a <a href="https://twitter.com/paulfioravanti/status/1517743540784168960?s=20&amp;t=ai1eJAVRQpkoQ2bwoL8W0Q">last ditch attempt</a>, and it delivered in the form of <a href="http://piyocast.com/as/">Takaaki Naganoya</a>, whose efforts in creating a <a href="https://twitter.com/Piyomaru/status/1517769013488918528">solution</a> using the <a href="https://developer.apple.com/documentation/foundation">Foundation</a> framework led me to be able to change the original code to:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">use</span><span class="w"> </span><span class="nb">AppleScript</span><span class="w"> </span><span class="nb">version</span><span class="w"> </span><span class="s2">"2.4"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">framework</span><span class="w"> </span><span class="s2">"Foundation"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">scripting</span><span class="w"> </span><span class="nv">additions</span><span class="w">

</span><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">|</span><span class="nv">Google</span><span class="w"> </span><span class="nv">Chrome</span><span class="err">|</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="err">|</span><span class="nv">Postman</span><span class="err">|</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">

</span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKeysDict</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="se">¬
</span><span class="w">    </span><span class="nb">current application</span>'s <span class="nv">NSDictionary</span>'s <span class="nv">dictionaryWithDictionary</span><span class="p">:</span><span class="nv">zoomInKeys</span><span class="w">

</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">

</span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="p">(</span><span class="nv">zoomInKeysDict</span>'s <span class="nv">valueForKey</span><span class="p">:</span><span class="nv">activeApp</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nv">anything</span><span class="w">

</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span></code></pre></div></div> <p>Now, this code <em>works</em>. But, the <a href="https://en.wiktionary.org/wiki/shotgun_approach">shotgun approach</a> of bringing in a whole framework and other random handlers just to solve this small problem, coupled with the awkward readability of some of the <a href="https://en.wikipedia.org/wiki/API">API</a>s (looking at you, <code class="language-plaintext highlighter-rouge">dictionaryWithDictionary</code>), means that I think the code is now more difficult to understand, for very negligible benefit. So, <code class="language-plaintext highlighter-rouge">if</code> statements it is.</p> <p>If I wanted to dive even further down the rabbit hole, I could have attempted adapting Takaaki’s <a href="https://twitter.com/Piyomaru/status/1517770289597513730">other solution</a> to the same problem, which was done in vanilla AppleScript, without using Foundation. But, at this point, I think I’m good.</p> <p>If you are interested in seeing how I ended up using AppleScript for my own use case of mapping <a href="https://en.wikipedia.org/wiki/Stenotype">stenography</a> chords to macOS keyboard shortcuts, check out my <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/src/command">steno dictionaries GitHub repository</a>.</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="hash"/><category term="dictionary"/><category term="apple"/><category term="scripting"/><summary type="html"><![CDATA[Not as straightforward as you may think.]]></summary></entry><entry><title type="html">Steno Gaming: Doom Typist</title><link href="https://www.paulfioravanti.com/blog/steno-gaming-doom-typist/" rel="alternate" type="text/html" title="Steno Gaming: Doom Typist"/><published>2022-06-07T22:41:00+10:00</published><updated>2023-11-17T19:51:00+11:00</updated><id>https://www.paulfioravanti.com/blog/steno-gaming-doom-typist</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/steno-gaming-doom-typist/"><![CDATA[<p>Playing games is a great way to get better at <a href="https://en.wikipedia.org/wiki/Touch_typing">touch typing</a> with a <a href="https://en.wikipedia.org/wiki/QWERTY">standard keyboard</a>.</p> <p>A quick web search for typing games will likely net you results including <a href="https://en.wikipedia.org/wiki/Mavis_Beacon_Teaches_Typing">Mavis Beacon</a> mini-games, web-based shooters like <a href="https://zty.pe/">ZType</a>, and thoughtful adventure games like <a href="https://en.wikipedia.org/wiki/Epistory_-_Typing_Chronicles">Epistory - Typing Chronicles</a>. <a href="https://en.wikipedia.org/wiki/Stenotype">Stenography</a> enthusiasts have some extra options, with games specifically developed for them, like the free-to-play <a href="http://qwertysteno.com/Games/CargoCrisis.php">Cargo Crisis</a> and <a href="http://www.foralltoplay.com/games/steno-arcade/index.php">Steno Arcade</a>.</p> <p>Probably one of the most quirky typing games around is the on-rails shooter <a href="https://en.wikipedia.org/wiki/The_Typing_of_the_Dead">The Typing of the Dead</a>, an official <a href="https://en.wikipedia.org/wiki/Video_game_modding">mod</a> of <a href="https://en.wikipedia.org/wiki/The_House_of_the_Dead">The House of the Dead</a>. Alas, I do not have an old enough computer to play it at home, nor a <a href="https://en.wikipedia.org/wiki/Microsoft_Windows">Windows</a> machine to attempt its modern sequel, <a href="https://en.wikipedia.org/wiki/The_House_of_the_Dead:_Overkill">The Typing of the Dead: Overkill</a>. So, I will have to <a href="https://dictionary.cambridge.org/dictionary/english/take-a-rain-check-on-sth">take a rain check</a> on chording through those particular zombie swarms, but are there any similar alternatives?</p> <p>There most certainly are. Modders have gifted us with what I think is currently the best typing game of them all: <a href="https://github.com/mmaulwurff/typist.pk3">Typist.pk3</a><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, a “mod for <a href="https://en.wikipedia.org/wiki/Doom_(1993_video_game)">Doom</a> [1993] engine games that turns them into typing exercises”. “Doom engine games” are ones that can run inside a Doom <a href="https://zdoom.org/wiki/Source_port">source port</a> like <a href="https://zdoom.org/wiki/GZDoom">GZDoom</a> (eg Doom, <a href="https://en.wikipedia.org/wiki/Doom_II">Doom II</a>, <a href="https://en.wikipedia.org/wiki/Heretic_(video_game)">Heretic</a>, <a href="https://en.wikipedia.org/wiki/Hexen:_Beyond_Heretic">Hexen</a>, and <a href="https://doom.fandom.com/wiki/List_of_notable_WADs">others</a>).</p> <p>Here are some videos of me doing some off-rails shooting with Doom Typist using a <a href="https://www.gboards.ca/product/georgi">Georgi</a> stenographic keyboard.</p> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/a8Kp5s-jw5k" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Doom Typist - Episode 2 Map 1 (<a href="https://www.youtube.com/watch?v=a8Kp5s-jw5k&amp;list=PLNN5NpKrqwAM6zF_-hoJwaQYZs6qflv4T&amp;index=4">Full playlist</a>) </figcaption> </div> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/fxxDAYuciD8" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Doom Typist - Episode 1 Full Playthrough (Long) </figcaption> </div> <p>Want to give it a try yourself? Read on!</p> <p>If you are a <a href="https://en.wikipedia.org/wiki/QWERTY">QWERTY</a> typist, you will not have to worry about any steno-keyboard-related technical details below. You can just:</p> <ul> <li><a href="https://zdoom.org/downloads">Install GZDoom</a></li> <li>Buy a copy of Doom (<a href="https://www.gog.com/en/game/the_ultimate_doom">GOG.com</a> [<a href="https://en.wikipedia.org/wiki/Microsoft_Windows">Windows</a>, but with options to use with other platforms], <a href="https://store.steampowered.com/app/2280/Ultimate_Doom/">Steam</a> [Windows only])</li> <li><a href="https://zdoom.org/wiki/Installation_and_execution_of_ZDoom">Follow the instructions</a> to get Doom up and running with GZDoom, including extracting the <a href="https://doomwiki.org/wiki/WAD">WAD</a> game file from your copy of Doom</li> <li><a href="https://github.com/mmaulwurff/typist.pk3/releases">Download the latest Typist release</a>, and load it with GZDoom</li> <li>Bail out from the rest of this post, and enjoy your new typing game!</li> </ul> <blockquote> <p>The previous two blog posts to this one were both specifically written in service to, and as background context for, this post (though they are also meant to stand on their own):</p> <ul> <li><em><a href="https://www.paulfioravanti.com/blog/classic-doom-mac/">Play Classic Doom on a Mac</a></em></li> <li><em><a href="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/">Flashing Georgi Firmware</a></em></li> </ul> <p>Hopefully, you will find the answers to any specific questions this post does not answer in either one of them.</p> </blockquote> <hr/> <p>Still here? Okay, so I would wager that you are probably a <a href="https://www.openstenoproject.org/plover/">Plover</a> steno enthusiast, and maybe also a Georgi user. You may have noticed a fair bit of non-standard keystroke <a href="https://dictionary.cambridge.org/dictionary/english/shenanigans">shenanigans</a> going on in the video. Do not fret, though: although we will be getting technical (ie editing <a href="https://en.wikipedia.org/wiki/Firmware">firmware</a>), all customisations will be revealed so that you, too, can chord your way through Doom smoother than <a href="https://doom.fandom.com/wiki/Chainsaw">chainsaw</a>-ing through an <a href="https://doom.fandom.com/wiki/Imp">imp</a>!</p> <p>So, prepare your <a href="https://evildead.fandom.com/wiki/Boomstick">boomstick</a> and let’s begin!</p> <div class="centered-image" style="width: 75%"> <figure> <img src="/assets/images/2022-06-07/follow_your_dreams_by_azakachi_rd_17_d6of6bm.jpg" alt="Doom: Follow Your Dreams"/> <figcaption> Art by <a href="https://www.deviantart.com/azakachi-rd-17"> AzakaChi-RD-17 </a> on <a href="https://www.deviantart.com/azakachi-rd-17/art/Follow-your-dreams-403815874"> Deviant Art </a> </figcaption> </figure> </div> <h2 id="between-two-worlds">Between Two Worlds</h2> <p>A steno gamer cannot game in steno mode alone. Open up Doom, and you can navigate the menus using your arrow key chords, but when you start the game, you will likely find your <a href="https://en.wikipedia.org/wiki/Player_character">player character</a> unable to move, regardless of what keys you press. This is because:</p> <ul> <li>“Plover’s text and formatting strokes <a href="https://github.com/openstenoproject/plover/wiki/Dictionary-Format#keyboard-shortcuts">can’t send arbitrary key strokes</a>”, which means Plover cannot “press”, say, arrow keys or the Return key, in the same way as a QWERTY keyboard does: it only <em>simulates</em> the key presses. Unfortunately, GZDoom does not seem to recognise these “simulated key presses” during gameplay<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></li> <li>Stenotype is not really optimised for sending the <a href="https://en.wikipedia.org/wiki/Arrow_keys#WASD_keys">WASD</a>-style repeating key presses needed for movement in games<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup></li> </ul> <p>But! Lucky for Georgi owners, <a href="https://github.com/qmk/qmk_firmware/tree/master/keyboards/gboards/georgi">its firmware</a> has a <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#entering-qmk-gaming-mode">Gaming mode</a> that “acts like a traditional [QWERTY] keyboard, as opposed to stenotype”, enabling <em>real</em> keystrokes and key repetition (Georgi’s <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#modes">QWERTY mode</a> [not the same as Gaming mode] acts like stenotype, so we cannot game with it).</p> <p>For playing Doom Typist with steno on a Georgi, this means you can:</p> <ul> <li>Use Gaming Mode when you are in <span style="color: blue">Exploration Mode</span> (walking around, opening doors, flipping switches) <img src="/assets/images/2022-06-07/exploration-mode.jpg" alt="Exploration Mode" title="Exploration Mode" width="12%"/></li> <li>Use Steno Mode when you are in <span style="color: red">Combat Mode</span> (typing answers to hit your targets, dashing) <img src="/assets/images/2022-06-07/combat-mode.jpg" alt="Combat Mode" title="Combat Mode" width="30%"/></li> </ul> <p>I have found some of the challenges around having one foot in steno-land, and the other in standard-keyboard-land, within a high-tension environment that requires quick reflexes to be:</p> <ul> <li>remembering which typing mode you are in: Steno or Gaming (unlike the <span style="color: blue">Exploration</span>/<span style="color: red">Combat </span>game mode colour difference, there is no visual cue for your current typing mode<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>)</li> <li>remembering to <em>actually</em> change from Gaming to Steno mode when the game automatically switches you from <span style="color: blue">Exploration</span> to <span style="color: red">Combat</span> Mode upon encountering an enemy</li> <li>remembering to dash away when sudden close encounters with enemies occur (and which typing mode allows that)</li> </ul> <p>The customisations I made to my Georgi layout, in both Steno and Gaming layers, and the way I set up my player control scheme, helped at least part way in overcoming these challenges (getting the full way will probably just require continued practice to <a href="https://en.wiktionary.org/wiki/git_gud">git gud</a>).</p> <p>So, here’s the full list of everything I have done so far to make playing Doom steno-able.</p> <blockquote> <p>You can find the code encompassing all of the changes explained in detail below in my <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">Georgi QMK keymaps GitHub repository</a>.</p> </blockquote> <h2 id="controls">Controls</h2> <p>Setting up controls for Doom Typist was a more involved matter than I originally planned for.</p> <p>GZDoom, the Doom source port, plays more than just Doom itself: it provides a very robust selection of <a href="https://zdoom.org/wiki/Customize_controls">control mappings</a> that can be used across a variety of games. Mapping them all to Georgi keymaps is not a task I want to undertake right now, so I used Doom’s original instruction booklet to help filter down all the options to the ones that high-school me would have actually used during gameplay.</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/doom-manual-controls.jpg" alt="Doom Manual Controls"/> <figcaption> Commands and Shortcuts section from the original <a href="https://www.starehry.eu/download/action3d/docs/Doom-Manual.pdf"> Doom Manual </a> </figcaption> </figure> </div> <p>All of pink-outlined controls above will need to be mapped in Georgi’s Gaming mode. I do not intend to make one-to-one mappings of the keys to their literal equivalents in the Gaming mode keymaps, but rather focus on what form of key patterns would feel intuitive and comfortable for the controls.</p> <p>This will all be very subjective, so hopefully they can serve as a template for you to create your own custom control schemes if you have other ideas.</p> <blockquote> <p>You can see what the literal Gaming Mode keys look like in the <a href="https://github.com/qmk/qmk_firmware/blob/89a5d5aea095172c23b6e886217078ffe404ecec/keyboards/gboards/georgi/keymaps/default/keymap.c#L233">Georgi default Gaming keymaps</a>, and compare them to <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/4881b7ace9403a9fbdf0ece09a18f0916c4a8a01/keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c#L418">my personal ones</a>). The literal <code class="language-plaintext highlighter-rouge">KC_*</code> keycodes you will see referenced from here on in code examples are based on my personal keymaps.</p> </blockquote> <h3 id="movement-and-actions">Movement and Actions</h3> <p>The way I configured movement is based on <a href="https://en.wikipedia.org/wiki/Arrow_keys#ESDF_keys">ESDF keys</a> on the left side, and <a href="https://en.wikipedia.org/wiki/Vi">Vi</a>-style <a href="https://en.wikipedia.org/wiki/Arrow_keys#HJKL_keys">HJKL keys</a> on the right.</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/movement-controls.png" alt="Doom Georgi Movement Controls"/> </figure> </div> <p>Unlike Heretic or Hexen, Doom does not have the concept of “look up/down” (though many of its mods do…), so the two keys between Look Left and Look Right remain blank until I play a game that uses them. Firing weapons, opening doors and toggling switches (“Use”), and Toggle Automap all felt like thumb cluster keys, so that is where they reside. As for “running” and “fast turning”, I decided to combine them all together into a “Toggle Run” chord deliberately meant to be a complex enough set of keys that I would not inadvertently press by mistake.</p> <p>Those keys get mapped in-game on the Customize Action Controls screen:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/customize-action-controls.jpg" alt="GZDoom Customize Action Controls"/> <figcaption> Stripped down action controls </figcaption> </figure> </div> <p>The Toggle Run chord is implemented as a <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/feature_combo.md">QMK Combo</a>, since it is a non-steno chord for standard keyboards that lives in the Gaming mode layer, and is hence outside of Plover’s purview. Defining combos consists of the following three main steps:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// STEP 1: Give the combos names.</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
  <span class="c1">// ...</span>
  <span class="n">DOOM_TYPIST_TOGGLE_RUN</span>
<span class="p">};</span>

<span class="c1">// STEP 2: Define the set of keys for the combos.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_toggle_run_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_U</span><span class="p">,</span> <span class="n">KC_I</span><span class="p">,</span> <span class="n">KC_O</span><span class="p">,</span> <span class="n">KC_P</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="c1">// STEP 3: Define what keystroke the combos should send,</span>
<span class="c1">// and register them in `key_combos`.</span>
<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_TOGGLE_RUN</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_toggle_run_combo</span><span class="p">,</span> <span class="n">KC_TAB</span><span class="p">)</span>
<span class="p">};</span>
</code></pre></div></div> <blockquote> <p>In <em><a href="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/">Flashing Georgi Firmware</a></em>, I go into more detail about <a href="https://qmk.fm/">QMK</a> Combos for Georgi. Even more detail than that can be found in <em><a href="https://www.paulfioravanti.com/blog/chording-qwerty-qmk-combos/">Chording QWERTY with QMK Combos</a></em>.</p> </blockquote> <p>For <em>every</em> combo change, you <em>must</em> change the <code class="language-plaintext highlighter-rouge">COMBO_COUNT</code> counter in your <code class="language-plaintext highlighter-rouge">config.h</code> file to match the number of combos in <code class="language-plaintext highlighter-rouge">key_combos</code>, otherwise you will get compilation errors. For my configuration, this looks like:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/config.h</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
<span class="cp">#define COMBO_COUNT 44
</span></code></pre></div></div> <p>We will see where all those other combos came from very soon.</p> <h3 id="weapon-selection">Weapon Selection</h3> <p>Each weapon in Doom is assigned a number, so I wanted to be able to use the steno number chords for 0-9 to select them, even in Gaming mode.</p> <div class="centered-image" style="width: 70%"> <figure> <img src="/assets/images/2022-06-07/georgi-numbers-small-looping.gif" alt="Georgi Numbers 0-9"/> <figcaption> Steno number chords for 0-9 using the <kbr>#</kbr> modifier key </figcaption> </figure> </div> <blockquote> <p>See <em><a href="https://www.paulfioravanti.com/blog/steno-numbers-georgi/">Stenography Numbers on a Georgi</a></em> for more information about number chords.</p> </blockquote> <p>In the <a href="https://github.com/qmk/qmk_firmware/blob/89a5d5aea095172c23b6e886217078ffe404ecec/keyboards/gboards/georgi/keymaps/default/keymap.c#L233">Georgi default Gaming keymaps</a>, number keystrokes live in Gaming Layer 2. To get from Gaming Layer 1 (<code class="language-plaintext highlighter-rouge">GAMING</code>) to Gaming Layer 2 (<code class="language-plaintext highlighter-rouge">GAMING_2</code>), the layout has a key that uses the QMK <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#switching-and-toggling-layers-idswitching-and-toggling-layers"><code class="language-plaintext highlighter-rouge">LT(layer, kc)</code></a> function, which “momentarily activates <code class="language-plaintext highlighter-rouge">layer</code> when held, and sends <code class="language-plaintext highlighter-rouge">kc</code> when tapped”. In order to mimic steno number functionality, I assigned keystrokes that call that function to the keys that are assigned to the number keys (<code class="language-plaintext highlighter-rouge">#</code>) on Georgi’s steno layer:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/number-chords.png" alt="Momentarily active Gaming Layer 2 to access number keys"/> </figure> </div> <p>For <code class="language-plaintext highlighter-rouge">GAMING_2</code> access to numbers, we do not need to care too much about the <code class="language-plaintext highlighter-rouge">kc</code> for number access (feel free to assign any key to this: I used left and right brackets, <code class="language-plaintext highlighter-rouge">LT(GAMING_2, KC_LBRC)</code> and <code class="language-plaintext highlighter-rouge">LT(GAMING_2, KC_RBRC)</code>, quite arbitrarily in <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/2f78c94dfb233f4b11e51403826265cdfdaaec88/keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c#L566">my keymaps</a>).</p> <p>Here’s what the image above looks like in layer code (non-number-related keycodes are “commented out” with <code class="language-plaintext highlighter-rouge">/**/</code>):</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">keymaps</span><span class="p">[][</span><span class="n">MATRIX_ROWS</span><span class="p">][</span><span class="n">MATRIX_COLS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">GAMING</span><span class="p">]</span> <span class="o">=</span> <span class="n">LAYOUT_georgi</span><span class="p">(</span>
        <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span>
        <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span>
         <span class="n">LT</span><span class="p">(</span><span class="n">GAMING_2</span><span class="p">,</span> <span class="n">KC_LBRC</span><span class="p">),</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="n">LT</span><span class="p">(</span><span class="n">GAMING_2</span><span class="p">,</span> <span class="n">KC_RBRC</span><span class="p">)</span>
    <span class="p">),</span>
    <span class="p">[</span><span class="n">GAMING_2</span><span class="p">]</span> <span class="o">=</span> <span class="n">LAYOUT_georgi</span><span class="p">(</span>
        <span class="cm">/**/</span><span class="p">,</span> <span class="n">KC_1</span><span class="p">,</span> <span class="n">KC_2</span><span class="p">,</span> <span class="n">KC_3</span><span class="p">,</span> <span class="n">KC_4</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="n">KC_6</span><span class="p">,</span> <span class="n">KC_7</span><span class="p">,</span> <span class="n">KC_8</span><span class="p">,</span> <span class="n">KC_9</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span>
        <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span>
                          <span class="cm">/**/</span><span class="p">,</span> <span class="n">KC_5</span><span class="p">,</span> <span class="n">KC_0</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span>
    <span class="p">)</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="automap">Automap</h3> <p>For Automap-related controls, rather than create specific QMK combos to mirror stenographic words that describe their meaning (ie outlines for “follow”, “mark” etc), I decided instead to re-create the entire steno <a href="https://www.artofchording.com/sounds/fingerspelling.html">fingerspelling</a> alphabet as combos, and leave the controls as their default single-letter values.</p> <p>The steps for creating the combos are the same as before; the general idea can be gleaned from the abbreviated configuration below, but the entire list can be found in <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">my Georgi keymaps</a>:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// STEP 1: Give the combos names.</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
    <span class="n">STENO_A</span><span class="p">,</span>
    <span class="c1">// ...</span>
    <span class="n">STENO_Z</span>
<span class="p">}</span>

<span class="c1">// STEP 2: Define the set of keys for the combos.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_a_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_BACKSPACE</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// ...</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_z_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_A</span><span class="p">,</span> <span class="n">KC_W</span><span class="p">,</span> <span class="n">KC_S</span><span class="p">,</span> <span class="n">KC_E</span><span class="p">,</span> <span class="n">KC_D</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="c1">// STEP 3: Define what keystroke the combos should send,</span>
<span class="c1">// and register them in `key_combos`.</span>
<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">STENO_A</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">steno_a_combo</span><span class="p">,</span> <span class="n">KC_A</span><span class="p">),</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">STENO_Z</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">steno_z_combo</span><span class="p">,</span> <span class="n">KC_Z</span><span class="p">),</span>
<span class="p">};</span>
</code></pre></div></div> <p>A big block of new chord config rarely goes 100% smooth, of course: there were a few fingerspelling combos whose chords conflicted with the Doom movement controls. Hence, I ended up adding an equivalent steno <code class="language-plaintext highlighter-rouge">-Z</code> key (for my keymaps, this ended up being <code class="language-plaintext highlighter-rouge">KC_QUOTE</code>) at the end of the fingerspelling chords for <code class="language-plaintext highlighter-rouge">K</code>, <code class="language-plaintext highlighter-rouge">P</code>, <code class="language-plaintext highlighter-rouge">R</code>, and <code class="language-plaintext highlighter-rouge">W</code> to disambiguate them:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// NOTE: KC_QUOTE/-Z needed to allow strafing left and turning left simultaneously</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_k_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_S</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">KC_QUOTE</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// NOTE: KC_QUOTE/-Z needed to allow moving forward and turning left simultaneously</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_p_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_E</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">KC_QUOTE</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// NOTE: KC_QUOTE/-Z needed to allow strafing right and turning left simultaneously</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_r_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_F</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">KC_QUOTE</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// KC_QUOTE/-Z needed to allow moving backward and turning left simultaneously</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_w_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_D</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">KC_QUOTE</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="typist-controls">Typist Controls</h3> <p>Now that we have the controls of Doom itself configured for Gaming Mode, it is time to shift our focus over to adapting the <a href="https://github.com/mmaulwurff/typist.pk3#how-to-play">Typist.pk3 controls</a>.</p> <div class="centered-image" style="width: 80%"> <figure> <img src="/assets/images/2022-06-07/typist-controls.jpg" alt="Typist.pk3 configurable controls"/> <figcaption> </figcaption> </figure> </div> <p>Since all the “typing” in <span style="color: red">Combat Mode</span> will actually be done with steno chords, I created a new <a href="https://github.com/paulfioravanti/steno-dictionaries/blob/b670b12696b656488a8850a490884b9337884ceb/dictionaries/gaming/gaming-doom-typist.json">Doom-Typist-specific dictionary</a> in <a href="https://github.com/paulfioravanti/steno-dictionaries/">my steno dictionaries</a>, encompassing controls that can be configured in-game, as well as those that cannot:</p> <p><strong><code class="language-plaintext highlighter-rouge">dictionaries/gaming/gaming-doom-typist.json</code></strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"A*UPL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:return to AUto Mode}{:KEY_COMBO:CONTROL_L}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"K-RBGS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:dash left}{:ATTACH:/dl}{:KEY_COMBO:RETURN}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"KHRAUL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:CLear ALL}{:KEY_COMBO:CONTROL_L(BACKSPACE)}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"KPWA*T"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:force COMBAT}{:KEY_COMBO:GRAVE}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"P-RBGS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:dash forward}{:ATTACH:/df}{:KEY_COMBO:RETURN}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"R-RBGS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:dash right}{:ATTACH:/dr}{:KEY_COMBO:RETURN}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"SPHRO*R"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:force EXPLORE}{:KEY_COMBO:ESCAPE}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"W-RBGS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:dash backward}{:ATTACH:/db}{:KEY_COMBO:RETURN}"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <blockquote> <p>The inline comment (<code class="language-plaintext highlighter-rouge">CMT</code>) syntax is from the <a href="https://github.com/user202729/plover-comment">plover-comment</a> Plover plugin, which I use to help provide outlines with metadata, particularly around how I pronounce outlines in my head, how I should remember them, or just what they are supposed to mean. The <code class="language-plaintext highlighter-rouge">ATTACH</code> and <code class="language-plaintext highlighter-rouge">KEY_COMBO</code> syntax are Plover’s <a href="https://github.com/openstenoproject/plover/wiki/Dictionary-Format#friendly-command-names">friendly command names</a>.</p> </blockquote> <p>The non-dash outlines are all (somewhat) <a href="https://en.wikipedia.org/wiki/Phonetics">phonetic</a>, while dash outlines re-use the <a href="https://en.wikipedia.org/wiki/Arrow_keys#ESDF_keys">ESDF</a>-style keys for dashing direction, along with a <code class="language-plaintext highlighter-rouge">-RBGS</code> “dash chord”:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/dash-chords.png" alt="Doom Typist 'dash chords'"/> </figure> </div> <p>Although dashing around in steno mode is all good and well, there came many times where I would, say, move up to a door in Gaming mode, open it, and immediately encounter an enemy. The surprise of this would make me forget that I was in Gaming mode, and I would attempt to dash away, forgetting that I was not yet in steno mode, where all the dashing chords were configured.</p> <p>I wanted to be able to instantly dash away to put some distance between me and the enemy, to compose myself and remember to switch to Steno mode. So, you guessed it, it’s combo time again to mirror all the dictionary entries above in Gaming mode (noticing a pattern yet?):</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// STEP 1: Create some custom keycodes</span>
<span class="k">enum</span> <span class="n">custom_keycodes</span> <span class="p">{</span>
  <span class="n">DASH</span> <span class="o">=</span> <span class="n">SAFE_RANGE</span><span class="p">,</span>
  <span class="n">DASH_BACKWARD</span><span class="p">,</span>
  <span class="n">DASH_FORWARD</span><span class="p">,</span>
  <span class="n">DASH_LEFT</span><span class="p">,</span>
  <span class="n">DASH_RIGHT</span>
<span class="p">};</span>

<span class="c1">// STEP 2: Give the combos names.</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="n">DOOM_TYPIST_DASH</span><span class="p">,</span>
    <span class="n">DOOM_TYPIST_DASH_BACKWARD</span><span class="p">,</span>
    <span class="n">DOOM_TYPIST_DASH_FORWARD</span><span class="p">,</span>
    <span class="n">DOOM_TYPIST_DASH_LEFT</span><span class="p">,</span>
    <span class="n">DOOM_TYPIST_DASH_RIGHT</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// STEP 3: Define the set of keys for the combos.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// Mirrors "W-RBGS": "{:CMT:dash backward}{:ATTACH:/db}{:KEY_COMBO:RETURN}"</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_backward_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_D</span><span class="p">,</span> <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// Mirrors "P-RBGS": "{:CMT:dash forward}{:ATTACH:/df}{:KEY_COMBO:RETURN}"</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_forward_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_E</span><span class="p">,</span> <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// Mirrors "K-RBGS": "{:CMT:dash left}{:ATTACH:/dl}{:KEY_COMBO:RETURN}"</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_left_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_S</span><span class="p">,</span> <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// Mirrors "R-RBGS": "{:CMT:dash right}{:ATTACH:/dr}{:KEY_COMBO:RETURN}"</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_right_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_F</span><span class="p">,</span> <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="c1">// STEP 4: Define what keystroke the combos should send,</span>
<span class="c1">// and register them in `key_combos`.</span>
<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_combo</span><span class="p">,</span> <span class="n">DASH</span><span class="p">),</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH_BACKWARD</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_backward_combo</span><span class="p">,</span> <span class="n">DASH_BACKWARD</span><span class="p">),</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH_FORWARD</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_forward_combo</span><span class="p">,</span> <span class="n">DASH_FORWARD</span><span class="p">),</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH_LEFT</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_left_combo</span><span class="p">,</span> <span class="n">DASH_LEFT</span><span class="p">),</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH_RIGHT</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_right_combo</span><span class="p">,</span> <span class="n">DASH_RIGHT</span><span class="p">),</span>
<span class="p">};</span>
</code></pre></div></div> <p>Assuming your eyes have not glazed over at seeing <em>yet another</em> set of combo configuration, you may have noticed a couple of peculiar things that prompted some questions:</p> <ul> <li>There are not any specific keycodes related to “dashing”, so some new <code class="language-plaintext highlighter-rouge">custom_keycodes</code> were created. The combos are configured to send these custom keycodes on activation. But, what do those keycodes mean? What will get sent?</li> <li>Why does just the “dash chord” get its own combo in isolation?</li> </ul> <blockquote> <p>In case you are wondering about <code class="language-plaintext highlighter-rouge">SAFE_RANGE</code> above, see <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#defining-a-new-keycode">Defining a New Keycode</a> in QMK’s documentation.</p> </blockquote> <p>We can define the handling for, and hence give meaning to, custom keycodes in the <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#programming-the-behavior-of-any-keycode-idprogramming-the-behavior-of-any-keycode"><code class="language-plaintext highlighter-rouge">process_record_user</code></a> function. For example, we want the <code class="language-plaintext highlighter-rouge">DASH_FORWARD</code> keycode to type in <code class="language-plaintext highlighter-rouge">/df</code> and then press enter, giving us an insta-dash forward when the combo is chorded:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bool</span> <span class="nf">process_record_user</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">keycode</span><span class="p">,</span> <span class="n">keyrecord_t</span> <span class="o">*</span><span class="n">record</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">keycode</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">case</span> <span class="n">DASH_FORWARD</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">record</span><span class="o">-&gt;</span><span class="n">event</span><span class="p">.</span><span class="n">pressed</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">SEND_STRING</span><span class="p">(</span><span class="s">"/df"</span> <span class="n">SS_TAP</span><span class="p">(</span><span class="n">X_ENTER</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div> <p>All the other dashing directions have similar handling in their <code class="language-plaintext highlighter-rouge">case</code> conditions, and you can find them all in <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">my Georgi keymaps</a>. Also, just by the way, custom keycodes never require any handling by QMK (they are custom to you after all), so we always <code class="language-plaintext highlighter-rouge">return false</code> at the end of their handling code.</p> <p>As for the “dash chord” combo, the reason it exists is that I wanted to be able to have a version of “partial chording”<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup> in Gaming mode, where I could keep the “dash chord” held down, and just press the direction keys in rapid succession to easily make quick getaways in any direction.</p> <p>This meant that the <code class="language-plaintext highlighter-rouge">process_record_user</code> function would need to keep track of whether we are <code class="language-plaintext highlighter-rouge">dashing</code> or not:</p> <ul> <li><code class="language-plaintext highlighter-rouge">true</code> if the “dash chord”, or any of the directional dash chords, are being pressed,</li> <li><code class="language-plaintext highlighter-rouge">false</code> if they are released</li> </ul> <p>Checking of the directional <a href="https://en.wikipedia.org/wiki/Arrow_keys#ESDF_keys">ESDF keys</a> in isolation would also need to be redefined to account for whether we are <code class="language-plaintext highlighter-rouge">dashing</code> or not and:</p> <ul> <li>if so, perform a directional dash</li> <li>if not, let QMK do its normal handling</li> </ul> <p>Here’s how that looks in keymap configuration for just dashing forward:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bool</span> <span class="nf">process_record_user</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">keycode</span><span class="p">,</span> <span class="n">keyrecord_t</span> <span class="o">*</span><span class="n">record</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">static</span> <span class="n">bool</span> <span class="n">dashing</span><span class="p">;</span>

    <span class="k">switch</span> <span class="p">(</span><span class="n">keycode</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">DASH</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">record</span><span class="o">-&gt;</span><span class="n">event</span><span class="p">.</span><span class="n">pressed</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">dashing</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">dashing</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="c1">// ...</span>
    <span class="k">case</span> <span class="n">DASH_FORWARD</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">record</span><span class="o">-&gt;</span><span class="n">event</span><span class="p">.</span><span class="n">pressed</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">SEND_STRING</span><span class="p">(</span><span class="s">"/df"</span> <span class="n">SS_TAP</span><span class="p">(</span><span class="n">X_ENTER</span><span class="p">));</span>
            <span class="n">dashing</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">dashing</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="c1">// ...</span>
    <span class="k">case</span> <span class="n">KC_E</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">record</span><span class="o">-&gt;</span><span class="n">event</span><span class="p">.</span><span class="n">pressed</span> <span class="o">&amp;&amp;</span> <span class="n">dashing</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">SEND_STRING</span><span class="p">(</span><span class="s">"/df"</span> <span class="n">SS_TAP</span><span class="p">(</span><span class="n">X_ENTER</span><span class="p">));</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div> <p>Similar configuration code for all the other dash direction keys and chords can be found in <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">my Georgi keymaps</a>.</p> <p>Okay. <em>Now</em> you are ready to play a bit of Doom, but there are just a couple more non-control-related quality-of-steno-gaming-life configuration changes that can be made.</p> <h2 id="layer-switching-chord-changes">Layer-Switching Chord Changes</h2> <p>In order to reduce the amount of fat-fingered mis-chording that seemed to happen to me while frantically attempting to toggle between moving around and shooting, I made a couple of changes to keymap-layer switching logic.</p> <h3 id="steno-mode---gaming-mode">Steno Mode &lt;-&gt; Gaming Mode</h3> <p>The default Georgi chord to change from Steno mode to Gaming mode looks like this:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/georgi-steno-layer-gaming-chord.png" alt="Enter Gaming Mode chord"/> <figcaption> <code>(PWR | FN | ST4 | ST3)</code> </figcaption> </figure> </div> <p>This is perfectly fine for normal steno use cases, if you are not planning on changing back and forth between the modes at rapid-fire speed. I found that I would frequently mis-chord it in the heat of battle, and desired a slightly simpler chord, which ended up being just the bottom half of the original one:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/georgi-simple-gaming-chord.png" alt="Simpler Steno/Gaming toggle chord"/> <figcaption> <code>(PWR | ST4)</code> </figcaption> </figure> </div> <p>The firmware edits required to make this happen necessitated small changes <a href="https://github.com/qmk/qmk_firmware/blob/f5d091a9d58c8349437e9d52de87294258cbd256/keyboards/gboards/georgi/sten.c#L97">directly to Georgi-specific stenography logic</a> (rather than user keymap logic, which is where most <a href="https://qmk.fm/">QMK</a> configuration takes place, and where all the configurations you have seen thus far have been made):</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/sten.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bool</span> <span class="nf">send_steno_chord_user</span><span class="p">(</span><span class="n">steno_mode_t</span> <span class="n">mode</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">chord</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="c1">// Handle Gaming Toggle,</span>
    <span class="c1">// Original cChord == (PWR | FN | ST4 | ST3)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cChord</span> <span class="o">==</span> <span class="p">(</span><span class="n">PWR</span> <span class="o">|</span> <span class="n">ST4</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">keymapsCount</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="n">layer_on</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <p>In the <em><a href="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/">Flashing Georgi Firmware</a></em> post, I go into significant detail about this particular change, as well as the mirroring QMK combo in the Gaming layer that returns back to Steno mode. For completeness’ sake though, here’s what that combo looks like:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// STEP 1: Give the combos names.</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="n">GOTO_STENO_LAYER</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// STEP 2: Define the set of keys for the combos.</span>
<span class="c1">// Mirrors the (PWR | ST4) chord used to switch to the gaming layer in `sten.c`.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">goto_steno_layer_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_LEFT_CTRL</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="c1">// STEP 3: Define what keystroke the combos should send,</span>
<span class="c1">// and register them in `key_combos`.</span>
<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">GOTO_STENO_LAYER</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">goto_steno_layer_combo</span><span class="p">,</span> <span class="n">TO</span><span class="p">(</span><span class="n">STENO_LAYER</span><span class="p">)),</span>
<span class="p">};</span>
</code></pre></div></div> <blockquote> <p><a href="https://github.com/qmk/qmk_firmware/blob/master/docs/keycodes.md#layer-switching-idlayer-switching"><code class="language-plaintext highlighter-rouge">TO(layer)</code></a> “turns on <code class="language-plaintext highlighter-rouge">layer</code> and turns off all other layers, except the default layer”</p> </blockquote> <h3 id="qwerty-mode">QWERTY Mode</h3> <p>When it came to switching from Steno to QWERTY mode, I had a similar, but opposite, problem. By default, simply pressing the <code class="language-plaintext highlighter-rouge">FN</code> key switches you to Georgi’s QWERTY mode, a “pseudo-layer” within the steno keymap layer:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/georgi-change-to-qwerty-mode.png" alt="Switch to QWERTY mode"/> </figure> </div> <p>I found that I would inadvertently press this button frequently when using the new Steno-Gaming mode chord defined above. I would think I was in Gaming mode, but was in fact in stenotype QWERTY mode, leaving me unable to move my character, and at the mercy of whatever enemy was attacking me.</p> <p>I needed to change the switch to QWERTY mode be a bit more <em>complex</em>: from a simple button press, to a less-likely-to-occur-by-accident chord. The easiest change seemed to be mirroring the Steno-Gaming chord:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/georgi-change-to-qwerty-mode-chord.png" alt="Switch to QWERTY mode chord"/> <figcaption> <code>(FN | ST3)</code> </figcaption> </figure> </div> <p>The firmware edits to do this were also in Georgi’s stenography logic:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/sten.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bool</span> <span class="nf">send_steno_chord_user</span><span class="p">(</span><span class="n">steno_mode_t</span> <span class="n">mode</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">chord</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="c1">// Original cChord == FN</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cChord</span> <span class="o">==</span> <span class="p">(</span><span class="n">FN</span> <span class="o">|</span> <span class="n">ST3</span><span class="p">))</span> <span class="p">{</span>
        <span class="p">(</span><span class="n">cMode</span> <span class="o">==</span> <span class="n">STENO</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="n">cMode</span> <span class="o">=</span> <span class="n">QWERTY</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="n">cMode</span> <span class="o">=</span> <span class="n">STENO</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <p>As of this writing, both of those Georgi-steno-logic-level changes have worked out well for me, but I have no doubt I will continue to fine-tune them.</p> <h2 id="next-stage">Next Stage</h2> <p>I have little doubt that my gaming-related steno configuration is going to be a permanent work-in-progress, so here are a few of the things on my mind to look at next, as of this writing.</p> <h3 id="hard-to-use">Hard to “Use”</h3> <p>It seems that it is impossible to open doors or toggle switches (ie use the “Use” functionality) in steno mode. This can be a bit annoying if you encounter multiple enemies immediately after opening a door because:</p> <ul> <li>you get auto-changed from <span style="color: blue">Exploration Mode</span> to <span style="color: red">Combat Mode</span>, so you have to change from Gaming mode to Steno mode quickly</li> <li>there usually isn’t enough time to defeat all the enemies before the door closes</li> <li>you have to switch back to Gaming mode <em>just</em> to re-open the door (since the “simulated” stenotype Enter keystrokes do not register), and <em>then</em> switch back to Steno mode again to resume combat</li> </ul> <p>The workaround to this problem is to remember to dash toward the enemy and away from the door, but I would like the option to not have to do that. So, I am thinking that having another input device would be handy: like a foot pedal (I have my eye on a <a href="https://www.elgato.com/en/stream-deck-pedal">Stream Deck Pedal</a>, unless there are compelling alternatives…), which can permanently send standard keystrokes (in this case the “Use” key), regardless of what mode the Georgi is in.</p> <h3 id="brutal-doom-typist">Brutal Doom Typist</h3> <p>It would seem that the most popular <a href="https://en.wikipedia.org/wiki/Video_game_modding">mod</a> for Doom is <a href="https://www.moddb.com/mods/brutal-doom">Brutal Doom</a>. GZDoom has the ability to load multiple WAD files at a time, so I was actually able to get Brutal Doom and Typist.pk3 to load together!</p> <div class="centered-image" style="width: 50%"> <figure> <img src="/assets/images/2022-06-07/gzdoom-multiple-wad-files.jpg" alt="GZDoom multiple WAD files"/> <figcaption> Multiple WAD files loaded: Typist.pk3, Brutal Doom itself, its new soundtrack, and its new sound effects. </figcaption> </figure> </div> <p>I have not played it much just yet, but if you are planning to give Brutal Doom Typist a shot, just remember to always play the game in “Purist” mode:</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-06-07/purist-mode.jpg" alt="Brutal Doom Purist mode"/> </figure> </div> <p>This is because Classic Doom does not have the concept of looking up and down, but Brutal Doom does. Unfortunately, it will not autoaim your typing shots at enemies in high places when you get put in <span style="color: red">Combat Mode</span>, leading to never being able to defeat them. In Purist (Oldschool Mode), you get the expected “autoaim”.</p> <p>Here’s a video of me attempting to play Brutal Doom Typist with a Georgi:</p> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/LyeWSzbBfhY" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Brutal Doom Typist - Episode 1 Map 1 </figcaption> </div> <h3 id="multiplayer-steno-dooming">Multiplayer Steno Dooming…?</h3> <p>After writing most of this post, I found out about <a href="https://zandronum.com/">Zandronum</a>, another Doom source port, which is “leading the way in newschool multiplayer Doom online”, and supports a “large number of ZDoom and GZDoom mods”.</p> <p>I have not tried it yet, but if it runs Typist.pk3, could this enable multiplayer Steno Doom Typist <a href="https://en.wikipedia.org/wiki/LAN_party">LAN parties</a>…? Would that even be fun…? If you end up getting Doom Typist set up yourself and you want to find out, reach out to me and let’s collaborate!</p> <p>For now, though, it’s time to break out my old grungy <a href="https://en.wikipedia.org/wiki/Flannel">flanelette shirts</a> and <a href="https://en.wikipedia.org/wiki/Reebok_Pump">Reebok Pumps</a>, and get Georgi back to hell to chord like it’s 1993! :musical_keyboard:</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://doom.fandom.com/wiki/PK3">PK3</a> being “an alternate extension for <a href="https://en.wikipedia.org/wiki/ZIP_(file_format)">ZIP</a> files” <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p>On macOS, I even tried using the <a href="https://github.com/user202729/plover_run_shell">Plover Run Shell</a> plugin with an <a href="https://www.openstenoproject.org/learn-plover/glossary">outline</a> that maps to an entry that runs a <a href="https://en.wikipedia.org/wiki/Shell_(computing)">shell</a> command that calls out to <a href="https://en.wikipedia.org/wiki/AppleScript">AppleScript</a> to trigger a Return keystroke:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="nl">"R*R"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:COMMAND:SHELL:osascript -e 'tell application </span><span class="se">\"</span><span class="s2">System Events</span><span class="se">\"</span><span class="s2"> to keystroke return'}"</span><span class="w">
</span></code></pre></div> </div> <p>and that <em>still</em> did not work with GZDoom during Doom gameplay. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3" role="doc-endnote"> <p>Even if you have already supercharged your steno firmware with <a href="https://github.com/JoshuaGrams">Joshua Grams</a>’ excellent <a href="https://github.com/JoshuaGrams/steno-firmware"><code class="language-plaintext highlighter-rouge">steno-firmware</code></a>, whose <code class="language-plaintext highlighter-rouge">STENO_REPEAT</code> functionality allows you to hold down chords to repeat them in quick succession, it will still not be enough. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4" role="doc-endnote"> <p>Typist.pk3 has no idea I’m playing using steno, and is likely not even expecting to receive anything but standard keystrokes from a user. So, naturally, there would not be the concept of any visual cues for that within the mod. I think if there was an <a href="https://en.wikipedia.org/wiki/Light-emitting_diode">LED</a> on the Georgi, or some kind of <a href="https://en.wikipedia.org/wiki/User_interface">UI</a> widget indicating current layer existed, that would be useful. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:5" role="doc-endnote"> <p>À la <code class="language-plaintext highlighter-rouge">STENO_1UP</code> functionality in <a href="https://github.com/JoshuaGrams">Joshua Grams</a>’ <a href="https://github.com/JoshuaGrams/steno-firmware"><code class="language-plaintext highlighter-rouge">steno-firmware</code></a>, which allows you to hold down common keys in between chords. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="retro-gaming"/><category term="georgi"/><category term="steno"/><category term="doom"/><category term="qmk"/><summary type="html"><![CDATA[Demon hordes are no match for steno chords!]]></summary></entry><entry><title type="html">Flashing Georgi Firmware</title><link href="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/" rel="alternate" type="text/html" title="Flashing Georgi Firmware"/><published>2022-05-18T16:00:00+10:00</published><updated>2022-05-19T08:20:00+10:00</updated><id>https://www.paulfioravanti.com/blog/flashing-georgi-firmware</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/"><![CDATA[<p>So, you have had your <a href="https://www.gboards.ca/product/georgi">Georgi</a> keyboard for a while, done lots of <a href="https://www.openstenoproject.org/plover/">Plover</a> <a href="https://en.wikipedia.org/wiki/Stenotype">stenography</a> practice, and are now thinking about making some changes to its keymap layout because you want it to do something that it currently does not.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-18/georgi.jpg" alt="Georgi keyboard"/> </figure> </div> <p>This will require you to generate some <a href="https://docs.qmk.fm/#/">Quantum Mechanical Keyboard (QMK)</a>-based <a href="https://en.wikipedia.org/wiki/Firmware">firmware</a> for the Georgi, and then <a href="https://en.wikipedia.org/wiki/Firmware#Flashing">flash</a> the device to overwrite the one that is currently there.</p> <blockquote> <p>See a previous blog post I wrote, <em><a href="https://www.paulfioravanti.com/blog/escape-defaults-control-keyboard-qmk/">Escape the defaults and Control your keyboard with QMK</a></em>, for more information about using QMK: some general, some more <a href="https://ergodox-ez.com/">Ergodox EZ</a>-focused.</p> </blockquote> <p>QMK has a <a href="https://config.qmk.fm/#">web-based configurator</a>, which enables you to create firmware files for a multitude of keyboards that QMK supports, without having to touch any <a href="https://en.wikipedia.org/wiki/C_(programming_language)">C</a> code. But, in the configurator<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>…</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/qmk-configurator.jpg" alt="QMK Configurator"/> </figure> </div> <ul> <li>Compilation of the <a href="https://config.qmk.fm/#/gboards/georgi/LAYOUT_georgi">Georgi layout</a> is not yet supported</li> <li><a href="https://docs.qmk.fm/#/feature_stenography?id=keycode-reference">Stenography keycodes</a> are not yet available to assign to keys</li> </ul> <p>If you still want to make any changes, steel yourself for hard mode, because we are going to have to get technical.</p> <p>Before we even think about firmware customisation, though, we will want to make sure that you can compile the <em>default</em> Georgi firmware locally on your computer, and flash your Georgi successfully with it. <em>Then</em>, we will get our hands dirty with some code by creating an example firmware customisation, compiling it, and then flash the Georgi again to apply it.</p> <p>If you have not already, I would recommend familiarising yourself, at least a little bit, with some of the Georgi-related <a href="http://docs.gboards.ca/">gBoards documentation</a>, to provide some context on what we will be doing. Specifically:</p> <ul> <li><a href="http://docs.gboards.ca/docs/Unboxing-Georgi/">Unboxing Georgi</a> - we will use the <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#entering-qmk-gaming-mode">Gaming mode</a> in the example customisation later on</li> <li><a href="http://docs.gboards.ca/docs/Configuring-Georgi/">Configuring Georgi</a> - in particular <a href="http://docs.gboards.ca/docs/Configuring-Georgi/#triggers">Triggers</a>, one of which we will change</li> <li><a href="http://docs.gboards.ca/docs/Hacking-Georgi/">Hacking Georgi</a> - here, just note that we will be working with the <a href="http://docs.gboards.ca/docs/Hacking-Georgi/#cchord"><code class="language-plaintext highlighter-rouge">cChord</code></a> <a href="https://en.wikipedia.org/wiki/Bit_field">bit field</a></li> </ul> <p>Ready? Let’s get hacking!</p> <h2 id="compile-default-georgi-firmware">Compile Default Georgi Firmware</h2> <p>Download the QMK firmware from its <a href="https://github.com/qmk/qmk_firmware">GitHub repository</a>. Pick a convenient directory to start in (I will use <code class="language-plaintext highlighter-rouge">~/Desktop</code> here, but you can pick one appropriate for your operating system), and either use <a href="https://git-scm.com/">Git</a> to get the source code (recommended), or download its <a href="https://en.wikipedia.org/wiki/ZIP_(file_format)">ZIP</a> file.</p> <div class="centered-image" style="width: 100%"> <figure style="margin-bottom: 0"> <img src="/assets/images/2022-05-18/qmk-firmware-github.jpg" alt="QMK Firmware GitHub page"/> </figure> </div> <p>Example commands:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">cd ~/Desktop
git clone https://github.com/qmk/qmk_firmware.git
cd qmk_firmware
</span></code></pre></div></div> <p>Next, follow the <a href="https://docs.qmk.fm/#/newbs_getting_started">Setting Up Your QMK Environment</a> instructions from the <a href="https://docs.qmk.fm/#/">QMK documentation</a> and install the <code class="language-plaintext highlighter-rouge">qmk</code> <a href="https://en.wikipedia.org/wiki/Command-line_interface">command line interface</a> (CLI) application.</p> <p>In the <a href="https://docs.qmk.fm/#/newbs_getting_started?id=_1-prerequisites">Prerequisites</a>, it says installation of the <a href="https://github.com/qmk/qmk_toolbox">QMK Toolbox</a> is optional, but we will be using it soon, so either download <a href="https://github.com/qmk/qmk_toolbox/releases">the latest release</a>, or, if you are on macOS, use <a href="https://brew.sh/">Homebrew</a> to install it:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">brew install qmk-toolbox
</span></code></pre></div></div> <p>Now, use the <code class="language-plaintext highlighter-rouge">qmk</code> CLI to compile the default Georgi firmware with the following command:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">qmk compile -kb georgi -km default
</span></code></pre></div></div> <blockquote> <p>You may get an error running this command the first time, and be prompted to run a command like <code class="language-plaintext highlighter-rouge">make git-submodule</code>. Follow any error message instructions, and then try compiling again.</p> </blockquote> <p>If the command runs successfully, the end of all of the compilation output should look something like this:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">...
</span><span class="go">Creating load file for flashing: .build/gboards_georgi_default.hex          [OK]
Copying gboards_georgi_default.hex to qmk_firmware folder                   [OK]
Checking file size of gboards_georgi_default.hex                            [OK]
</span></code></pre></div></div> <p>If you check in your <code class="language-plaintext highlighter-rouge">qmk_firmware</code> directory, you will see that a <a href="https://en.wikipedia.org/wiki/Intel_HEX">HEX</a> file named <code class="language-plaintext highlighter-rouge">gboards_georgi_default.hex</code> has been generated, which we will use to flash the Georgi.</p> <h2 id="flash-georgi-firmware">Flash Georgi Firmware</h2> <p>Open up the QMK Toolbox application, press the “Open” button, and select the generated HEX file.</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/qmk-toolbox-select-firmware.jpg" alt="QMK Toolbox Select Firmware"/> <figcaption> Screenshot is macOS version of QMK Toolbox. May differ slightly for other operating systems. </figcaption> </figure> </div> <p>You will notice that the “Flash” button is currently not selectable. This is because the Georgi is not currently in <a href="https://en.wikipedia.org/wiki/USB#Device_Firmware_Upgrade_mechanism">Device Firmware Upgrade</a> (DFU) mode. To get in DFU mode, and allow the Georgi to receive firmware, you need to press the tiny button on the left half of the keyboard, just below the <a href="https://en.wikipedia.org/wiki/Phone_connector_(audio)">TRRS</a> cable plug. I use a paperclip or a <a href="https://en.wikipedia.org/wiki/SIM_card">SIM card</a> tray ejector tool for this delicate job.</p> <div class="centered-image" style="width: 80%"> <figure> <img src="/assets/images/2022-05-18/georgi-flash-button.jpg" alt="Press button to put Georgi in DFU mode"/> <figcaption> Tray ejector tools are not just for mobile phones. </figcaption> </figure> </div> <p>Once the button has been pressed, QMK Toolbox will show you a message letting you know that you have successfully connected a device in DFU mode, and the “Flash” button will become pressable:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/qmk-toolbox-dfu-device-connected.jpg" alt="QMK Toolbox DFU mode device successfully connected"/> </figure> </div> <p>Press the “Flash” button, and if everything goes well, you should see output that looks something like this:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/qmk-toolbox-flashing-successful.jpg" alt="QMK Toolbox device successfully flashed"/> </figure> </div> <p>The Georgi has now been taken out of DFU mode, and can be reconnected to Plover.</p> <div class="centered-image" style="width: 60%"> <figure> <img src="/assets/images/2022-05-18/reconnect-plover.jpg" alt="Reconnect Georgi to Plover"/> <figcaption> My Georgi shows up as <code>/dev/cu.usbmodem14202</code> in Plover's connection list, but yours might look something like <code>COM6</code> if you use Windows. </figcaption> </figure> </div> <p>If you are able to stroke steno chords again (and it seems like nothing has changed), congratulations, you have just completed a full keyboard flashing process! You will get another chance to do this again, but before that, let’s actually go and make some firmware changes!</p> <h2 id="customising-the-firmware">Customising the Firmware</h2> <p>Before diving straight into the code, allow me to provide some context around the reasons for even wanting to make the changes we will use in the customisation example.</p> <h3 id="the-problem">The Problem</h3> <p>I have been experimenting with Georgi’s <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#entering-qmk-gaming-mode">Gaming mode</a>, which switches you to a separate keyboard layer that “acts like a traditional keyboard, as opposed to stenotype”, in the way it sends information to your computer.</p> <p>This is different to Georgi’s <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#modes">QWERTY and Symbol modes</a>, which still both act like a stenotype, and actually only exist as <a href="http://docs.gboards.ca/docs/Configuring-Georgi/#layers">“pseudo-layers”</a> within the main steno keymap layer.</p> <blockquote> <p>Open any game you may have that involves moving a character around a screen, and attempt to do so using Georgi’s QWERTY mode. You will most likely be unable to, due to this keyboard/stenotype difference (details of which are not important for this post).</p> </blockquote> <p>If you have a look at the code for the Georgi <a href="https://github.com/qmk/qmk_firmware/blob/e9e83b4da73e5594b1f864d78529e85aa5ebefe9/keyboards/gboards/georgi/keymaps/default/keymap.c#L219">default keymap layers</a>, you will actually see only three layers, which have the following layouts:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-steno-layer.png" alt="Steno (and QWERTY and Symbol) layer"/> <figcaption> Steno Layer (includes QWERTY and Symbol pseudo-layers; not shown above, but you can view them <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#modes">here</a>) </figcaption> </figure> </div> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-gaming-layer-1.png" alt="Gaming Layer 1"/> <figcaption> Gaming Layer 1 </figcaption> </figure> </div> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-gaming-layer-2.png" alt="Gaming Layer 2"/> <figcaption> Gaming Layer 2 </figcaption> </figure> </div> <p>In order to change from the Steno layer to Gaming layer 1, the default chord is:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-steno-layer-gaming-chord.png" alt="Enter Gaming Mode chord"/> <figcaption> Enter Gaming Mode chord </figcaption> </figure> </div> <p>In order to change from a Gaming layer to the Steno layer, the default keystroke is:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-gaming-layer-steno-key.png" alt="Return to Steno Mode key"/> <figcaption> Return to Steno Mode key </figcaption> </figure> </div> <p>My brain sees this as stroking a complex chord to change to Gaming Mode, yet pressing a completely different singular key to change back to Steno Mode. I would prefer to:</p> <ul> <li>have a single chord that that would feel like a “toggle” between Steno and Gaming modes</li> <li>make that chord a little bit simpler than the one above</li> </ul> <h3 id="the-solution">The Solution</h3> <p>I do not want to risk any dictionary-level outline conflicts, so the chord has to include a Georgi-specific key (<code class="language-plaintext highlighter-rouge">FN</code> or <code class="language-plaintext highlighter-rouge">PWR</code>). Therefore, I am thinking a <code class="language-plaintext highlighter-rouge">PWR | ST4</code> (“Star 4”) combination will be a good candidate:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-simple-gaming-chord.png" alt="Steno/Gaming toggle chord"/> <figcaption> Candidate Steno/Gaming "toggle" chord </figcaption> </figure> </div> <p>The plan of attack to implement this toggle chord will be twofold:</p> <ul> <li>Change the hardcoded Georgi Gaming layer <a href="http://docs.gboards.ca/docs/Configuring-Georgi/#triggers">trigger</a> on the Steno layer to be <code class="language-plaintext highlighter-rouge">PWR | ST4</code></li> <li>Create an equivalent <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/feature_combo.md">QMK Combo</a> shape (read: chord for a QWERTY keyboard) on the Gaming layer that returns to the Steno layer, using the “Left Control” and “H” keys</li> </ul> <p>Let’s give it a try!</p> <h3 id="change-gaming-layer-trigger">Change Gaming Layer Trigger</h3> <p>You will find all the logic for the triggers related to layer switching in Georgi’s <a href="https://github.com/qmk/qmk_firmware/blob/656090335066eed90a9b76e113fb93ee3bc8c089/keyboards/gboards/georgi/sten.c#L97"><code class="language-plaintext highlighter-rouge">sten.c</code></a> file. Inside the <code class="language-plaintext highlighter-rouge">send_steno_chord_user</code> function, you can see that the chord for the gaming toggle is currently hardcoded to <code class="language-plaintext highlighter-rouge">(PWR | FN | ST4 | ST3)</code>, as per the keymap above:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/sten.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// All processing done at chordUp goes through here</span>
<span class="n">bool</span> <span class="nf">send_steno_chord_user</span><span class="p">(</span><span class="n">steno_mode_t</span> <span class="n">mode</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">chord</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="c1">// Handle Gaming Toggle,</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cChord</span> <span class="o">==</span> <span class="p">(</span><span class="n">PWR</span> <span class="o">|</span> <span class="n">FN</span> <span class="o">|</span> <span class="n">ST4</span> <span class="o">|</span> <span class="n">ST3</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">keymapsCount</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="n">layer_on</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <p>All we need to do here is change the chord that <code class="language-plaintext highlighter-rouge">cChord</code> is checked against from <code class="language-plaintext highlighter-rouge">(PWR | FN | ST4 | ST3)</code> to <code class="language-plaintext highlighter-rouge">(PWR | ST4)</code>:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/sten.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// All processing done at chordUp goes through here</span>
<span class="n">bool</span> <span class="nf">send_steno_chord_user</span><span class="p">(</span><span class="n">steno_mode_t</span> <span class="n">mode</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">chord</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="c1">// Handle Gaming Toggle,</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cChord</span> <span class="o">==</span> <span class="p">(</span><span class="n">PWR</span> <span class="o">|</span> <span class="n">ST4</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">keymapsCount</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="n">layer_on</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <p>Made the change? Great! That wasn’t too scary, right? Now to move out of Georgi’s core firmware logic, and into the keymap logic, where most customisation typically occurs.</p> <h3 id="create-steno-layer-combo">Create Steno Layer Combo</h3> <p>Although we could not avoid changing core Georgi firmware logic in the previous step, the general rule when you create your own personal keymap customisations is to make a copy of the keymap directory you intend to change (in this case Georgi’s <code class="language-plaintext highlighter-rouge">default</code> keymap), and give it a unique name (in this case, I’ll name it <code class="language-plaintext highlighter-rouge">my_keymap</code>: unique, yet uncreative [feel free to name it as you wish]).</p> <p>You can create the new directory via your <a href="https://en.wikipedia.org/wiki/File_manager">file manager</a> user interface, or by the command line:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">cp -r keyboards/gboards/georgi/keymaps/default/ keyboards/gboards/georgi/keymaps/my_keymap/
</span></code></pre></div></div> <p>Now, open up the <code class="language-plaintext highlighter-rouge">keymap.c</code> file in the new <code class="language-plaintext highlighter-rouge">my_keymap</code> directory. Just above the keymap definitions, add the following code to define a new QMK Combo, which will mimic the Steno layer <code class="language-plaintext highlighter-rouge">(PWR | ST4)</code> chord we saw earlier, using the “Left Control” and “H” keys:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/keymaps/my_keymap/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
  <span class="n">GOTO_STENO_LAYER</span>
<span class="p">};</span>

<span class="c1">// NOTE: This combo is meant to mirror the chord used to switch to the gaming</span>
<span class="c1">// layer in `sten.c`.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">goto_steno_layer_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_LEFT_CTRL</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">GOTO_STENO_LAYER</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">goto_steno_layer_combo</span><span class="p">,</span> <span class="n">TO</span><span class="p">(</span><span class="n">STENO_LAYER</span><span class="p">)),</span>
<span class="p">};</span>

<span class="c1">// ..</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">keymaps</span><span class="p">[][</span><span class="n">MATRIX_ROWS</span><span class="p">][</span><span class="n">MATRIX_COLS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ..</span>
<span class="p">};</span>
</code></pre></div></div> <blockquote> <p>If you need a primer on QMK Combos, I wrote about them in excruciating detail in another blog post, <a href="https://www.paulfioravanti.com/blog/chording-qwerty-qmk-combos/">Chording QWERTY with QMK Combos</a>. Most of the information in there should still be current as of this writing.</p> </blockquote> <p>What we are doing here at a high level is:</p> <ul> <li>Giving a <em>name</em> to the chord, in the form of an <a href="https://en.wikipedia.org/wiki/Enumerated_type">enumerated type</a>, that indicates what it does: <code class="language-plaintext highlighter-rouge">GOTO_STENO_LAYER</code></li> <li>Defining what keys the combo should consist of: the <code class="language-plaintext highlighter-rouge">KC_LEFT_CTRL</code>, and <code class="language-plaintext highlighter-rouge">KC_H</code> keys</li> <li>Defining what should happen when the chord is pressed: in this case <code class="language-plaintext highlighter-rouge">TO(STENO_LAYER)</code>, meaning to “turn on” the Steno layer</li> </ul> <p>Next, we need to provide a definition for <code class="language-plaintext highlighter-rouge">COMBO_COUNT</code> above, which will need to be put inside a new <code class="language-plaintext highlighter-rouge">config.h</code> file within the keymap directory, so create that now:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/keymaps/my_keymap/config.h</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"../../config.h"</span><span class="cp">
</span>
<span class="cp">#define COMBO_COUNT 1
</span></code></pre></div></div> <blockquote> <p>If you add or remove combos in the future, you will also need to change this number accordingly.</p> </blockquote> <p>Finally, we need to actually enable the use of combos in our layout, otherwise we will get compilation errors for using things like <code class="language-plaintext highlighter-rouge">combo_t</code> and <code class="language-plaintext highlighter-rouge">COMBO_END</code> above. Just add the following line of configuration to the keymap <code class="language-plaintext highlighter-rouge">rules.mk</code> file:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/keymaps/my_keymap/rules.mk</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp"># ...
</span><span class="n">COMBO_ENABLE</span> <span class="o">=</span> <span class="n">yes</span>
</code></pre></div></div> <p>You have now done everything needed to implement the Gaming layer “toggle” chord! Time to make sure everything compiles correctly:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">qmk compile -kb georgi -km my_keymap
</span></code></pre></div></div> <p>Now, if you check in your <code class="language-plaintext highlighter-rouge">qmk_firmware</code> directory, you will see a newly created HEX file named <code class="language-plaintext highlighter-rouge">gboards_georgi_my_keymap.hex</code> for you to use when flashing. Different keymap compilations generate a separate firmware file.</p> <p>If you get any errors, trace back and see if you may have missed a step, or perhaps made a mistake in the code. If you get similar output to when you compiled the <code class="language-plaintext highlighter-rouge">default</code> keymap, then you are ready to flash your Georgi again. Repeat the firmware flashing steps from above, and give it a test!</p> <p>If you want to see what other customisations can be made with Georgi Gaming layers, feel free to use <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">my Georgi keymap</a> as a reference for any potential additions you may like to make to your own keymaps.</p> <p>If you do create your own custom layers, please share them publicly so every other Georgi owner can benefit from them as well! Good luck with your adventures in firmware!</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>As of QMK Configurator API v0.1 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="steno"/><category term="mechanical-keyboard"/><category term="qmk"/><summary type="html"><![CDATA[Make your steno keyboard do your bidding by codifying your preferences.]]></summary></entry><entry><title type="html">Play Classic Doom on a Mac</title><link href="https://www.paulfioravanti.com/blog/classic-doom-mac/" rel="alternate" type="text/html" title="Play Classic Doom on a Mac"/><published>2022-05-13T17:25:00+10:00</published><updated>2023-11-17T19:43:00+11:00</updated><id>https://www.paulfioravanti.com/blog/classic-doom-mac</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/classic-doom-mac/"><![CDATA[<p>The 1993 video game <a href="https://en.wikipedia.org/wiki/Doom_(1993_video_game)">Doom</a>, by <a href="https://en.wikipedia.org/wiki/Id_Software">id Software</a>, was <a href="https://en.wikipedia.org/wiki/List_of_Doom_ports#macOS">released for Mac on November 4, 1994</a>. But, good luck if you want to:</p> <ol style="list-style-type: lower-alpha"> <li> find <a href="https://doomwiki.org/wiki/Doom_(Apple_Macintosh)">that version</a> </li> <li> figure out a way to run it within some kind of emulation of <a href="https://en.wikipedia.org/wiki/Mac_OS_9">Mac OS 9</a> on your modern <a href="https://en.wikipedia.org/wiki/MacOS">macOS</a>-running computer (is that even possible?). </li> </ol> <p>Fortunately for us, <a href="https://zdoom.org/wiki/GZDoom">GZDoom</a><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> (<a href="https://zdoom.org/index">official site</a>), a “3D-accelerated Doom <a href="https://zdoom.org/wiki/Source_port">source port</a> based on <a href="https://zdoom.org/wiki/ZDoom">ZDoom</a><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>”, has our backs. It enables us to play the game as long as we can extract the <a href="https://doomwiki.org/wiki/WAD">WAD</a> file from the Doom <a href="https://en.wikipedia.org/wiki/.exe">.exe</a> file for <a href="https://en.wikipedia.org/wiki/Microsoft_Windows">Windows</a>.</p> <p>If getting from zero to fighting demon hordes on macOS was a straightforward course of action, there would be no need for this blog post. But, it’s a bit of an involved process, so here is the missing manual to get you up and running.</p> <blockquote> <p>I currently use an <a href="https://en.wikipedia.org/wiki/MacBook_Pro_(Intel-based)">Intel-based Macbook Pro</a> running <a href="https://en.wikipedia.org/wiki/MacOS_Monterey">macOS Monterey</a>, so that is what the following guide has been tested on. The process should still hopefully work for <a href="https://en.wikipedia.org/wiki/Apple_silicon">Apple Silicon</a>-based Macs and/or other macOS versions, but <a href="https://en.wiktionary.org/wiki/your_mileage_may_vary#Phrase">your mileage may vary</a>.<br/> <strong>Update 6 October 2022</strong>: I now use a <a href="https://en.wikipedia.org/wiki/Apple_M1">M1</a> Macbook Pro, and Doom with GZDoom works just fine. Apple Silicon-based Mac users can keep reading.</p> </blockquote> <h2 id="get-gzdoom">Get GZDoom</h2> <figure style="width:50%; float: right; margin-left: 10px; margin-top: 0;"> <img src="/assets/images/2022-05-13/gzdoom-download.jpg" alt="GZDoom downloads page"/> </figure> <p>It is possible to get GZDoom from its <a href="https://zdoom.org/downloads">downloads page</a>.</p> <p>You can click on the Macintosh link to download it, and install it like you would any other macOS application.</p> <p><em>However</em>, since you are going to have to get comfortable with using the <a href="https://en.wikipedia.org/wiki/Terminal_(macOS)">Terminal</a> application during this guide, I would suggest using this installation as the first opportunity to try it out (assuming you are not already comfortable, and have your own <a href="https://en.wikipedia.org/wiki/Terminal_emulator">terminal emulator</a> of choice).</p> <p>You are going to need to get <a href="https://brew.sh/">Homebrew</a>, a <a href="https://en.wikipedia.org/wiki/Package_manager">package manager</a> for macOS. Go to the Homebrew <a href="https://brew.sh/">homepage</a>, copy the installation command, open up your terminal, paste the command, and press enter.</p> <p>Once Homebrew is installed, you should be able to run the <code class="language-plaintext highlighter-rouge">brew</code> command in the terminal, so let’s do that using the following command to install GZDoom:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">brew install gzdoom
</span></code></pre></div></div> <p>If everything was successful, you should see output that looks something like this:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>brew <span class="nb">install </span>gzdoom
<span class="gp">==&gt;</span><span class="w"> </span>Downloading https://github.com/coelckers/gzdoom/releases/download/g4.7.1/gzdoom-4-7-1-macOS.zip
<span class="gp">==&gt;</span><span class="w"> </span>Downloading from https://objects.githubusercontent.com/github-production-release-asset-2e65be/10879376/59b36246-0a5b-4b9e-8fd8-90c6fce651f9?X-Amz-Algorith
<span class="gp">#</span><span class="c">####################################################################### 100.0%</span>
<span class="gp">==&gt;</span><span class="w"> </span>Installing Cask gzdoom
<span class="gp">==&gt;</span><span class="w"> </span>Moving App <span class="s1">'GZDoom.app'</span> to <span class="s1">'/Applications/GZDoom.app'</span>
<span class="go">🍺  gzdoom was successfully installed!
</span></code></pre></div></div> <p>Open up your Applications folder, and you should find GZDoom there, ready to go.</p> <div class="centered-image" style="width: 80%"> <figure> <img src="/assets/images/2022-05-13/gzdoom-in-applications.jpg" alt="GZDoom in the macOS Applications directory"/> </figure> </div> <p>However, if you double-click the icon and open GZDoom, you will likely find yourself greeted with an error message that looks like the following:</p> <div class="centered-image" style="width: 80%"> <figure style="margin-bottom: 0.5em"> <img src="/assets/images/2022-05-13/gzdoom-needs-wad-file.jpg" alt="GZDoom cannot find a Doom WAD file"/> </figure> </div> <p>GZDoom needs WAD files to run (and for you to place them in your local Library directory, <code class="language-plaintext highlighter-rouge">~/Library/Application Support/gzdoom</code>, which we will get to later…).</p> <p>GZDoom’s purpose is to run Doom, and is not, itself, the game Doom. So, it’s off to the store to go get it!</p> <h2 id="get-doom">Get Doom</h2> <p><em><a href="https://doomwiki.org/wiki/The_Ultimate_Doom">The Ultimate Doom</a></em> may be <a href="https://store.steampowered.com/app/2280/Ultimate_Doom/">available on Steam</a>, but we are going to need a file that is only provided in the version <a href="https://www.gog.com/en/game/the_ultimate_doom">available on GOG.com</a>.</p> <p>So, if you have not got a <a href="https://www.gog.com/">GOG.com</a> account yet, create one, then go and buy your copy of <em>The Ultimate Doom</em>.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-13/gog-doom.jpg" alt="GOG.com The Ultimate Doom purchase page"/> <figcaption> The price displayed here is in <a href="https://en.wikipedia.org/wiki/Australian_dollar">AUD</a>. Your price will likely reflect your region. </figcaption> </figure> </div> <p>All paid up and ready to go? Great! Go to the game detail page for your copy of <em>The Ultimate Doom</em> and let’s have a look at the files that are available to download.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-13/gog-doom-download.jpg" alt="Download the Doom Offline Backup Game Installers from GOG.com"/> </figure> </div> <p>See that big blue “DOWNLOAD AND INSTALL NOW” button that GOG.com is trying to guide you toward? Ignore it. The file downloaded from that button is for Windows users only, and cannot be used on a Mac.</p> <p>What we want is the less obvious “Offline Backup Game Installer”. Download the file linked from there, which will have a name like <code class="language-plaintext highlighter-rouge">setup_the_ultimate_doom_1.9_(28044).exe</code>. Although we cannot directly use this <code class="language-plaintext highlighter-rouge">.exe</code> file on Mac, it contains the Doom WAD file that we seek to extract.</p> <h2 id="extract-wad-file">Extract WAD File</h2> <p>The extraction process is going to generate a lot of new files, so I would suggest first creating a new directory somewhere that can contain them.</p> <p>I just created a temporary <code class="language-plaintext highlighter-rouge">TheUltimateDoom</code> directory on my home Desktop, and put the setup file in there (feel free to do the same, or name it whatever you would like):</p> <div class="centered-image" style="width: 60%"> <figure> <img src="/assets/images/2022-05-13/setup-exe-file.jpg" alt="The offline backup game installer in its own directory"/> <figcaption> Terminal path: <code>~/Desktop/TheUltimateDoom</code> </figcaption> </figure> </div> <p>In order to perform the extraction, you will need to install a new program called <a href="https://constexpr.org/innoextract/"><code class="language-plaintext highlighter-rouge">innoextract</code></a> (<a href="https://github.com/dscharrer/innoextract">source code</a>).</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-13/innoextract.jpg" alt="innoextract web page screenshot"/> </figure> </div> <p><code class="language-plaintext highlighter-rouge">innoextract</code> is a “tool to unpack installers created by <a href="https://jrsoftware.org/isinfo.php">Inno Setup</a>”, which is a “tool to create installers for Microsoft Windows applications”. Of particular interest to us is that it supports GOG.com’s Inno Setup-based game installers, which the “Offline Backup Game Installer” you downloaded most definitely is.</p> <p>Like with GZDoom, you install <code class="language-plaintext highlighter-rouge">innoextract</code> using Homebrew with the following command:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">brew install innoextract
</span></code></pre></div></div> <blockquote> <p>Unlike with GZDoom, using Homebrew is the <em>only</em> installation option available. So, if you ignored the last suggestion to install GZDoom using a terminal, now is the time to acquaint yourself with the command line.</p> </blockquote> <p>If everything is successful, you should get output that looks something like this:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>brew <span class="nb">install </span>innoextract
<span class="gp">==&gt;</span><span class="w"> </span>Downloading https://ghcr.io/v2/homebrew/core/innoextract/manifests/1.9_1
<span class="gp">#</span><span class="c">####################################################################### 100.0%</span>
<span class="gp">==&gt;</span><span class="w"> </span>Downloading https://ghcr.io/v2/homebrew/core/innoextract/blobs/sha256:7206f8b88483356746d682b1e631d214e6172b808bd7b8b0567cb9c0f0906abb
<span class="gp">==&gt;</span><span class="w"> </span>Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sha256:7206f8b88483356746d682b1e631d214e6172b808bd7b8b0567cb9c0f0906abb?se<span class="o">=</span>2022-05-13T23%3A25%3A00Z&amp;sig<span class="o">=</span>AvLqNPFvkGI%2B9T1AJqz%2FWNuK0AW%2FzO%2FrIVjRHJeiBc4%3D&amp;sp<span class="o">=</span>r&amp;spr<span class="o">=</span>https&amp;s
<span class="gp">#</span><span class="c">####################################################################### 100.0%</span>
<span class="gp">==&gt;</span><span class="w"> </span>Pouring innoextract--1.9_1.monterey.bottle.tar.gz
<span class="go">🍺  /usr/local/Cellar/innoextract/1.9_1: 7 files, 622.9KB
</span><span class="gp">==&gt;</span><span class="w"> </span>Running <span class="sb">`</span>brew cleanup innoextract<span class="sb">`</span>...
</code></pre></div></div> <p>Let’s now put <code class="language-plaintext highlighter-rouge">innoextract</code> into action. In your terminal, change directory (<a href="https://en.wikipedia.org/wiki/Cd_(command)"><code class="language-plaintext highlighter-rouge">cd</code></a>) to the location where you put the Offline Backup Game Installer file, and run <code class="language-plaintext highlighter-rouge">innoextract</code> against it.</p> <p>For the directory and installer filename above, that would be:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">cd ~/Desktop/TheUltimateDoom
innoextract setup_the_ultimate_doom_1.9_(28044).exe
</span></code></pre></div></div> <p>If everything is successful, you will get a whole bunch of output on your screen, that will include something like the following:</p> <div class="centered-image" style="width: 100%"> <figure style="margin: 0"> <img src="/assets/images/2022-05-13/innoextract-wad.jpg" alt="Extract WAD file from Offline Backup Game Installer file"/> </figure> </div> <p>And there is your payload: <code class="language-plaintext highlighter-rouge">DOOM.WAD</code>. Let’s go and introduce it to GZDoom!</p> <h2 id="play-doom-with-gzdoom">Play Doom with GZDoom</h2> <p>Open up a Finder window, go to the directory where all of your now-extracted files are, and find <code class="language-plaintext highlighter-rouge">DOOM.WAD</code>:</p> <div class="centered-image" style="width: 90%"> <figure style="margin: 0"> <img src="/assets/images/2022-05-13/wad-file-location.jpg" alt="Locate DOOM.WAD file in a Finder window"/> </figure> </div> <p>Copy <code class="language-plaintext highlighter-rouge">DOOM.WAD</code> into your local Library files under a <code class="language-plaintext highlighter-rouge">gzdoom</code> directory, so that GZDoom knows where to find it. If a <code class="language-plaintext highlighter-rouge">gzdoom</code> directory does not exist already, you can create it:</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-13/application-support-doom-wad.jpg" alt="Copy DOOM.WAD over to your local Library files"/> <figcaption> Terminal path: <code>~/Library/Application Support/gzdoom</code> </figcaption> </figure> </div> <p>Once you have done this, you can safely delete your <code class="language-plaintext highlighter-rouge">TheUltimateDoom</code> directory where you extracted all of Doom’s files.</p> <p>Now, all that is left is to run GZDoom! Double-click GZDoom in your Applications directory, and you should be greeted with a familiar title screen:</p> <div class="centered-image" style="width: 90%"> <figure style="margin: 0"> <img src="/assets/images/2022-05-13/doom-mac-desktop.jpg" alt="Doom on Mac using GZDoom"/> </figure> </div> <p>If you ever buy any other titles that also have WAD files, like <a href="https://en.wikipedia.org/wiki/Doom_II">Doom II</a>, or <a href="https://en.wikipedia.org/wiki/Heretic_(video_game)">Heretic</a> (or get any of the other <a href="https://doom.fandom.com/wiki/List_of_notable_WADs">list of notable WADs</a>), repeat the same process, and you should also be able to play them in GZDoom.</p> <p>But for now, don your helmet and armour, load your shotgun, and get yourself back to Mars for some classic <a href="https://en.wikipedia.org/wiki/2.5D">2.5D</a> fragging fun!</p> <hr/> <h3 id="more-doom-related-content">More Doom-Related Content</h3> <p>Check out my <em><a href="https://www.paulfioravanti.com/blog/steno-gaming-doom-typist/">Steno Gaming: Doom Typist</a></em> post to see how to turn Doom into a typing game with <a href="https://github.com/mmaulwurff/typist.pk3">Typist.pk3</a>, and then use it with <a href="https://www.openstenoproject.org/">Plover stenography</a>. Here it is in action!</p> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/a8Kp5s-jw5k" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> </div> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>GZDoom is named after <a href="https://de.wikipedia.org/wiki/Sesamstra%C3%9Fe#Graf_Zahl">Graf Zahl</a>, the German name for <a href="https://en.wikipedia.org/wiki/Sesame_Street">Sesame Street</a> character <a href="https://en.wikipedia.org/wiki/Count_von_Count">Count von Count</a>, which <a href="https://github.com/coelckers">Christoph Oelckers</a>, GZDoom’s coder and maintainer, uses as an online <a href="https://www.merriam-webster.com/dictionary/moniker">moniker</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p>The meaning (and pronunciation) of the “Z” in ZDoom would seem to be <a href="https://forum.zdoom.org/viewtopic.php?t=290">up</a> <a href="https://forum.zdoom.org/viewtopic.php?t=1112">for</a> <a href="https://forum.zdoom.org/viewtopic.php?t=3761">debate</a>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="gaming"/><summary type="html"><![CDATA[Send Doomguy to hell without having to migrate to Windows.]]></summary></entry></feed>