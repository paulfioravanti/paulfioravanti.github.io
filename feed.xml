<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://www.paulfioravanti.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://www.paulfioravanti.com/" rel="alternate" type="text/html"/><updated>2022-09-08T20:50:42+10:00</updated><id>https://www.paulfioravanti.com/feed.xml</id><title type="html">Floor and Varnish</title><subtitle>The permanent drafts folder for brain dumps of Paul Fioravanti</subtitle><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><entry><title type="html">Sharing AppleScript Handlers</title><link href="https://www.paulfioravanti.com/blog/sharing-applescript-handlers/" rel="alternate" type="text/html" title="Sharing AppleScript Handlers"/><published>2022-07-05T08:30:00+10:00</published><updated>2022-07-05T08:30:00+10:00</updated><id>https://www.paulfioravanti.com/blog/sharing-applescript-handlers</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/sharing-applescript-handlers/"><![CDATA[<p>Being able to share code between files is a great way to put programming logic “<a href="https://en.wikipedia.org/wiki/Single_source_of_truth">in its right place</a>”, and prevent single files from containing hundreds or thousands of lines of code.</p> <p>A very basic example of sharing code in <a href="https://www.python.org/">Python</a> could be having a directory called <code class="language-plaintext highlighter-rouge">code/</code>, and in it, a file called <code class="language-plaintext highlighter-rouge">greetings.py</code>. This file contains very important business logic about how to say “hello”:</p> <p><strong><code class="language-plaintext highlighter-rouge">code/greetings.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Hello there!"</span><span class="p">)</span>
</code></pre></div></div> <p>Now, say I have a <code class="language-plaintext highlighter-rouge">greeter.py</code> file in the same directory, who has no idea how to say “hello”, and wants to leverage the specialised knowledge its neighbour file has on how to do it. It can do so easily by <code class="language-plaintext highlighter-rouge">import</code>ing the <code class="language-plaintext highlighter-rouge">hello</code> function from the <code class="language-plaintext highlighter-rouge">greetings</code> file, and using it:</p> <p><strong><code class="language-plaintext highlighter-rouge">code/greeter.py</code></strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">greetings</span> <span class="kn">import</span> <span class="n">hello</span>

<span class="n">hello</span><span class="p">()</span>
</code></pre></div></div> <p>Running the <code class="language-plaintext highlighter-rouge">greeter</code> program outputs what you would expect:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python code/greeter.py
<span class="go">Hello there!
</span></code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">from greetings import hello</code> line is able to find the <code class="language-plaintext highlighter-rouge">greetings</code> file thanks to Python’s <a href="https://docs.python.org/3/library/sys.html#sys.path"><code class="language-plaintext highlighter-rouge">sys.path</code></a>, a “list of strings that specifies the search path for modules”, which includes the directory of the script being run: in this case, the <code class="language-plaintext highlighter-rouge">code/</code> directory. Makes sense.</p> <p>Many programming languages have similar mechanisms to allow sharing code in simple, unobstructive ways. <a href="https://en.wikipedia.org/wiki/AppleScript">AppleScript</a> <em>can</em> share code, but certainly not in an intuitive way like Python. The extra steps required to do so compelled me to make a note of them somewhere, in order to not have to scour the internet to figure this out again.</p> <p>So, I will illustrate this sharing process by <a href="https://en.wikipedia.org/wiki/Code_refactoring">refactoring</a> out <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH">handlers</a> (read: <a href="https://en.wikipedia.org/wiki/Subroutine">functions</a>) into separate files using an example from <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/src/command">my stenography dictionaries</a>, where I have employed AppleScript to control my Mac using <a href="https://www.artofchording.com/introduction/how-steno-works.html">stenographic chords</a> (don’t worry, the <a href="https://en.wikipedia.org/wiki/Stenotype">stenography</a> context here is not important).</p> <h2 id="contextual-refreshing">Contextual Refreshing</h2> <p>I have an AppleScript file that performs a keyboard shortcut for a “refresh”.</p> <p>The most common <a href="https://en.wikipedia.org/wiki/Use_case">use case</a> for a “refresh” on a computer would probably be refreshing a browser window, and its keyboard shortcut on <a href="https://en.wikipedia.org/wiki/MacOS">macOS</a> is ⌘R (<a href="https://en.wikipedia.org/wiki/Command_key">Command</a>-R). Many other applications use the same ⌘R shortcut for their own interpretation of “refresh”, so contextually, it is quite a safe one to use.</p> <p>However, when I have the very specific use case of using the <a href="https://www.vim.org/">Vim</a> text editor in an <a href="https://iterm2.com/">iTerm2</a> terminal, I need a “refresh” to mean “refresh the <a href="https://github.com/ctrlpvim/ctrlp.vim">ctrlp.vim</a> fuzzy file finder’s cache, so it picks up the existence of any new files”, and the shortcut for that is F5 (<a href="https://en.wikipedia.org/wiki/Function_key">Function Key</a>-5).</p> <p>So, the script needs to figure out what current the “active” application is, and then “press” the appropriate keyboard shortcut (either ⌘R, or F5). Here is what that looks like in my code:</p> <p><strong><code class="language-plaintext highlighter-rouge">src/command/actions/refresh.applescript</code></strong></p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">on</span> <span class="nb">run</span><span class="w">
  </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">getActiveApp</span><span class="p">()</span><span class="w">

  </span><span class="k">if</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="s2">"iTerm2"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="nv">performiTerm2Refresh</span><span class="p">()</span><span class="w">
  </span><span class="k">else</span><span class="w">
    </span><span class="nv">performRefresh</span><span class="p">(</span><span class="nv">activeApp</span><span class="p">)</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">if</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nb">run</span><span class="w">

</span><span class="k">on</span> <span class="nv">performiTerm2Refresh</span><span class="p">()</span><span class="w">
  </span><span class="k">set</span><span class="w"> </span><span class="nv">processName</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">getiTermProcessName</span><span class="p">()</span><span class="w">

  </span><span class="k">if</span><span class="w"> </span><span class="nv">processName</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s2">"vim"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="nv">performVimRefresh</span><span class="p">()</span><span class="w">
  </span><span class="k">else</span><span class="w">
    </span><span class="nb">display</span><span class="w"> </span><span class="nv">notification</span><span class="w"> </span><span class="s2">"Nothing to refresh."</span><span class="w"> </span><span class="nv">with</span><span class="w"> </span><span class="na">title</span><span class="w"> </span><span class="s2">"Error"</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">if</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">performiTerm2Refresh</span><span class="w">

</span><span class="k">on</span> <span class="nv">performVimRefresh</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="s2">"iTerm2"</span><span class="w">
    </span><span class="c1"># 96 = F5</span><span class="w">
    </span><span class="na">key code</span><span class="w"> </span><span class="mi">96</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">performVimRefresh</span><span class="w">

</span><span class="k">on</span> <span class="nv">performRefresh</span><span class="p">(</span><span class="nv">activeApp</span><span class="p">)</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="s2">"r"</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">performRefresh</span><span class="w">

</span><span class="k">on</span> <span class="nv">getActiveApp</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="nb">return</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getActiveApp</span><span class="w">

</span><span class="k">on</span> <span class="nv">getiTermProcessName</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"iTerm2"</span><span class="w">
    </span><span class="nb">return</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">current</span><span class="w"> </span><span class="nv">session</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">current</span><span class="w"> </span><span class="na">window</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getiTermProcessName</span><span class="w">
</span></code></pre></div></div> <p>In this file there are six handlers, with the <code class="language-plaintext highlighter-rouge">on run</code> handler at the top being the entry point for when the script is run. The first four handlers contain code that is <em>specific</em> to “refreshing”, but the final two handlers, <code class="language-plaintext highlighter-rouge">getActiveApp()</code> and <code class="language-plaintext highlighter-rouge">getiTermProcessName()</code>, contain code that is general enough that other scripts could leverage them. Therefore, they are the perfect candidates for extraction into some other file, where they can be shared.</p> <p>Let’s remove them from <code class="language-plaintext highlighter-rouge">refresh.applescript</code>, and put them into a “utilities” file:</p> <p><strong><code class="language-plaintext highlighter-rouge">src/command/actions/util.applescript</code></strong></p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">on</span> <span class="nv">getActiveApp</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="nb">return</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getActiveApp</span><span class="w">

</span><span class="k">on</span> <span class="nv">getiTermProcessName</span><span class="p">()</span><span class="w">
  </span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"iTerm2"</span><span class="w">
    </span><span class="nb">return</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">current</span><span class="w"> </span><span class="nv">session</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">current</span><span class="w"> </span><span class="na">window</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getiTermProcessName</span><span class="w">
</span></code></pre></div></div> <p>Okay, so now the big question: how can <code class="language-plaintext highlighter-rouge">refresh.applescript</code> use the code that now lives in <code class="language-plaintext highlighter-rouge">util.applescript</code>?</p> <h2 id="creating-shared-libraries">Creating Shared Libraries</h2> <p>AppleScript cannot just reach into neighbouring files with a line like <code class="language-plaintext highlighter-rouge">from util import getActiveApp</code>. What needs to occur is the metamorphosis of the utilities script into what AppleScript calls a <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_script_objects.html#//apple_ref/doc/uid/TP40000983-CH207-SW6">Script Library</a>, which involves:</p> <ul> <li>Creating a compiled version of the script with the <a href="https://ss64.com/osx/osacompile.html"><code class="language-plaintext highlighter-rouge">osacompile</code></a> command line tool (the compiled script will have a <a href="https://fileinfo.com/extension/scpt"><code class="language-plaintext highlighter-rouge">.scpt</code></a> file extension, instead of <code class="language-plaintext highlighter-rouge">.applescript</code>)</li> <li>Putting the compiled script in a designated “Script Libraries” folder, whose locations are numerous (see previous <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_script_objects.html#//apple_ref/doc/uid/TP40000983-CH207-SW6">Script Library</a> link), but the one I have seen cited most often, and that <em>did</em> work for me, is in the user Library directory, specifically: <code class="language-plaintext highlighter-rouge">~/Library/Script Libraries/</code></li> </ul> <p>After those steps are done, we can use the utility handlers again, so let’s give it a shot!</p> <p>First, create the compiled script:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">osacompile -o util.scpt util.applescript
</span></code></pre></div></div> <p>Now, move the newly created <code class="language-plaintext highlighter-rouge">util.scpt</code> script to the Script Libraries directory. Since that directory gets used by other programs as well, let’s silo the file in its own directory called <code class="language-plaintext highlighter-rouge">steno-dictionaries</code>:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">mkdir -p ~/Library/Script Libraries/steno-dictionaries
mv util.scpt ~/Library/Script Libraries/steno-dictionaries
</span></code></pre></div></div> <p>Now, we can change <code class="language-plaintext highlighter-rouge">refresh.applescript</code> to use the handlers in the newly-minted Script Library:</p> <p><strong><code class="language-plaintext highlighter-rouge">src/command/actions/refresh.applescript</code></strong></p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">property</span><span class="w"> </span><span class="nv">Util</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nv">script</span><span class="w"> </span><span class="s2">"steno-dictionaries/util"</span><span class="w">

</span><span class="k">on</span> <span class="nb">run</span><span class="w">
  </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">Util</span>'s <span class="nv">getActiveApp</span><span class="p">()</span><span class="w">

  </span><span class="c1"># ...</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nb">run</span><span class="w">

</span><span class="k">on</span> <span class="nv">performiTerm2Refresh</span><span class="p">()</span><span class="w">
  </span><span class="k">set</span><span class="w"> </span><span class="nv">processName</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">Util</span>'s <span class="nv">getiTermProcessName</span><span class="p">()</span><span class="w">

  </span><span class="c1"># ...</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">performiTerm2Refresh</span><span class="w">

</span><span class="c1"># ...</span><span class="w">
</span></code></pre></div></div> <p>Done! Since Shared Libraries are compiled, this enables us to reference them as a static <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_fundamentals.html#//apple_ref/doc/uid/TP40000983-CH218-SW5">Property</a> (here named <code class="language-plaintext highlighter-rouge">Util</code>), allowing for commands to be sent to it using the <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_script_objects.html#//apple_ref/doc/uid/TP40000983-CH207-SW3">possessive syntax</a> (<code class="language-plaintext highlighter-rouge">'s</code>).</p> <h2 id="shared-libraries-at-scale">Shared Libraries at Scale</h2> <p>The example above is all well and good for compiling a single Shared Library, but performing those commands for multiple files gets tiresome quite quickly.</p> <p>In order to automate this in my <a href="https://github.com/paulfioravanti/steno-dictionaries">steno-dictionaries repo</a>, I wrote some <a href="https://en.wikipedia.org/wiki/Shell_script">shell scripts</a> (that live in its <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/bin"><code class="language-plaintext highlighter-rouge">bin/</code> directory</a>) that “bootstrap” the process of making the AppleScript code in the repository ready to use after being <a href="https://git-scm.com/docs/git-clone">cloned</a>. They ensure that running one command (<code class="language-plaintext highlighter-rouge">./bin/bootstrap</code>) will, in the following order:</p> <ul> <li>Create a <code class="language-plaintext highlighter-rouge">~/Library/Script Libraries/steno-dictionaries</code> directory</li> <li>Compile all AppleScript files that will become Script Libraries into <code class="language-plaintext highlighter-rouge">.scpt</code> files</li> <li>Move the Script Library <code class="language-plaintext highlighter-rouge">.scpt</code> files to <code class="language-plaintext highlighter-rouge">~/Library/Script Libraries/steno-dictionaries</code></li> <li>Then, compile all other AppleScript files that reference the Script Libraries (but are not, themselves, Script Libraries) into <code class="language-plaintext highlighter-rouge">.scpt</code> files</li> </ul> <blockquote> <p>(I’m assuming that running <code class="language-plaintext highlighter-rouge">.scpt</code> files are faster than <code class="language-plaintext highlighter-rouge">.applescript</code> files since they are compiled, but I cannot seem to find conclusive evidence to back up that assumption on the internet, which is weird…).</p> </blockquote> <p>The <code class="language-plaintext highlighter-rouge">.scpt</code> scripts are executed by shell commands that run <a href="https://ss64.com/osx/osascript.html"><code class="language-plaintext highlighter-rouge">osascript</code></a> commands, which are contained in steno chord entries in the repo’s <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/dictionaries/command"><code class="language-plaintext highlighter-rouge">commands</code> directory</a>. The one that runs the “refresh” script looks like this:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash <span class="nt">-ci</span> <span class="s1">'osascript $STENO_DICTIONARIES/src/command/actions/refresh.scpt'</span>
</code></pre></div></div> <blockquote> <p>The shell commands run in <a href="https://www.gnu.org/software/bash/manual/html_node/Interactive-Shell-Behavior.html">interactive mode</a> for <a href="https://github.com/paulfioravanti/steno-dictionaries/blob/main/dictionaries/command/README.md#bash-commands">reasons</a>.</p> </blockquote> <h2 id="caring-about-sharing">Caring about Sharing</h2> <p>I really wish that sharing code in AppleScript was not as complex as it currently is, but I do not see that changing at all, assuming that AppleScript itself even survives into the future.</p> <p>The revamped <a href="https://developer.apple.com/">Apple Developer site</a> would seem to ignore AppleScript’s existence altogether (all the documentation links used in this post seem to come from the archive, implying they are now legacy and unmaintained…), but I do not see any alternative candidate language being put forward for macOS system automation programming.</p> <p>Personally, I would be happy to change everything I have written into <a href="https://www.swift.org/">Swift</a>, if that was possible. But, for now, I need AppleScript, and if you do too, hopefully this post has been able to serve as some reference.</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="apple"/><category term="scripting"/><summary type="html"><![CDATA[Navigating AppleScript's awkward handshakes between files.]]></summary></entry><entry><title type="html">“Welcome back”</title><link href="https://www.paulfioravanti.com/blog/welcome-back-overwork/" rel="alternate" type="text/html" title="“Welcome back”"/><published>2022-07-03T12:50:00+10:00</published><updated>2022-07-03T12:50:00+10:00</updated><id>https://www.paulfioravanti.com/blog/welcome-back-overwork</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/welcome-back-overwork/"><![CDATA[<div class="post-audio"> <div class="post-audio-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/_nkqjga6doM" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> </div> <div class="spacer"></div> <div class="text"> :studio_microphone: This post has audio narration </div> </div> <p>In the late <a href="https://en.wiktionary.org/wiki/noughties">noughties</a>, I worked for an American software company in Japan.</p> <p>That period in Tokyo, just pre-<a href="https://en.wikipedia.org/wiki/Bankruptcy_of_Lehman_Brothers">Lehman Shock</a>, felt like a mini tech boom: the company had managed to hit the jackpot by selling a colossal software and professional services deal to a huge Japanese company.</p> <p>Money from sales expense accounts flowed freely, even into the beers of the engineers; all in an attempt to foster goodwill, encourage a successful project implementation, and keep the customer happy.</p> <p>However, I do not recall anyone on the project ever being happy.</p> <p>The customer was not happy, because the software and its ecosystem did not work as they expected, for reasons which were obvious to them, but perhaps not to anyone outside Japan<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>.</p> <p>The project implementation team were not happy, because the responsibility to bridge the gap on these issues fell directly on them.</p> <p>During the worst periods, we were working literal 18-22 hour days. There were periods where I had no time to actually go home, and had to get my partner to physically bring me changes of clothes to the office; I had to grab showers, and maybe a couple of hours sleep, at my teammate’s apartment closeby.</p> <p>Many weeks were spent on a schedule of getting an earful of frustration from the customer about the software product during the day (as well as from our own sales staff, who did not want to have their commissions jeopardised), then getting on calls with the US support and development teams throughout the night, in hopes they could create <a href="https://en.wikipedia.org/wiki/Patch_(computing)">patches</a> for the product. If they could, we would apply them, re-adapt our implementation to account for them, then rinse and repeat this cycle of insanity: we were very figuratively repairing the aeroplane, and replacing its parts, mid-flight.</p> <p>On one particular night, when I was actually able to make it home, my company-issued <a href="https://en.wikipedia.org/wiki/BlackBerry">BlackBerry</a> summoned me to a 2:00am conference call with one of the US regional offices to discuss the usual product issues found by the customer, which I joined lying flat on the floor.</p> <p>A lot of the conversation content was out of my depth, since I lacked background context from previous projects. But, when Japan-related questions finally came up, I was able to chime in and attempt to provide something of value, at which point my project teammate said the words that I can still hear clearly to this day:</p> <blockquote style="font-size: xx-large"> <p>“Welcome back”</p> </blockquote> <p>Confused, I asked what he was talking about, and his response impacted like a fireworks display of every red flag I had ignored about this project and the company.</p> <p>I was duly informed that I had <em>fallen asleep</em> on the call, and our colleagues across the <a href="https://en.wikipedia.org/wiki/Pacific_Ocean">Pacific</a> had decided to broadcast my snoring <em>office-wide</em> on their speakerphone for laughs.</p> <p>As far as I was concerned, I was <em>fully conscious</em>, alert, and focused on the discussions. But, it would seem that even in my dreams I couldn’t escape this waking nightmare of a project.</p> <p>Eventually, though, the project did end (“successfully”, so that everyone saved face), and I began formulating an exit strategy.</p> <p>Not fast enough to beat the start of a new assignment, though, which was shaping up to be even worse than the previous one: the project owner was a horrid person who, among many terrible traits, could not seem to grasp the concept of using a <a href="https://en.wikipedia.org/wiki/Deployment_environment#Staging">staging environment</a> to preview the current state of a website being actively developed on.</p> <p>He insisted that <em>every page of the <strong>website</strong></em> be <strong><em>printed out on paper</em></strong> periodically, and <em>put in a <strong>3-ring binder</strong></em> for his review, where he would <em><strong>manually mark out “corrections”</strong> he wanted with a <strong>pen</strong></em>!</p> <p>I just…yeah, no thanks.</p> <p>Even without a new employer to join, I knew I was severely burnt out, and just needed to leave <em>immediately</em>. Regardless of my youth, I could not ignore the toll the work took on me physically, and spent the following few months recovering before even thinking of looking for a new job.</p> <p>The fire of the trenches may have forged some great friendships between myself and former colleagues that still last to this day, but I do regret giving so much to a company, while receiving so comparatively little in return, in order to achieve such an inconsequential objective, that was not appreciated, which then required me to use my own time to heal the damage it caused.</p> <p>Unlike the software we implemented, which is long gone, the visceral mental rulebook for work that resulted from my experience at the company continues to serve me well (and has collected a few more entries over the years). With regards to overwork, my rules are quite simple:</p> <ol> <li>Do not overwork. It is just not worth it.</li> <li>Do not violate Rule 1. If you are foolish enough to do so, the incentives received had better take into consideration all the opportunity costs of that extra work time, the impact to physical and mental health, and the time needed to recover: all of which are higher than you likely think, so go check yourself and read Rule 1 again.</li> </ol> <p>What cannot reasonably be done today, can be done tomorrow; work is never “done”. A contract for employment is not an agreement to indentured servitude. Charity is for charities and other good causes, not for-profit organisations.</p> <p>I hope that you keep your own relationship with work healthy, and can leverage this cautionary tale to avoid ever being “welcomed back”.</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>Issues that I can specifically remember with the system included:</p> <ul> <li>Display, formatting, and encoding issues related to <a href="https://en.wikipedia.org/wiki/DBCS">double-byte character sets</a> and <a href="https://en.wikipedia.org/wiki/Half-width_kana">half-width <em>kana</em></a> (imagine a system that had problems displaying, say, English capital letters…)</li> <li>Inability to relate <em><a href="https://en.wikipedia.org/wiki/Furigana">furigana</a></em> readings to <em><a href="https://en.wikipedia.org/wiki/Kanji">kanji</a></em>, meant ordering of words would be based on their <a href="https://en.wikipedia.org/wiki/Unicode">Unicode</a> <a href="https://en.wikipedia.org/wiki/Code_point">code points</a>, rather than their <em><a href="https://en.wikipedia.org/wiki/Goj%C5%ABon">gojūon</a></em> ordering (imagine a system that couldn’t sort words alphabetically…)</li> <li>Garbled text (<em><a href="https://en.wikipedia.org/wiki/Mojibake">mojibake</a></em>) display when attempting to send emails to early Japanese mobile phones (<a href="https://en.wikipedia.org/wiki/Gal%C3%A1pagos_syndrome#Mobile_phones">Galápagos phones</a>) due to not being able to handle <a href="https://en.wikipedia.org/wiki/Japanese_language_and_computers#Character_encodings">Japanese character encodings</a> like <a href="https://en.wikipedia.org/wiki/ISO/IEC_2022#ISO-2022-JP">ISO-2022-JP</a> (imagine a system that only sent out emails in <a href="https://en.wikipedia.org/wiki/Dingbat">dingbat</a> font…)</li> <li>Limited ability to customise the software product for their specific business processes (which smells to me like they were oversold on the software product’s <a href="https://en.wikipedia.org/wiki/Extensibility">extensibility</a>)</li> <li>Poorly translated Japanese documentation, if there was any at all</li> </ul> <p><a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="japan"/><category term="work"/><category term="overwork"/><category term="software"/><category term="japanization"/><category term="j10n"/><category term="feature-phones"/><category term="日本"/><category term="ガラケー"/><summary type="html"><![CDATA[A short story of overwork from the software trenches of Tokyo.]]></summary></entry><entry><title type="html">Flexbox Furigana</title><link href="https://www.paulfioravanti.com/blog/flexbox-furigana/" rel="alternate" type="text/html" title="Flexbox Furigana"/><published>2022-06-25T10:30:00+10:00</published><updated>2022-06-28T09:00:00+10:00</updated><id>https://www.paulfioravanti.com/blog/flexbox-furigana</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/flexbox-furigana/"><![CDATA[<p><em><a href="https://en.wikipedia.org/wiki/Furigana">Furigana</a></em> are annotations used to indicate the Japanese reading, or pronunciation, of Chinese <em><a href="https://en.wikipedia.org/wiki/Kanji">kanji</a></em> characters.</p> <p>As a simple example, let’s say we have a character like this<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>:</p> <div class="japanese-hero"> 車 </div> <p><em>Furigana</em> for the <em>kanji</em>, written with <em><a href="https://en.wikipedia.org/wiki/Hiragana">hiragana</a></em><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>, can be placed above it<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>:</p> <div class="japanese-hero" style="padding-top: 20px;"> <ruby lang="ja"> 車 <rp>(</rp> <rt style="ruby-align: center; text-align: center; font-size: medium;"> くるま </rt> <rp>)</rp> </ruby> </div> <p>This is all well and good for Japanese speakers, but what if I wanted English-speakers to be able to read along as well? This can be done by adding the character’s pronunciation using Latin script (<em><a href="https://en.wikipedia.org/wiki/Romanization_of_Japanese">romaji</a></em>) as another <em>furigana</em>-style annotation:</p> <div class="japanese-hero"> <ruby lang="ja" class="japanese"> <ruby lang="ja"> 車 <rp>(</rp> <rt style="ruby-align: center; text-align: center; font-size: medium;"> くるま </rt> <rp>, </rp> </ruby> <rt style="font-style: italic; font-size: medium;"> kuruma </rt> <rp>)</rp> </ruby> </div> <p>Okay, but what does this word actually mean? We could put an English translation to the right of the word, or pile on <em>yet another</em> annotation for the English meaning<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>:</p> <div class="japanese-hero"> <ruby lang="en" class="japanese"> <ruby lang="ja" class="japanese"> <ruby lang="ja"> 車 <rp>(</rp> <rt style="ruby-align: center; text-align: center; font-size: medium;"> くるま </rt> <rp>, </rp> </ruby> <rt style="font-style: italic; font-size: medium;"> kuruma </rt> <rp>, </rp> </ruby> <rt lang="en" style="font-weight: bold; text-align: center;"> car </rt> <rp>) </rp> </ruby> </div> <p>For single words, this “full-suite” of annotations could be considered acceptable, but for complete sentences, where the objective is to have a non-Japanese speaker read along <ruby lang="ja">phonetically<rp>(</rp><rt style="">fuh·neh·ti·kuh·lee</rt><rp>)</rp></ruby>, I think any translation needs its own dedicated section.</p> <p>I did exactly this in a previous blog post, <em><a href="https://www.paulfioravanti.com/blog/persons-character/">A Person’s Character (人という字は)</a></em>, where I wanted to show the <ruby lang="ja">pronunciation<rp>(</rp><rt style="">/pɹəˌnʌn.siˈeɪ.ʃən/</rt><rp>)</rp></ruby> and meaning of some lines of dialogue from the television drama <em><a href="https://en.wikipedia.org/wiki/Kinpachi-sensei">Kinpachi-sensei</a></em>. The intention was to enable English speakers to follow the Japanese dialogue using the <em>romaji</em> annotations, and <em>then</em> read the translation:</p> <blockquote> <div class="japanese-with-furigana-romaji"> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">君<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">きみ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> Kimi</rt> </ruby> <ruby lang="ja" class="japanese"> たち <rt class="romaji" style="font-size: 50%"> tachi</rt> </ruby> <ruby lang="ja" class="japanese"> いい <rt class="romaji" style="font-size: 50%"> ii</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu</rt> </ruby> <ruby lang="ja" class="japanese"> か <rt class="romaji" style="font-size: 50%"> ka~.</rt> </ruby> <ruby lang="ja" class="japanese"> 〜。 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> Hito</rt> </ruby> <ruby lang="ja" class="japanese"> と <rt class="romaji" style="font-size: 50%"> to</rt> </ruby> <ruby lang="ja" class="japanese"> いう <rt class="romaji" style="font-size: 50%"> iu</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">字<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">じ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> ji</rt> </ruby> <ruby lang="ja" class="japanese"> は <rt class="romaji" style="font-size: 50%"> wa</rt> </ruby> <ruby lang="ja" class="japanese"> ねぇ <rt class="romaji" style="font-size: 50%"> nē,</rt> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> ひとり <rt class="romaji" style="font-size: 50%"> hitori</rt> </ruby> <ruby lang="ja" class="japanese"> の <rt class="romaji" style="font-size: 50%"> no</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">「人」<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:8px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> "hito"</rt> </ruby> <ruby lang="ja" class="japanese"> が <rt class="romaji" style="font-size: 50%"> ga</rt> </ruby> <ruby lang="ja" class="japanese"> もう <rt class="romaji" style="font-size: 50%"> mō</rt> </ruby> <ruby lang="ja" class="japanese"> ひとり <rt class="romaji" style="font-size: 50%"> hitori</rt> </ruby> <ruby lang="ja" class="japanese"> の <rt class="romaji" style="font-size: 50%"> no</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">「人」<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:8px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> "hito"</rt> </ruby> <ruby lang="ja" class="japanese"> を <rt class="romaji" style="font-size: 50%"> o</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">支えて<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:3px;">ささ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> sasaete</rt> </ruby> <ruby lang="ja" class="japanese"> いる <rt class="romaji" style="font-size: 50%"> iru</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">字<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">じ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> ji</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu.</rt> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> <ruby lang="ja" class="japanese"> つまり <rt class="romaji" style="font-size: 50%"> Tsumari,</rt> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> と <rt class="romaji" style="font-size: 50%"> to</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> が <rt class="romaji" style="font-size: 50%"> ga</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-compound-word"> <ruby lang="ja" class="japanese"> <ruby lang="ja">支え<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:3px;">ささ</rt><rp>)</rp></ruby> <rt class="romaji" style="font-size: 50%"> sasae</rt> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">合ってる<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:8px;">あ</rt><rp>)</rp></ruby> <rt class="romaji" style="font-size: 50%"> atteru</rt> </ruby> </span> </ruby> <ruby lang="ja" class="japanese"> から <rt class="romaji" style="font-size: 50%"> kara</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> なん <rt class="romaji" style="font-size: 50%"> nan</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu.</rt> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> Hito</rt> </ruby> <ruby lang="ja" class="japanese"> は <rt class="romaji" style="font-size: 50%"> wa</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> に <rt class="romaji" style="font-size: 50%"> ni</rt> </ruby> <ruby lang="ja" class="japanese"> よって <rt class="romaji" style="font-size: 50%"> yotte</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">支えられ<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:3px;">ささ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> sasaerare,</rt> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> の <rt class="romaji" style="font-size: 50%"> no</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">間<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:5px;">あいだ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> aida</rt> </ruby> <ruby lang="ja" class="japanese"> で <rt class="romaji" style="font-size: 50%"> de</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人間<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:6px;">にんげん</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> ningen</rt> </ruby> <ruby lang="ja" class="japanese"> として <rt class="romaji" style="font-size: 50%"> toshite</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">磨かれて<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:4px;">みが</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> migakarete</rt> </ruby> <ruby lang="ja" class="japanese"> いくん <rt class="romaji" style="font-size: 50%"> ikun</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu.</rt> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> </div> <br/> Can I have your attention, please. So, the character for "person" consists of one person holding up and sustaining another person. In other words, it is a "person" precisely <em>because</em> a person and another person are supporting each other. A person gets support from other people and their community, and through that support, grows and develops as a human. </blockquote> <p>Figuring out the idiosyncrasies of how to mark-up and display all of these annotations in the way I wanted using <a href="https://en.wikipedia.org/wiki/HTML">HTML</a> and <a href="https://en.wikipedia.org/wiki/CSS">CSS</a>, and then developing a way to extract that logic out into functionality that could be shared across multiple <a href="https://daringfireball.net/projects/markdown/">Markdown</a>-based blog posts using <a href="https://shopify.github.io/liquid/">Liquid</a>, took me far more time than I expected, and became the catalyst for writing this particular blog post.</p> <p>So, the following is my <a href="https://en.wiktionary.org/wiki/brain_dump">brain dump</a> on what I learned about using annotations on the web.</p> <h2 id="annotation-markup">Annotation Markup</h2> <div class="centered-image" style="width: 60%;"> <figure style="margin-bottom: 0; margin-top: 20px;"> <img src="/assets/images/2022-06-25/Furigana_example.png" alt="Japanese word meaning 'furigana' with above smaller orange phonetic hiragana called 'furigana' helping to pronounce it."/> </figure> <figcaption style="margin-bottom: 0.75em;"> Image by Kang Seonghoon, Public domain, via <a href="https://commons.wikimedia.org/wiki/File:Furigana_example.svg"> Wikimedia Commons </a> </figcaption> </div> <p><em>Furigana</em> is a type of <a href="https://en.wikipedia.org/wiki/Ruby_character">Ruby character</a> annotation<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>, and is marked up in HTML using the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby"><code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code></a> tag.</p> <p>Searching the internet for how to mark-up <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> elements leads to a significant amount of conflicting information. The <a href="https://www.w3.org/TR/2001/REC-ruby-20010531/Overview.html.utf-8">W3 Ruby Annotation</a> document mentions a selection of markup tags that can appear inside a <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tag:</p> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt"><code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code></a>: ruby text (the annotation)</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp"><code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code></a>: ruby parenthesis (for when a browser does not support ruby annotations and the ruby text gets rendered inline)</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rb"><code class="language-plaintext highlighter-rouge">&lt;rb&gt;</code></a>: ruby base (the text that is being annotated)</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rtc"><code class="language-plaintext highlighter-rouge">&lt;rtc&gt;</code></a>: ruby text container (a container for <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> elements when markup is “complex”)</li> <li><code class="language-plaintext highlighter-rouge">&lt;rbc&gt;</code>: ruby base container (a container for <code class="language-plaintext highlighter-rouge">&lt;rb&gt;</code> elements when markup is “complex”)</li> </ul> <p>Each of the tag links in the list above is from the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML">Mozilla HTML documentation</a>, a trustworthy source for this kind of information (in my opinion), and they say that the <code class="language-plaintext highlighter-rouge">&lt;rb&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;rtc&gt;</code>, and <code class="language-plaintext highlighter-rouge">&lt;rbc&gt;</code> tags are <a href="https://en.wikipedia.org/wiki/Deprecation">deprecated</a>, and should be avoided. In order to future-proof <em>furigana</em> annotations, it would seem that only three tags should be used: container <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags, along with child <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tags.</p> <p>So, for the “car” <em>kanji</em> from the example above, <ruby lang="ja">車<rp>(</rp><rt style="">くるま</rt><rp>)</rp></ruby>, the markup could look like the following:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
  車
  <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;rt&gt;</span>くるま<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <blockquote> <p>What are those <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tags for? In the event that a browser does not support ruby annotations, the code above will display as:</p> <div class="japanese-hero" style="margin-top: -20px; font-size: xx-large;"> 車(くるま) </div> <figure style=" float: right; margin-bottom: 0; margin-left: 10px; margin-top: 10px; width: 40%; "> <img src="/assets/images/2022-06-25/browser-dev-tools.jpg" alt="Ruby &lt;rt&gt; tag base CSS styles in Chrome dev tools"/> </figure> <p>I could not find any built-in functionality that would force a modern browser to “pretend” it does not support annotations, but I was able to follow the <a href="https://www.w3.org/TR/css-ruby-1/#default-inline">Inlining Ruby Annotations</a> section of <a href="https://www.w3.org/TR/css-ruby-1/">CSS Ruby Annotation Layout Module</a>, and add styling via the browser developer tools to achieve the desired display behaviour:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">rp</span><span class="o">,</span> <span class="nt">rt</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">inline</span><span class="p">;</span>
  <span class="nl">white-space</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>
  <span class="nl">font</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>
  <span class="nl">text-emphasis</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div> </div> </blockquote> <p>Given that the <a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-ruby-element">HTML spec for the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> element</a> says that a <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tag can contain “one or more <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> elements”, you may be forgiven for thinking that adding the extra <em>romaji</em> annotation would be a case of perhaps appending it beneath the <em>furigana</em>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
  車
  <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;rt&gt;</span>くるま<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>, <span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;rt&gt;</span>kuruma<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero" style="padding-top: 40px;"> <ruby lang="ja"> 車 <rp>(</rp> <rt>くるま</rt> <rp>, </rp> <rt>kuruma</rt> <rp>)</rp> </ruby> </div> <p>Not great. We can, however, rearrange the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> child elements, and leverage CSS <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox">Flexbox</a> styling, to exhert more control over the visuals (we will keep styling <a href="https://www.w3schools.com/html/html_css.asp">inline</a> for demonstration purposes moving forward):</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column-reverse;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;rt&gt;</span>kuruma<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>, <span class="nt">&lt;/rp&gt;</span>
  車
  <span class="nt">&lt;rt&gt;</span>くるま<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style=" display: inline-flex; flex-direction: column-reverse; "> <rp>(</rp> <rt>kuruma</rt> <rp>, </rp> 車 <rt>くるま</rt> <rp>)</rp> </ruby> </div> <p>This displays in a similar way to the initial example at the beginning of the post (though the default gap between the <em>kanji</em> and <em>furigana</em> is a bit concerning…). However, I think the meaning behind the child elements of the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> parent tag have become muddled.</p> <p>What is annotating what? Is 車 annotating <em>kuruma</em>, along with くるま annotating 車? Technically, it seems these semantics are valid, but is there is another way to communicate the desired annotations via markup?</p> <blockquote> <p>Note, also, that we have headed into exploitation territory for the meaning of the <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tag to make sure that we get <strong>車(くるま, kuruma)</strong> displayed when annotations are not supported (commas are not parentheses, after all). I do not currently know of a “better” way to mark this up to allow for a similar kind of display.</p> </blockquote> <p>The code examples in the <a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-ruby-element">HTML spec for the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> element</a> show that “a nested <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> element” can be used for inner annotations. In our case, this could mean that the markup should indicate that:</p> <ul> <li>くるま annotates 車 (one <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> inner nested element)</li> <li><em>kuruma</em> annotates the <ruby lang="ja">車<rp>(</rp><rt style="">くるま</rt><rp>)</rp></ruby> compound (another <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> outer nesting element)</li> </ul> <p>Let’s see how this could look in markup:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    車
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>くるま<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>kuruma<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 車 <rp>(</rp> <rt>くるま</rt> <rp>)</rp> </ruby> <rt>kuruma</rt> </ruby> </div> <p>Looks acceptable to me, and I think the meaning of the markup is conveyed in a clearer way.</p> <blockquote> <p>Nesting <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags like this means we have to give up the ability to display the <em>furigana</em> and <em>romaji</em> together [<strong>車(くるま, kuruma)</strong>], when annotations are not supported. But, I am prepared to accept this compromise because the fallback display looks good enough for the rare times it will probably ever be viewed:</p> <div class="japanese-hero" style="font-size: xx-large;"> <div>車(くるま)</div> <div>kuruma</div> </div> </blockquote> <p>Before concluding that we have the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> markup and styling to use as a foundation to build with, let’s test it with a few other <em>kanji</em> scenarios.</p> <h2 id="single-word-multiple-kanji">Single Word, Multiple <em>Kanji</em></h2> <p>Not every word in Japanese can be written with a single <em>kanji</em>; many require multiple <em>kanji</em> together in a compound. So, let’s test the current markup’s display of <em>kanji</em> compounds by changing the “car” into an “automobile”:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    自動車
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>じどうしゃ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>jidōsha<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 自動車 <rp>(</rp> <rt>じどうしゃ</rt> <rp>)</rp> </ruby> <rt>jidōsha</rt> </ruby> </div> <p>This looks like it displays as expected. However, pedanticism is going to get the best of me here: even though the <em>furigana</em> is correct for the entire word, they <em>don’t quite</em> line up perfectly above the individual characters they are annotating the reading for.</p> <p>Let’s see if we can fix that by adding more <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code>/<code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tag sets:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    自
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>じ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    動
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>どう<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    車
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>しゃ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>
    jidōsha
  <span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 自 <rp>(</rp> <rt>じ</rt> <rp>)</rp> 動 <rp>(</rp> <rt>どう</rt> <rp>)</rp> 車 <rp>(</rp> <rt>しゃ</rt> <rp>)</rp> </ruby> <rt> jidōsha </rt> </ruby> </div> <p>Ah, much better! The difference may be minor, but I think it’s important!</p> <blockquote> <p>Doing this, unfortunately, “breaks” the <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> fallback display even more, as the <em>furigana</em> readings are now displayed broken down not by full word, but by character:</p> <div class="japanese-hero" style="font-size: xx-large;"> <div>自 (じ) 動 (どう) 車 (しゃ)</div> <div>jidōsha</div> </div> <p>At this point, I think attempting to handle the fallback display gracefully is going to be prioritised to a distant second compared to getting the <em>furigana</em> displaying well for “normal” modern browser usage.</p> </blockquote> <h2 id="single-word-alternating-kanji-and-kana">Single Word, Alternating <em>Kanji</em> and <em>Kana</em></h2> <p><a href="https://www.wasabi-jpn.com/japanese-grammar/japanese-compound-verbs/">Compound verbs</a> in Japanese are a good example of words that alternate between <em>kanji</em> and <em><a href="https://en.wikipedia.org/wiki/Kana">kana</a></em> in their construction. For example, in the annotations for the word <em>norikomu</em> (乗り込む), meaning “to get into (a vehicle)”, I would expect there to be <em>furigana</em> over 乗 and 込, but not over り or む. As for the <em>romaji</em>, I think a single annotation under the word would suffice.</p> <p>Let’s see if we can re-use the code from the <em>kanji</em> compound to achieve the effect we want:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    乗
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    り
    込
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    む
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>
    norikomu
  <span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> <rt> norikomu </rt> </ruby> </div> <p>Hmm, not quite right: that second <em>furigana</em> positioning is incorrect, and there is an awkward space between 乗り and 込む. Perhaps each half of this word needs to be its own <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> element? Let’s give that a try:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    乗
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    り
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    込
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    む
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>norikomu<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り </ruby> <ruby lang="ja"> 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> <rt>norikomu</rt> </ruby> </div> <p>The <em>furigana</em> positioning is fixed, but since we now have three child elements under the <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tag, the <code class="language-plaintext highlighter-rouge">flex-direction: column</code> styling is displaying them all vertically, which is not the result we want.</p> <p>In order to get them to display as one set, we will need to wrap a container around the 乗り and 込む <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags. Yet another <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tag seems like it could be overkill here, so, instead, let’s try a plain old <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span"><code class="language-plaintext highlighter-rouge">&lt;span&gt;</code></a> tag, and give it some Flexbox styling as well:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"display: inline-flex;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
      乗
      <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
      <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      り
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
      込
      <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
      <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      む
    <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;rt&gt;</span>norikomu<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <span style="display: inline-flex;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り </ruby> <ruby lang="ja"> 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> </span> <rt>norikomu</rt> </ruby> </div> <p>Looks good to me! If we <em>did</em> want to split the <em>romaji</em>, so the annotation was under each part of the word, we have the option of changing the tag nesting around to achieve that effect:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"display: inline-flex;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
      乗
      <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
      <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      り
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;rt&gt;</span>nori<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
      込
      <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
      <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      む
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;rt&gt;</span>komu<span class="nt">&lt;/rt&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
<span class="nt">&lt;/span&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <span style="display: inline-flex; justify-content: center;"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り </ruby> <rt>nori</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> <rt>komu</rt> </ruby> </span> </div> <p>Great! We now know there are options around the display for <em>romaji</em>, for potential readability and/or aesthetic reasons.</p> <h2 id="styled-furigana">Styled <em>Furigana</em></h2> <p>Speaking of aesthetics, does <em>furigana</em> still display as expected if the CSS <code class="language-plaintext highlighter-rouge">font-style</code> changes, like how everything gets italicised on this page when the content is within <code class="language-plaintext highlighter-rouge">&lt;blockquote&gt;</code> tags? Let’s find out with the phrase <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">自<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:0;">じ</rt><rp>)</rp></ruby> <ruby lang="ja">動<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:0;">どう</rt><rp>)</rp></ruby> <ruby lang="ja">車<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:0;">しゃ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> jidōsha</rt> </ruby><ruby lang="ja" class="japanese"> に <rt class="romaji" style="font-size: 50%"> ni</rt> </ruby><ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">乗り<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:5px;">の</rt><rp>)</rp></ruby> <ruby lang="ja">込む<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:7px;">こ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> norikomu</rt> </ruby> (“to get into the automobile”):</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;blockquote&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"align-items: baseline; display: inline-flex;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
        自
        <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
        <span class="nt">&lt;rt&gt;</span>じ<span class="nt">&lt;/rt&gt;</span>
        <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
        動
        <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
        <span class="nt">&lt;rt&gt;</span>どう<span class="nt">&lt;/rt&gt;</span>
        <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
        車
        <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
        <span class="nt">&lt;rt&gt;</span>しゃ<span class="nt">&lt;/rt&gt;</span>
        <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
      <span class="nt">&lt;/ruby&gt;</span>
      <span class="nt">&lt;rt&gt;</span>jidōsha<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
      に
      <span class="nt">&lt;rt&gt;</span>ni<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"display: inline-flex;"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
          乗
          <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
          <span class="nt">&lt;rt&gt;</span>の<span class="nt">&lt;/rt&gt;</span>
          <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
          り
        <span class="nt">&lt;/ruby&gt;</span>
        <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
          込
          <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
          <span class="nt">&lt;rt&gt;</span>こ<span class="nt">&lt;/rt&gt;</span>
          <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
          む
        <span class="nt">&lt;/ruby&gt;</span>
      <span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;rt&gt;</span>norikomu<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/blockquote&gt;</span>
</code></pre></div></div> <blockquote> <div class="japanese-hero"> <div style="align-items: baseline; display: inline-flex;"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 自 <rp>(</rp> <rt>じ</rt> <rp>)</rp> 動 <rp>(</rp> <rt>どう</rt> <rp>)</rp> 車 <rp>(</rp> <rt>しゃ</rt> <rp>)</rp> </ruby> <rt>jidōsha</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> に <rt>ni</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <span style="display: inline-flex;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt>の</rt> <rp>)</rp> り </ruby> <ruby lang="ja"> 込 <rp>(</rp> <rt>こ</rt> <rp>)</rp> む </ruby> </span> <rt>norikomu</rt> </ruby> </div> </div> </blockquote> <p>Well, it seems that annotations do not really understand italics; they look a tiny bit off, don’t they? It would be nice to be able to nudge them a bit to the right on an individual character basis.</p> <p>Luckily, this is a simple matter of just adding in some <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-align"><code class="language-plaintext highlighter-rouge">text-align</code></a> styling in the <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> tags:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;blockquote&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"..."</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"..."</span><span class="nt">&gt;</span>
      <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
        自
        <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
        <span class="nt">&lt;rt</span> <span class="na">style=</span><span class="s">"text-align: right;"</span><span class="nt">&gt;</span>じ<span class="nt">&lt;/rt&gt;</span>
        <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>
      <span class="nt">&lt;/ruby&gt;</span>
      <span class="nt">&lt;rt&gt;</span>jidōsha<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;/ruby&gt;</span>
    <span class="c">&lt;!-- ... --&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/blockquote&gt;</span>
</code></pre></div></div> <blockquote> <div class="japanese-hero"> <div style="align-items: baseline; display: inline-flex;"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> <span> 自 </span> <rp>(</rp> <rt style="text-align: right;">じ</rt> <rp>)</rp> <span> 動 </span> <rp>(</rp> <rt style="text-align: right;">どう</rt> <rp>)</rp> <span> 車 </span> <rp>(</rp> <rt style="text-align: right;">しゃ</rt> <rp>)</rp> </ruby> <rt>jidōsha</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> に <rt>ni</rt> </ruby> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <span style="display: inline-flex;"> <ruby lang="ja"> 乗 <rp>(</rp> <rt style="text-align: right;">の</rt> <rp>)</rp> り </ruby> <ruby lang="ja"> 込 <rp>(</rp> <rt style="text-align: right;">こ</rt> <rp>)</rp> む </ruby> </span> <rt>norikomu</rt> </ruby> </div> </div> </blockquote> <p>This looks a tiny bit better, though it seems to be more effective for single character <em>furigana</em> than those for compound characters. Pushing the <em>furigana</em> any further to the right would involve adding some <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left"><code class="language-plaintext highlighter-rouge">padding-left</code></a> attributes to the <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> tag (which could push the <em>kanji</em> into places you may not want), so feel free to experiment on getting the alignment just right for your tastes.</p> <p>Finally, let’s just confirm the markup works for some exceptional circumstances.</p> <h2 id="long-and-short-furigana">Long and Short <em>Furigana</em></h2> <p>There are some words in Japanese where up to five syllables can be represented by a single <em>kanji</em>. Let’s use the markup with <em>uketamawaru</em> a word that fits these conditions, and means “to be told” or “to receive (an order)”:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    承
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>うけたまわ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    る
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>uketamawaru<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 承 <rp>(</rp> <rt>うけたまわ</rt> <rp>)</rp> る </ruby> <rt>uketamawaru</rt> </ruby> </div> <p>I think this display is <em>okay</em>, given the awkwardness of the <em>furigana</em> to <em>kanji</em> ratio. But, that gap between 承 and る just seems too big to me, and makes me wonder whether allowing for more flexibility in the size of the <em>furigana</em> annotation would make it less unwieldy.</p> <p>Let’s see what happens if we give the <em>furigana</em> a smaller absolute CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size"><code class="language-plaintext highlighter-rouge">font-size</code></a> value:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    承
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt</span> <span class="na">style=</span><span class="s">"font-size: small;"</span><span class="nt">&gt;</span>うけたまわ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
    る
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>uketamawaru<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 承 <rp>(</rp> <rt style="font-size: small;">うけたまわ</rt> <rp>)</rp> る </ruby> <rt>uketamawaru</rt> </ruby> </div> <p>Much better, I think, and it can be adjusted to preference on a per-character basis.</p> <p>Now, what about the opposite scenario, when there are more <em>kanji</em> than <em>furigana</em> characters? This will only really happen with so-called <a href="https://en.wikipedia.org/wiki/Kanji#Special_readings">Special Readings</a>, which occur frequently with geographical or human names. So, let’s try the markup with a good example of this, the surname <em>Hozumi</em>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span> <span class="na">style=</span><span class="s">"display: inline-flex; flex-direction: column;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ruby</span> <span class="na">lang=</span><span class="s">"ja"</span><span class="nt">&gt;</span>
    八月一日
    <span class="nt">&lt;rp&gt;</span>(<span class="nt">&lt;/rp&gt;</span>
    <span class="nt">&lt;rt&gt;</span>ほずみ<span class="nt">&lt;/rt&gt;</span>
    <span class="nt">&lt;rp&gt;</span>)<span class="nt">&lt;/rp&gt;</span>
  <span class="nt">&lt;/ruby&gt;</span>
  <span class="nt">&lt;rt&gt;</span>Hozumi<span class="nt">&lt;/rt&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <div class="japanese-hero"> <ruby lang="ja" style="display: inline-flex; flex-direction: column;"> <ruby lang="ja"> 八月一日 <rp>(</rp> <rt>ほずみ</rt> <rp>)</rp> </ruby> <rt>Hozumi</rt> </ruby> </div> <p>I think this display of ほずみ<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup> looks fine. The spacing of the <em>furigana</em> may look a bit strange, but since there is no correlation between the annotation and the pronunciation of each individual <em>kanji</em>, having them spread out evenly across the top of the word, or center-aligned, is probably the most logical way to display them.</p> <h2 id="markup-reuse">Markup Reuse</h2> <p>As you can see from the chunky markup blocks above, annotations can take up a lot of coding space. Personally, I do not want to have to manually write <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags every time I want to insert a Japanese word with any kind of annotation into my blog posts, so I wanted a way to reuse that markup.</p> <p><a href="https://jekyllrb.com/">Jekyll</a> is the engine that currently powers this blog, and it allows the usage of <a href="https://shopify.github.io/liquid/">Liquid</a>, a templating language, which has enabled me to put <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> code into functions that take parameters to fine-tune how annotations should display. These functions are littered throughout the <a href="https://raw.githubusercontent.com/paulfioravanti/paulfioravanti.github.io/release/_posts/2022-06-25-flexbox-furigana.md">code for this blog post</a>, as well as other Japanese language-related posts, and fall into two main groups.</p> <h3 id="basic-ruby-tags">Basic Ruby Tags</h3> <p>These are functions that wrap around <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags for purposes of general annotation, and are not specific to Japanese (though they can certainly be used that way). Some examples used in this blog post that you may have noticed are:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>ruby.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"phonetically"</span><span class="w"> </span><span class="na">annotation</span><span class="o">=</span><span class="s2">"fuh·neh·ti·kuh·lee"</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>ruby.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"pronunciation"</span><span class="w"> </span><span class="na">annotation</span><span class="o">=</span><span class="s2">"/pɹəˌnʌn.siˈeɪ.ʃən/"</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>ruby.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"車"</span><span class="w"> </span><span class="na">annotation</span><span class="o">=</span><span class="s2">"くるま"</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div></div> <h3 id="ruby-tags-for-japanese">Ruby Tags for Japanese</h3> <p>There are also functions that take in parameters which allow all the fine-tuning customisations to <em>furigana</em> and <em>romaji</em> we have seen in the examples above, and are hence specific for use with Japanese. Under the hood, they all leverage the <code class="language-plaintext highlighter-rouge">{% include ruby.html %}</code> function. Some examples used in this post are:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>japanese.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"自,動,車"</span><span class="err">
</span><span class="w">                         </span><span class="na">furigana</span><span class="o">=</span><span class="s2">"じ,どう,しゃ"</span><span class="err">
</span><span class="w">                         </span><span class="na">romaji</span><span class="o">=</span><span class="s2">"jidōsha"</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>japanese.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"に"</span><span class="w"> </span><span class="na">romaji</span><span class="o">=</span><span class="s2">"ni"</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>japanese.html<span class="w"> </span><span class="na">word</span><span class="o">=</span><span class="s2">"乗り,込む"</span><span class="err">
</span><span class="w">                         </span><span class="na">furigana</span><span class="o">=</span><span class="s2">"の,こ"</span><span class="err">
</span><span class="w">                         </span><span class="na">romaji</span><span class="o">=</span><span class="s2">"norikomu"</span><span class="err">
</span><span class="w">                         </span><span class="na">furigana-align</span><span class="o">=</span><span class="s2">"left"</span><span class="err">
</span><span class="w">                         </span><span class="na">furigana-left-padding</span><span class="o">=</span><span class="s2">"5px,7px"</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div></div> <p>Going through the details of these functions is something I will leave up to the interested reader<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup>. You can find all the code in the <a href="https://github.com/paulfioravanti/paulfioravanti.github.io/tree/release/_includes"><code class="language-plaintext highlighter-rouge">_includes/</code> directory</a> of this blog’s codebase.</p> <h2 id="much-ado-about-annotations">Much Ado About Annotations</h2> <p>For such small text, the coding, display, debugging, and <a href="https://en.wikipedia.org/wiki/Code_refactoring">refactoring</a> of <em>furigana</em> has taken up a significant amount of my time and brain space. However, I still do not <em>really</em> know if I am doing it “right”.</p> <p>The developers over at the <a href="https://japanese.stackexchange.com/">Japanese Language Stack Exchange</a>, whom I assume are experts at all things Japanese for the web, would seem to eschew <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> tags for <code class="language-plaintext highlighter-rouge">&lt;span&gt;</code> tags in order to represent <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;rb&gt;</code> values for their cool <em>furigana</em> pop-ups:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ruby</span> <span class="na">title=</span><span class="s">""</span> <span class="na">class=</span><span class="s">"ruby-rp popups"</span> <span class="na">style=</span><span class="s">"..."</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"rb"</span><span class="nt">&gt;</span>終幕<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"rt"</span> <span class="na">style=</span><span class="s">"..."</span><span class="nt">&gt;</span>さいご<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/ruby&gt;</span>
</code></pre></div></div> <p>However, <a href="https://www3.nhk.or.jp/news/easy/">NHK Easy News</a> <em>does</em> use <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;rt&gt;</code> tags in the same way as the examples in this post. However, they, too, have opted to not use <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code> tags (perhaps they considered them to be legacy/unnecessary…?).</p> <p><a href="https://news.yahoo.co.jp/">Yahoo News Japan</a> does not support <em>furigana</em> annotations at all, preferring instead to display <code class="language-plaintext highlighter-rouge">&lt;rp&gt;</code>-style parenthesised <em>kanji</em> readings inline (perhaps because they are a bit <a href="https://en.wikipedia.org/wiki/Web_2.0#Web_1.0">Web 1.0</a>-in-the-tooth, and still want to support browsing on <ruby lang="ja"><a href="https://en.wikipedia.org/wiki/Gal%C3%A1pagos_syndrome#Mobile_phones">Galápagos phones</a><rp>(</rp><rt style="text-align: center">ガラケー</rt><rp>)</rp></ruby>, which display pages using <a href="https://en.wikipedia.org/wiki/I-mode">cHTML</a>, a subset of HTML that <a href="https://www.docomo.ne.jp/service/developer/make/content/browser/html/tag/">does not support <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code> tags</a>).</p> <p>Regardless, this post represents everything I think I know about <em>furigana</em> for the web, and now you know it, too. If new information comes up, or the specification for use of <code class="language-plaintext highlighter-rouge">&lt;ruby&gt;</code>-related tags changes, I am definitely happy to revise any content. If there is something I have missed, please reach out and let me know!</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>All Japanese character displays were confirmed to work as expected on <a href="https://www.google.com/chrome/">Google Chrome</a>. So, if you use another browser, and explanations do not quite match the display, that would be why. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p><em>Hiragana</em> is generally used for <em>furigana</em>, but you can also see <em><a href="https://en.wikipedia.org/wiki/Katakana">katakana</a></em> used to annotate some <a href="https://en.wikipedia.org/wiki/Furigana#Names">surnames and place names</a>, as well as convey <a href="https://en.wikipedia.org/wiki/Furigana#Punning_and_double_meaning">double meanings and linguistic puns</a>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3" role="doc-endnote"> <p>Placed above when the <em>kanji</em> is written left-to-right horizontally (<em><a href="https://en.wikipedia.org/wiki/Horizontal_and_vertical_writing_in_East_Asian_scripts#Japanese">yokogaki</a></em>), but placed to the right when written right-to-left vertically (<em><a href="https://en.wikipedia.org/wiki/Horizontal_and_vertical_writing_in_East_Asian_scripts#Japanese">tategaki</a></em>). <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4" role="doc-endnote"> <p>Or, you could use a browser extension like <a href="https://addons.thunderbird.net/en-us/firefox/addon/rikaichan/">Rikaichan</a> or <a href="https://chrome.google.com/webstore/detail/rikaikun/jipdnfibhldikgcjhfnomkfpcebammhp?hl=en">Rikaikun</a>, which display pop-up kanji readings and English translations when you mouse over them, making any lack of annotations irrelevant. For purposes of this post, we’ll pretend they do not exist (I still absolutely recommend using them, though!). <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:5" role="doc-endnote"> <p>The name of which is from an old British typography type that had a height of 5.5 <a href="https://en.wikipedia.org/wiki/Point_(typography)">points</a>, and not to be confused with anything related to the <a href="https://www.ruby-lang.org/en/">Ruby</a> programming language. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:6" role="doc-endnote"> <p>As well as <ruby lang="ja" class="japanese"> ほずみ <rt class="romaji" style="font-size: 50%"> Hozumi</rt> </ruby>, 八月一日 can be read as <ruby lang="ja" class="japanese"> ほづみ <rt class="romaji" style="font-size: 50%"> Hozumi</rt> </ruby>, <ruby lang="ja" class="japanese"> やぶみ <rt class="romaji" style="font-size: 50%"> Yabumi</rt> </ruby>, and <ruby lang="ja" class="japanese"> はっさく <rt class="romaji" style="font-size: 50%"> Hassaku</rt> </ruby>. <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:7" role="doc-endnote"> <p>It was tough to keep my own interest up with Liquid since I found using it so frustrating, even after changing my mindset to thinking of it as <a href="https://ideawrights.com/shopify-associative-arrays/">“smart HTML rather than dumb Ruby”</a>. Nevertheless, I got what I wanted in the end after significant trial and error; hopefully, you can save yourself some time and irritation by using the code if you have similar use cases. <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="japan"/><category term="japanese"/><category term="日本語"/><category term="振り仮名"/><category term="ふりがな"/><category term="annotation"/><summary type="html"><![CDATA[Styling _kanji_ readings is a big subject for such small text.]]></summary></entry><entry><title type="html">AppleScript Records: Strings as Keys</title><link href="https://www.paulfioravanti.com/blog/applescript-records-string-keys/" rel="alternate" type="text/html" title="AppleScript Records: Strings as Keys"/><published>2022-06-10T14:30:00+10:00</published><updated>2022-06-14T10:15:00+10:00</updated><id>https://www.paulfioravanti.com/blog/applescript-records-string-keys</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/applescript-records-string-keys/"><![CDATA[<p>I am a <a href="https://en.wikipedia.org/wiki/MacOS">macOS</a> user, and my attempts at creating programs to control my computer have necessitated working with <a href="https://en.wikipedia.org/wiki/AppleScript">AppleScript</a>. Like every programming language, it has its idiosyncrasies, but one in particular sent me down a <a href="https://en.wiktionary.org/wiki/rabbit_hole">rabbit hole</a>, which I hope this post can help you avoid should you find yourself in similar circumstances.</p> <p>Many programming languages have a built-in <a href="https://en.wikipedia.org/wiki/Key%E2%80%93value_database">key-value</a> data structure, which are known by different names: <a href="https://ruby-doc.org/core/Hash.html">hashes</a>, <a href="https://hexdocs.pm/elixir/Map.html">maps</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">objects</a>, <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a> etc. The AppleScript structure equivalent is called a <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_classes.html#//apple_ref/doc/uid/TP40000983-CH1g-BBCDGEAH">record</a>, and they look outwardly similar to those of other languages:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nv">product</span><span class="p">:</span><span class="s2">"pen"</span><span class="p">,</span><span class="w"> </span><span class="nv">price</span><span class="p">:</span><span class="mf">2.34</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>However, a big difference is that while many other languages will allow you to use any kind of data type as a key (<a href="https://en.wikipedia.org/wiki/String_(computer_science)">strings</a>, <a href="https://en.wikipedia.org/wiki/Integer">integers</a> etc), record keys can only be <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_fundamentals.html#//apple_ref/doc/uid/TP40000983-CH218-SW5">Properties</a>, which are <a href="http://books.gigatux.nl/mirror/applescriptdefinitiveguide/applescpttdg2-CHP-13-SECT-11.html">“effectively tokens created by AppleScript at compile time”</a>, and essentially act like <a href="https://en.wikipedia.org/wiki/Constant_(computer_programming)">constants</a> (which also means there’s no chance to, say, “<a href="https://api.rubyonrails.org/classes/String.html#method-i-constantize">constantize</a>” a string received at run time). Therefore, this kind of record is not legal:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="s2">"product"</span><span class="p">:</span><span class="s2">"pen"</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">:</span><span class="mf">2.34</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>The result of this is that a script must always know in advance what keys it plans to use to look up values in a record: no lookup is possible using, say, some variable that references a string.</p> <p>This is unfortunate, because I wanted to perform dynamic lookups on a record by fetching values from it based on some string I would receive from the result of a <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH">handler</a> (function) call. Here is a code snippet indicating what I <em>attempted</em> to write in order to perform a “zoom in”, which would send different shortcut keystrokes depending on what application was currently in focus:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Chrome Zoom In keyboard shortcut is ⌘+, while Postman is ⌘=</span><span class="w">
</span><span class="c1"># NOTE: This record will raise a syntax error.</span><span class="w">
</span><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="s2">"Google Chrome"</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Postman"</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">
</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="c1"># returns a string like "Google Chrome" for the application currently in focus</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="c1"># Fetch the appropriate "zoom in" value from the record based on the `activeApp` key</span><span class="w">
</span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w">

</span><span class="c1"># Perform the keyboard shortcut</span><span class="w">
</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span></code></pre></div></div> <p>I initially thought that perhaps the reason for the error was because the record key properties follow the rules of <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_lexical_conventions.html#//apple_ref/doc/uid/TP40000983-CH214-SW4">Identifiers</a>, which have a limited set of characters they are allowed to use (that do not include spaces). But…</p> <blockquote> <p>“AppleScript provides a loophole […]: identifiers whose first and last characters are vertical bars (|) can contain any characters”.</p> </blockquote> <p>So, I figured that changing the record definition to:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">|</span><span class="nv">Google</span><span class="w"> </span><span class="nv">Chrome</span><span class="err">|</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="err">|</span><span class="nv">Postman</span><span class="err">|</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>or</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">|</span><span class="s2">"Google Chrome"</span><span class="err">|</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="err">|</span><span class="s2">"Postman"</span><span class="err">|</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>would work. Alas, they did not. The workaround for getting this code running correctly was to fall back to a traditional <code class="language-plaintext highlighter-rouge">if</code> statement:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">

</span><span class="k">if</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="s2">"Google Chrome"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="s2">"+"</span><span class="w">
</span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="s2">"Postman"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="s2">"="</span><span class="w">
</span><span class="k">else</span><span class="w">
  </span><span class="nb">display</span><span class="w"> </span><span class="nv">notification</span><span class="w"> </span><span class="s2">"Cannot zoom in"</span><span class="w"> </span><span class="nv">with</span><span class="w"> </span><span class="na">title</span><span class="w"> </span><span class="s2">"Error"</span><span class="w">
  </span><span class="nb">return</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">if</span><span class="w">

</span><span class="c1"># Perform the keyboard shortcut</span><span class="w">
</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span></code></pre></div></div> <p>At this point, the sane thing to do is to accept that you now have working code that is fit for purpose, and move on.</p> <p>But, I could not shake the feeling that there <em>must</em> be a way for string keys to work, even though hours of internet searching turned up nothing. How could every other programming language I know of do this, but not AppleScript? It did not make sense to me.</p> <p>So, I asked the <a href="https://twitter.com">bird site</a> in a <a href="https://twitter.com/paulfioravanti/status/1517743540784168960?s=20&amp;t=ai1eJAVRQpkoQ2bwoL8W0Q">last ditch attempt</a>, and it delivered in the form of <a href="http://piyocast.com/as/">Takaaki Naganoya</a>, whose efforts in creating a <a href="https://twitter.com/Piyomaru/status/1517769013488918528">solution</a> using the <a href="https://developer.apple.com/documentation/foundation">Foundation</a> framework led me to be able to change the original code to:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">use</span><span class="w"> </span><span class="nb">AppleScript</span><span class="w"> </span><span class="nb">version</span><span class="w"> </span><span class="s2">"2.4"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">framework</span><span class="w"> </span><span class="s2">"Foundation"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">scripting</span><span class="w"> </span><span class="nv">additions</span><span class="w">

</span><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">|</span><span class="nv">Google</span><span class="w"> </span><span class="nv">Chrome</span><span class="err">|</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="err">|</span><span class="nv">Postman</span><span class="err">|</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">

</span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKeysDict</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="se">¬
</span><span class="w">    </span><span class="nb">current application</span>'s <span class="nv">NSDictionary</span>'s <span class="nv">dictionaryWithDictionary</span><span class="p">:</span><span class="nv">zoomInKeys</span><span class="w">

</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">

</span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="p">(</span><span class="nv">zoomInKeysDict</span>'s <span class="nv">valueForKey</span><span class="p">:</span><span class="nv">activeApp</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nv">anything</span><span class="w">

</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span></code></pre></div></div> <p>Now, this code <em>works</em>. But, the <a href="https://en.wiktionary.org/wiki/shotgun_approach">shotgun approach</a> of bringing in a whole framework and other random handlers just to solve this small problem, coupled with the awkward readability of some of the <a href="https://en.wikipedia.org/wiki/API">API</a>s (looking at you, <code class="language-plaintext highlighter-rouge">dictionaryWithDictionary</code>), means that I think the code is now more difficult to understand, for very negligible benefit. So, <code class="language-plaintext highlighter-rouge">if</code> statements it is.</p> <p>If I wanted to dive even further down the rabbit hole, I could have attempted adapting Takaaki’s <a href="https://twitter.com/Piyomaru/status/1517770289597513730">other solution</a> to the same problem, which was done in vanilla AppleScript, without using Foundation. But, at this point, I think I’m good.</p> <p>If you are interested in seeing how I ended up using AppleScript for my own use case of mapping <a href="https://en.wikipedia.org/wiki/Stenotype">stenography</a> chords to macOS keyboard shortcuts, check out my <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/src/command">steno dictionaries GitHub repository</a>.</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="hash"/><category term="dictionary"/><category term="apple"/><category term="scripting"/><summary type="html"><![CDATA[Not as straightforward as you may think.]]></summary></entry><entry><title type="html">Steno Gaming: Doom Typist</title><link href="https://www.paulfioravanti.com/blog/steno-gaming-doom-typist/" rel="alternate" type="text/html" title="Steno Gaming: Doom Typist"/><published>2022-06-07T22:41:00+10:00</published><updated>2022-07-06T17:40:00+10:00</updated><id>https://www.paulfioravanti.com/blog/steno-gaming-doom-typist</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/steno-gaming-doom-typist/"><![CDATA[<p>Playing games is a great way to get better at <a href="https://en.wikipedia.org/wiki/Touch_typing">touch typing</a> with a <a href="https://en.wikipedia.org/wiki/QWERTY">standard keyboard</a>.</p> <p>A quick web search for typing games will likely net you results including <a href="https://en.wikipedia.org/wiki/Mavis_Beacon_Teaches_Typing">Mavis Beacon</a> mini-games, web-based shooters like <a href="https://zty.pe/">ZType</a>, and thoughtful adventure games like <a href="https://en.wikipedia.org/wiki/Epistory_-_Typing_Chronicles">Epistory - Typing Chronicles</a>. <a href="https://en.wikipedia.org/wiki/Stenotype">Stenography</a> enthusiasts have some extra options, with games specifically developed for them, like the free-to-play <a href="http://qwertysteno.com/Games/CargoCrisis.php">Cargo Crisis</a> and <a href="http://www.foralltoplay.com/games/steno-arcade/index.php">Steno Arcade</a>.</p> <p>Probably one of the most quirky typing games around is the on-rails shooter <a href="https://en.wikipedia.org/wiki/The_Typing_of_the_Dead">The Typing of the Dead</a>, an official <a href="https://en.wikipedia.org/wiki/Video_game_modding">mod</a> of <a href="https://en.wikipedia.org/wiki/The_House_of_the_Dead">The House of the Dead</a>. Alas, I do not have an old enough computer to play it at home, nor a <a href="https://en.wikipedia.org/wiki/Microsoft_Windows">Windows</a> machine to attempt its modern sequel, <a href="https://en.wikipedia.org/wiki/The_House_of_the_Dead:_Overkill">The Typing of the Dead: Overkill</a>. So, I will have to <a href="https://dictionary.cambridge.org/dictionary/english/take-a-rain-check-on-sth">take a rain check</a> on chording through those particular zombie swarms, but are there any similar alternatives?</p> <p>There most certainly are. Modders have gifted us with what I think is currently the best typing game of them all: <a href="https://github.com/mmaulwurff/typist.pk3">Typist.pk3</a><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, a “mod for <a href="https://en.wikipedia.org/wiki/Doom_(1993_video_game)">Doom</a> [1993] engine games that turns them into typing exercises”. “Doom engine games” are ones that can run inside a Doom <a href="https://zdoom.org/wiki/Source_port">source port</a> like <a href="https://zdoom.org/wiki/GZDoom">GZDoom</a> (eg Doom, <a href="https://en.wikipedia.org/wiki/Doom_II">Doom II</a>, <a href="https://en.wikipedia.org/wiki/Heretic_(video_game)">Heretic</a>, <a href="https://en.wikipedia.org/wiki/Hexen:_Beyond_Heretic">Hexen</a>, and <a href="https://doom.fandom.com/wiki/List_of_notable_WADs">others</a>).</p> <p>Here is a video of me doing some off-rails shooting with Doom Typist, using a <a href="https://www.gboards.ca/product/georgi">Georgi</a> stenographic keyboard.</p> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/OWnSjpOIT8s" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Doom Typist - Episode 1 Map 1 </figcaption> </div> <p>Want to give it a try yourself? Read on!</p> <p>If you are a <a href="https://en.wikipedia.org/wiki/QWERTY">QWERTY</a> typist, you will not have to worry about any steno-keyboard-related technical details below. You can just:</p> <ul> <li><a href="https://zdoom.org/downloads">Install GZDoom</a></li> <li>Buy a copy of Doom (<a href="https://www.gog.com/en/game/the_ultimate_doom">GOG.com</a> [<a href="https://en.wikipedia.org/wiki/Microsoft_Windows">Windows</a>, but with options to use with other platforms], <a href="https://store.steampowered.com/app/2280/Ultimate_Doom/">Steam</a> [Windows only])</li> <li><a href="https://zdoom.org/wiki/Installation_and_execution_of_ZDoom">Follow the instructions</a> to get Doom up and running with GZDoom, including extracting the <a href="https://doomwiki.org/wiki/WAD">WAD</a> game file from your copy of Doom</li> <li><a href="https://github.com/mmaulwurff/typist.pk3/releases">Download the latest Typist release</a>, and load it with GZDoom</li> <li>Bail out from the rest of this post, and enjoy your new typing game!</li> </ul> <blockquote> <p>The previous two blog posts to this one were both specifically written in service to, and as background context for, this post (though they are also meant to stand on their own):</p> <ul> <li><em><a href="https://www.paulfioravanti.com/blog/classic-doom-mac/">Play Classic Doom on a Mac</a></em></li> <li><em><a href="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/">Flashing Georgi Firmware</a></em></li> </ul> <p>Hopefully, you will find the answers to any specific questions this post does not answer in either one of them.</p> </blockquote> <hr/> <p>Still here? Okay, so I would wager that you are probably a <a href="https://www.openstenoproject.org/plover/">Plover</a> steno enthusiast, and maybe also a Georgi user. You may have noticed a fair bit of non-standard keystroke <a href="https://dictionary.cambridge.org/dictionary/english/shenanigans">shenanigans</a> going on in the video. Do not fret, though: although we will be getting technical (ie editing <a href="https://en.wikipedia.org/wiki/Firmware">firmware</a>), all customisations will be revealed so that you, too, can chord your way through Doom smoother than <a href="https://doom.fandom.com/wiki/Chainsaw">chainsaw</a>-ing through an <a href="https://doom.fandom.com/wiki/Imp">imp</a>!</p> <p>So, prepare your <a href="https://evildead.fandom.com/wiki/Boomstick">boomstick</a> and let’s begin!</p> <div class="centered-image" style="width: 75%"> <figure> <img src="/assets/images/2022-06-07/follow_your_dreams_by_azakachi_rd_17_d6of6bm.jpg" alt="Doom: Follow Your Dreams"/> <figcaption> Art by <a href="https://www.deviantart.com/azakachi-rd-17"> AzakaChi-RD-17 </a> on <a href="https://www.deviantart.com/azakachi-rd-17/art/Follow-your-dreams-403815874"> Deviant Art </a> </figcaption> </figure> </div> <h2 id="between-two-worlds">Between Two Worlds</h2> <p>A steno gamer cannot game in steno mode alone. Open up Doom, and you can navigate the menus using your arrow key chords, but when you start the game, you will likely find your <a href="https://en.wikipedia.org/wiki/Player_character">player character</a> unable to move, regardless of what keys you press. This is because:</p> <ul> <li>“Plover’s text and formatting strokes <a href="https://github.com/openstenoproject/plover/wiki/Dictionary-Format#keyboard-shortcuts">can’t send arbitrary key strokes</a>”, which means Plover cannot “press”, say, arrow keys or the Return key, in the same way as a QWERTY keyboard does: it only <em>simulates</em> the key presses. Unfortunately, GZDoom does not seem to recognise these “simulated key presses” during gameplay<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></li> <li>Stenotype is not really optimised for sending the <a href="https://en.wikipedia.org/wiki/Arrow_keys#WASD_keys">WASD</a>-style repeating key presses needed for movement in games<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup></li> </ul> <p>But! Lucky for Georgi owners, <a href="https://github.com/qmk/qmk_firmware/tree/master/keyboards/gboards/georgi">its firmware</a> has a <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#entering-qmk-gaming-mode">Gaming mode</a> that “acts like a traditional [QWERTY] keyboard, as opposed to stenotype”, enabling <em>real</em> keystrokes and key repetition (Georgi’s <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#modes">QWERTY mode</a> [not the same as Gaming mode] acts like stenotype, so we cannot game with it).</p> <p>For playing Doom Typist with steno on a Georgi, this means you can:</p> <ul> <li>Use Gaming Mode when you are in <span style="color: blue">Exploration Mode</span> (walking around, opening doors, flipping switches) <img src="/assets/images/2022-06-07/exploration-mode.jpg" alt="Exploration Mode" title="Exploration Mode" width="12%"/></li> <li>Use Steno Mode when you are in <span style="color: red">Combat Mode</span> (typing answers to hit your targets, dashing) <img src="/assets/images/2022-06-07/combat-mode.jpg" alt="Combat Mode" title="Combat Mode" width="30%"/></li> </ul> <p>I have found some of the challenges around having one foot in steno-land, and the other in standard-keyboard-land, within a high-tension environment that requires quick reflexes to be:</p> <ul> <li>remembering which typing mode you are in: Steno or Gaming (unlike the <span style="color: blue">Exploration</span>/<span style="color: red">Combat </span>game mode colour difference, there is no visual cue for your current typing mode<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>)</li> <li>remembering to <em>actually</em> change from Gaming to Steno mode when the game automatically switches you from <span style="color: blue">Exploration</span> to <span style="color: red">Combat</span> Mode upon encountering an enemy</li> <li>remembering to dash away when sudden close encounters with enemies occur (and which typing mode allows that)</li> </ul> <p>The customisations I made to my Georgi layout, in both Steno and Gaming layers, and the way I set up my player control scheme, helped at least part way in overcoming these challenges (getting the full way will probably just require continued practice to <a href="https://en.wiktionary.org/wiki/git_gud">git gud</a>).</p> <p>So, here’s the full list of everything I have done so far to make playing Doom steno-able.</p> <blockquote> <p>You can find the code encompassing all of the changes explained in detail below in my <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">Georgi QMK keymaps GitHub repository</a>.</p> </blockquote> <h2 id="controls">Controls</h2> <p>Setting up controls for Doom Typist was a more involved matter than I originally planned for.</p> <p>GZDoom, the Doom source port, plays more than just Doom itself: it provides a very robust selection of <a href="https://zdoom.org/wiki/Customize_controls">control mappings</a> that can be used across a variety of games. Mapping them all to Georgi keymaps is not a task I want to undertake right now, so I used Doom’s original instruction booklet to help filter down all the options to the ones that high-school me would have actually used during gameplay.</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/doom-manual-controls.jpg" alt="Doom Manual Controls"/> <figcaption> Commands and Shortcuts section from the original <a href="https://www.starehry.eu/download/action3d/docs/Doom-Manual.pdf"> Doom Manual </a> </figcaption> </figure> </div> <p>All of pink-outlined controls above will need to be mapped in Georgi’s Gaming mode. I do not intend to make one-to-one mappings of the keys to their literal equivalents in the Gaming mode keymaps, but rather focus on what form of key patterns would feel intuitive and comfortable for the controls.</p> <p>This will all be very subjective, so hopefully they can serve as a template for you to create your own custom control schemes if you have other ideas.</p> <blockquote> <p>You can see what the literal Gaming Mode keys look like in the <a href="https://github.com/qmk/qmk_firmware/blob/89a5d5aea095172c23b6e886217078ffe404ecec/keyboards/gboards/georgi/keymaps/default/keymap.c#L233">Georgi default Gaming keymaps</a>, and compare them to <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/4881b7ace9403a9fbdf0ece09a18f0916c4a8a01/keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c#L418">my personal ones</a>). The literal <code class="language-plaintext highlighter-rouge">KC_*</code> keycodes you will see referenced from here on in code examples are based on my personal keymaps.</p> </blockquote> <h3 id="movement-and-actions">Movement and Actions</h3> <p>The way I configured movement is based on <a href="https://en.wikipedia.org/wiki/Arrow_keys#ESDF_keys">ESDF keys</a> on the left side, and <a href="https://en.wikipedia.org/wiki/Vi">Vi</a>-style <a href="https://en.wikipedia.org/wiki/Arrow_keys#HJKL_keys">HJKL keys</a> on the right.</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/movement-controls.png" alt="Doom Georgi Movement Controls"/> </figure> </div> <p>Unlike Heretic or Hexen, Doom does not have the concept of “look up/down” (though many of its mods do…), so the two keys between Look Left and Look Right remain blank until I play a game that uses them. Firing weapons, opening doors and toggling switches (“Use”), and Toggle Automap all felt like thumb cluster keys, so that is where they reside. As for “running” and “fast turning”, I decided to combine them all together into a “Toggle Run” chord deliberately meant to be a complex enough set of keys that I would not inadvertently press by mistake.</p> <p>Those keys get mapped in-game on the Customize Action Controls screen:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/customize-action-controls.jpg" alt="GZDoom Customize Action Controls"/> <figcaption> Stripped down action controls </figcaption> </figure> </div> <p>The Toggle Run chord is implemented as a <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/feature_combo.md">QMK Combo</a>, since it is a non-steno chord for standard keyboards that lives in the Gaming mode layer, and is hence outside of Plover’s purview. Defining combos consists of the following three main steps:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// STEP 1: Give the combos names.</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
  <span class="c1">// ...</span>
  <span class="n">DOOM_TYPIST_TOGGLE_RUN</span>
<span class="p">};</span>

<span class="c1">// STEP 2: Define the set of keys for the combos.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_toggle_run_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_U</span><span class="p">,</span> <span class="n">KC_I</span><span class="p">,</span> <span class="n">KC_O</span><span class="p">,</span> <span class="n">KC_P</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="c1">// STEP 3: Define what keystroke the combos should send,</span>
<span class="c1">// and register them in `key_combos`.</span>
<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_TOGGLE_RUN</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_toggle_run_combo</span><span class="p">,</span> <span class="n">KC_TAB</span><span class="p">)</span>
<span class="p">};</span>
</code></pre></div></div> <blockquote> <p>In <em><a href="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/">Flashing Georgi Firmware</a></em>, I go into more detail about <a href="https://qmk.fm/">QMK</a> Combos for Georgi. Even more detail than that can be found in <em><a href="https://www.paulfioravanti.com/blog/chording-qwerty-qmk-combos/">Chording QWERTY with QMK Combos</a></em>.</p> </blockquote> <p>For <em>every</em> combo change, you <em>must</em> change the <code class="language-plaintext highlighter-rouge">COMBO_COUNT</code> counter in your <code class="language-plaintext highlighter-rouge">config.h</code> file to match the number of combos in <code class="language-plaintext highlighter-rouge">key_combos</code>, otherwise you will get compilation errors. For my configuration, this looks like:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/config.h</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
<span class="cp">#define COMBO_COUNT 44
</span></code></pre></div></div> <p>We will see where all those other combos came from very soon.</p> <h3 id="weapon-selection">Weapon Selection</h3> <p>Each weapon in Doom is assigned a number, so I wanted to be able to use the steno number chords for 0-9 to select them, even in Gaming mode.</p> <div class="centered-image" style="width: 70%"> <figure> <img src="/assets/images/2022-06-07/georgi-numbers-small-looping.gif" alt="Georgi Numbers 0-9"/> <figcaption> Steno number chords for 0-9 using the <kbr>#</kbr> modifier key </figcaption> </figure> </div> <blockquote> <p>See <em><a href="https://www.paulfioravanti.com/blog/steno-numbers-georgi/">Stenography Numbers on a Georgi</a></em> for more information about number chords.</p> </blockquote> <p>In the <a href="https://github.com/qmk/qmk_firmware/blob/89a5d5aea095172c23b6e886217078ffe404ecec/keyboards/gboards/georgi/keymaps/default/keymap.c#L233">Georgi default Gaming keymaps</a>, number keystrokes live in Gaming Layer 2. To get from Gaming Layer 1 (<code class="language-plaintext highlighter-rouge">GAMING</code>) to Gaming Layer 2 (<code class="language-plaintext highlighter-rouge">GAMING_2</code>), the layout has a key that uses the QMK <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#switching-and-toggling-layers-idswitching-and-toggling-layers"><code class="language-plaintext highlighter-rouge">LT(layer, kc)</code></a> function, which “momentarily activates <code class="language-plaintext highlighter-rouge">layer</code> when held, and sends <code class="language-plaintext highlighter-rouge">kc</code> when tapped”. In order to mimic steno number functionality, I assigned keystrokes that call that function to the keys that are assigned to the number keys (<code class="language-plaintext highlighter-rouge">#</code>) on Georgi’s steno layer:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/number-chords.png" alt="Momentarily active Gaming Layer 2 to access number keys"/> </figure> </div> <p>For <code class="language-plaintext highlighter-rouge">GAMING_2</code> access to numbers, we do not need to care too much about the <code class="language-plaintext highlighter-rouge">kc</code> for number access (feel free to assign any key to this: I used left and right brackets, <code class="language-plaintext highlighter-rouge">LT(GAMING_2, KC_LBRC)</code> and <code class="language-plaintext highlighter-rouge">LT(GAMING_2, KC_RBRC)</code>, quite arbitrarily in <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/2f78c94dfb233f4b11e51403826265cdfdaaec88/keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c#L566">my keymaps</a>).</p> <p>Here’s what the image above looks like in layer code (non-number-related keycodes are “commented out” with <code class="language-plaintext highlighter-rouge">/**/</code>):</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">keymaps</span><span class="p">[][</span><span class="n">MATRIX_ROWS</span><span class="p">][</span><span class="n">MATRIX_COLS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">GAMING</span><span class="p">]</span> <span class="o">=</span> <span class="n">LAYOUT_georgi</span><span class="p">(</span>
        <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span>
        <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span>
         <span class="n">LT</span><span class="p">(</span><span class="n">GAMING_2</span><span class="p">,</span> <span class="n">KC_LBRC</span><span class="p">),</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="n">LT</span><span class="p">(</span><span class="n">GAMING_2</span><span class="p">,</span> <span class="n">KC_RBRC</span><span class="p">)</span>
    <span class="p">),</span>
    <span class="p">[</span><span class="n">GAMING_2</span><span class="p">]</span> <span class="o">=</span> <span class="n">LAYOUT_georgi</span><span class="p">(</span>
        <span class="cm">/**/</span><span class="p">,</span> <span class="n">KC_1</span><span class="p">,</span> <span class="n">KC_2</span><span class="p">,</span> <span class="n">KC_3</span><span class="p">,</span> <span class="n">KC_4</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="n">KC_6</span><span class="p">,</span> <span class="n">KC_7</span><span class="p">,</span> <span class="n">KC_8</span><span class="p">,</span> <span class="n">KC_9</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span>
        <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span>
                          <span class="cm">/**/</span><span class="p">,</span> <span class="n">KC_5</span><span class="p">,</span> <span class="n">KC_0</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span>
    <span class="p">)</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="automap">Automap</h3> <p>For Automap-related controls, rather than create specific QMK combos to mirror stenographic words that describe their meaning (ie outlines for “follow”, “mark” etc), I decided instead to re-create the entire steno <a href="https://www.artofchording.com/sounds/fingerspelling.html">fingerspelling</a> alphabet as combos, and leave the controls as their default single-letter values.</p> <p>The steps for creating the combos are the same as before; the general idea can be gleaned from the abbreviated configuration below, but the entire list can be found in <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">my Georgi keymaps</a>:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// STEP 1: Give the combos names.</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
    <span class="n">STENO_A</span><span class="p">,</span>
    <span class="c1">// ...</span>
    <span class="n">STENO_Z</span>
<span class="p">}</span>

<span class="c1">// STEP 2: Define the set of keys for the combos.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_a_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_BACKSPACE</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// ...</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_z_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_A</span><span class="p">,</span> <span class="n">KC_W</span><span class="p">,</span> <span class="n">KC_S</span><span class="p">,</span> <span class="n">KC_E</span><span class="p">,</span> <span class="n">KC_D</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="c1">// STEP 3: Define what keystroke the combos should send,</span>
<span class="c1">// and register them in `key_combos`.</span>
<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">STENO_A</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">steno_a_combo</span><span class="p">,</span> <span class="n">KC_A</span><span class="p">),</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">STENO_Z</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">steno_z_combo</span><span class="p">,</span> <span class="n">KC_Z</span><span class="p">),</span>
<span class="p">};</span>
</code></pre></div></div> <p>A big block of new chord config rarely goes 100% smooth, of course: there were a few fingerspelling combos whose chords conflicted with the Doom movement controls. Hence, I ended up adding an equivalent steno <code class="language-plaintext highlighter-rouge">-Z</code> key (for my keymaps, this ended up being <code class="language-plaintext highlighter-rouge">KC_QUOTE</code>) at the end of the fingerspelling chords for <code class="language-plaintext highlighter-rouge">K</code>, <code class="language-plaintext highlighter-rouge">P</code>, <code class="language-plaintext highlighter-rouge">R</code>, and <code class="language-plaintext highlighter-rouge">W</code> to disambiguate them:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// NOTE: KC_QUOTE/-Z needed to allow strafing left and turning left simultaneously</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_k_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_S</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">KC_QUOTE</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// NOTE: KC_QUOTE/-Z needed to allow moving forward and turning left simultaneously</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_p_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_E</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">KC_QUOTE</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// NOTE: KC_QUOTE/-Z needed to allow strafing right and turning left simultaneously</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_r_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_F</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">KC_QUOTE</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// KC_QUOTE/-Z needed to allow moving backward and turning left simultaneously</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_w_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_D</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">KC_QUOTE</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="typist-controls">Typist Controls</h3> <p>Now that we have the controls of Doom itself configured for Gaming Mode, it is time to shift our focus over to adapting the <a href="https://github.com/mmaulwurff/typist.pk3#how-to-play">Typist.pk3 controls</a>.</p> <div class="centered-image" style="width: 80%"> <figure> <img src="/assets/images/2022-06-07/typist-controls.jpg" alt="Typist.pk3 configurable controls"/> <figcaption> </figcaption> </figure> </div> <p>Since all the “typing” in <span style="color: red">Combat Mode</span> will actually be done with steno chords, I created a new <a href="https://github.com/paulfioravanti/steno-dictionaries/blob/b670b12696b656488a8850a490884b9337884ceb/dictionaries/gaming/gaming-doom-typist.json">Doom-Typist-specific dictionary</a> in <a href="https://github.com/paulfioravanti/steno-dictionaries/">my steno dictionaries</a>, encompassing controls that can be configured in-game, as well as those that cannot:</p> <p><strong><code class="language-plaintext highlighter-rouge">dictionaries/gaming/gaming-doom-typist.json</code></strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"A*UPL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:return to AUto Mode}{:KEY_COMBO:CONTROL_L}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"K-RBGS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:dash left}{:ATTACH:/dl}{:KEY_COMBO:RETURN}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"KHRAUL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:CLear ALL}{:KEY_COMBO:CONTROL_L(BACKSPACE)}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"KPWA*T"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:force COMBAT}{:KEY_COMBO:GRAVE}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"P-RBGS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:dash forward}{:ATTACH:/df}{:KEY_COMBO:RETURN}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"R-RBGS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:dash right}{:ATTACH:/dr}{:KEY_COMBO:RETURN}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"SPHRO*R"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:force EXPLORE}{:KEY_COMBO:ESCAPE}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"W-RBGS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:dash backward}{:ATTACH:/db}{:KEY_COMBO:RETURN}"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <blockquote> <p>The inline comment (<code class="language-plaintext highlighter-rouge">CMT</code>) syntax is from the <a href="https://github.com/user202729/plover-comment">plover-comment</a> Plover plugin, which I use to help provide outlines with metadata, particularly around how I pronounce outlines in my head, how I should remember them, or just what they are supposed to mean. The <code class="language-plaintext highlighter-rouge">ATTACH</code> and <code class="language-plaintext highlighter-rouge">KEY_COMBO</code> syntax are Plover’s <a href="https://github.com/openstenoproject/plover/wiki/Dictionary-Format#friendly-command-names">friendly command names</a>.</p> </blockquote> <p>The non-dash outlines are all (somewhat) <a href="https://en.wikipedia.org/wiki/Phonetics">phonetic</a>, while dash outlines re-use the <a href="https://en.wikipedia.org/wiki/Arrow_keys#ESDF_keys">ESDF</a>-style keys for dashing direction, along with a <code class="language-plaintext highlighter-rouge">-RBGS</code> “dash chord”:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/dash-chords.png" alt="Doom Typist 'dash chords'"/> </figure> </div> <p>Although dashing around in steno mode is all good and well, there came many times where I would, say, move up to a door in Gaming mode, open it, and immediately encounter an enemy. The surprise of this would make me forget that I was in Gaming mode, and I would attempt to dash away, forgetting that I was not yet in steno mode, where all the dashing chords were configured.</p> <p>I wanted to be able to instantly dash away to put some distance between me and the enemy, to compose myself and remember to switch to Steno mode. So, you guessed it, it’s combo time again to mirror all the dictionary entries above in Gaming mode (noticing a pattern yet?):</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// STEP 1: Create some custom keycodes</span>
<span class="k">enum</span> <span class="n">custom_keycodes</span> <span class="p">{</span>
  <span class="n">DASH</span> <span class="o">=</span> <span class="n">SAFE_RANGE</span><span class="p">,</span>
  <span class="n">DASH_BACKWARD</span><span class="p">,</span>
  <span class="n">DASH_FORWARD</span><span class="p">,</span>
  <span class="n">DASH_LEFT</span><span class="p">,</span>
  <span class="n">DASH_RIGHT</span>
<span class="p">};</span>

<span class="c1">// STEP 2: Give the combos names.</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="n">DOOM_TYPIST_DASH</span><span class="p">,</span>
    <span class="n">DOOM_TYPIST_DASH_BACKWARD</span><span class="p">,</span>
    <span class="n">DOOM_TYPIST_DASH_FORWARD</span><span class="p">,</span>
    <span class="n">DOOM_TYPIST_DASH_LEFT</span><span class="p">,</span>
    <span class="n">DOOM_TYPIST_DASH_RIGHT</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// STEP 3: Define the set of keys for the combos.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// Mirrors "W-RBGS": "{:CMT:dash backward}{:ATTACH:/db}{:KEY_COMBO:RETURN}"</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_backward_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_D</span><span class="p">,</span> <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// Mirrors "P-RBGS": "{:CMT:dash forward}{:ATTACH:/df}{:KEY_COMBO:RETURN}"</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_forward_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_E</span><span class="p">,</span> <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// Mirrors "K-RBGS": "{:CMT:dash left}{:ATTACH:/dl}{:KEY_COMBO:RETURN}"</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_left_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_S</span><span class="p">,</span> <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// Mirrors "R-RBGS": "{:CMT:dash right}{:ATTACH:/dr}{:KEY_COMBO:RETURN}"</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_right_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_F</span><span class="p">,</span> <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="c1">// STEP 4: Define what keystroke the combos should send,</span>
<span class="c1">// and register them in `key_combos`.</span>
<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_combo</span><span class="p">,</span> <span class="n">DASH</span><span class="p">),</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH_BACKWARD</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_backward_combo</span><span class="p">,</span> <span class="n">DASH_BACKWARD</span><span class="p">),</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH_FORWARD</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_forward_combo</span><span class="p">,</span> <span class="n">DASH_FORWARD</span><span class="p">),</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH_LEFT</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_left_combo</span><span class="p">,</span> <span class="n">DASH_LEFT</span><span class="p">),</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH_RIGHT</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_right_combo</span><span class="p">,</span> <span class="n">DASH_RIGHT</span><span class="p">),</span>
<span class="p">};</span>
</code></pre></div></div> <p>Assuming your eyes have not glazed over at seeing <em>yet another</em> set of combo configuration, you may have noticed a couple of peculiar things that prompted some questions:</p> <ul> <li>There are not any specific keycodes related to “dashing”, so some new <code class="language-plaintext highlighter-rouge">custom_keycodes</code> were created. The combos are configured to send these custom keycodes on activation. But, what do those keycodes mean? What will get sent?</li> <li>Why does just the “dash chord” get its own combo in isolation?</li> </ul> <blockquote> <p>In case you are wondering about <code class="language-plaintext highlighter-rouge">SAFE_RANGE</code> above, see <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#defining-a-new-keycode">Defining a New Keycode</a> in QMK’s documentation.</p> </blockquote> <p>We can define the handling for, and hence give meaning to, custom keycodes in the <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#programming-the-behavior-of-any-keycode-idprogramming-the-behavior-of-any-keycode"><code class="language-plaintext highlighter-rouge">process_record_user</code></a> function. For example, we want the <code class="language-plaintext highlighter-rouge">DASH_FORWARD</code> keycode to type in <code class="language-plaintext highlighter-rouge">/df</code> and then press enter, giving us an insta-dash forward when the combo is chorded:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bool</span> <span class="nf">process_record_user</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">keycode</span><span class="p">,</span> <span class="n">keyrecord_t</span> <span class="o">*</span><span class="n">record</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">keycode</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">case</span> <span class="n">DASH_FORWARD</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">record</span><span class="o">-&gt;</span><span class="n">event</span><span class="p">.</span><span class="n">pressed</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">SEND_STRING</span><span class="p">(</span><span class="s">"/df"</span> <span class="n">SS_TAP</span><span class="p">(</span><span class="n">X_ENTER</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div> <p>All the other dashing directions have similar handling in their <code class="language-plaintext highlighter-rouge">case</code> conditions, and you can find them all in <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">my Georgi keymaps</a>. Also, just by the way, custom keycodes never require any handling by QMK (they are custom to you after all), so we always <code class="language-plaintext highlighter-rouge">return false</code> at the end of their handling code.</p> <p>As for the “dash chord” combo, the reason it exists is that I wanted to be able to have a version of “partial chording”<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup> in Gaming mode, where I could keep the “dash chord” held down, and just press the direction keys in rapid succession to easily make quick getaways in any direction.</p> <p>This meant that the <code class="language-plaintext highlighter-rouge">process_record_user</code> function would need to keep track of whether we are <code class="language-plaintext highlighter-rouge">dashing</code> or not:</p> <ul> <li><code class="language-plaintext highlighter-rouge">true</code> if the “dash chord”, or any of the directional dash chords, are being pressed,</li> <li><code class="language-plaintext highlighter-rouge">false</code> if they are released</li> </ul> <p>Checking of the directional <a href="https://en.wikipedia.org/wiki/Arrow_keys#ESDF_keys">ESDF keys</a> in isolation would also need to be redefined to account for whether we are <code class="language-plaintext highlighter-rouge">dashing</code> or not and:</p> <ul> <li>if so, perform a directional dash</li> <li>if not, let QMK do its normal handling</li> </ul> <p>Here’s how that looks in keymap configuration for just dashing forward:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bool</span> <span class="nf">process_record_user</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">keycode</span><span class="p">,</span> <span class="n">keyrecord_t</span> <span class="o">*</span><span class="n">record</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">static</span> <span class="n">bool</span> <span class="n">dashing</span><span class="p">;</span>

    <span class="k">switch</span> <span class="p">(</span><span class="n">keycode</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">DASH</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">record</span><span class="o">-&gt;</span><span class="n">event</span><span class="p">.</span><span class="n">pressed</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">dashing</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">dashing</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="c1">// ...</span>
    <span class="k">case</span> <span class="n">DASH_FORWARD</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">record</span><span class="o">-&gt;</span><span class="n">event</span><span class="p">.</span><span class="n">pressed</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">SEND_STRING</span><span class="p">(</span><span class="s">"/df"</span> <span class="n">SS_TAP</span><span class="p">(</span><span class="n">X_ENTER</span><span class="p">));</span>
            <span class="n">dashing</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">dashing</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="c1">// ...</span>
    <span class="k">case</span> <span class="n">KC_E</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">record</span><span class="o">-&gt;</span><span class="n">event</span><span class="p">.</span><span class="n">pressed</span> <span class="o">&amp;&amp;</span> <span class="n">dashing</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">SEND_STRING</span><span class="p">(</span><span class="s">"/df"</span> <span class="n">SS_TAP</span><span class="p">(</span><span class="n">X_ENTER</span><span class="p">));</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div> <p>Similar configuration code for all the other dash direction keys and chords can be found in <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">my Georgi keymaps</a>.</p> <p>Okay. <em>Now</em> you are ready to play a bit of Doom, but there are just a couple more non-control-related quality-of-steno-gaming-life configuration changes that can be made.</p> <h2 id="layer-switching-chord-changes">Layer-Switching Chord Changes</h2> <p>In order to reduce the amount of fat-fingered mis-chording that seemed to happen to me while frantically attempting to toggle between moving around and shooting, I made a couple of changes to keymap-layer switching logic.</p> <h3 id="steno-mode---gaming-mode">Steno Mode &lt;-&gt; Gaming Mode</h3> <p>The default Georgi chord to change from Steno mode to Gaming mode looks like this:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/georgi-steno-layer-gaming-chord.png" alt="Enter Gaming Mode chord"/> <figcaption> <code>(PWR | FN | ST4 | ST3)</code> </figcaption> </figure> </div> <p>This is perfectly fine for normal steno use cases, if you are not planning on changing back and forth between the modes at rapid-fire speed. I found that I would frequently mis-chord it in the heat of battle, and desired a slightly simpler chord, which ended up being just the bottom half of the original one:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/georgi-simple-gaming-chord.png" alt="Simpler Steno/Gaming toggle chord"/> <figcaption> <code>(PWR | ST4)</code> </figcaption> </figure> </div> <p>The firmware edits required to make this happen necessitated small changes <a href="https://github.com/qmk/qmk_firmware/blob/f5d091a9d58c8349437e9d52de87294258cbd256/keyboards/gboards/georgi/sten.c#L97">directly to Georgi-specific stenography logic</a> (rather than user keymap logic, which is where most <a href="https://qmk.fm/">QMK</a> configuration takes place, and where all the configurations you have seen thus far have been made):</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/sten.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bool</span> <span class="nf">send_steno_chord_user</span><span class="p">(</span><span class="n">steno_mode_t</span> <span class="n">mode</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">chord</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="c1">// Handle Gaming Toggle,</span>
    <span class="c1">// Original cChord == (PWR | FN | ST4 | ST3)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cChord</span> <span class="o">==</span> <span class="p">(</span><span class="n">PWR</span> <span class="o">|</span> <span class="n">ST4</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">keymapsCount</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="n">layer_on</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <p>In the <em><a href="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/">Flashing Georgi Firmware</a></em> post, I go into significant detail about this particular change, as well as the mirroring QMK combo in the Gaming layer that returns back to Steno mode. For completeness’ sake though, here’s what that combo looks like:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// STEP 1: Give the combos names.</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="n">GOTO_STENO_LAYER</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// STEP 2: Define the set of keys for the combos.</span>
<span class="c1">// Mirrors the (PWR | ST4) chord used to switch to the gaming layer in `sten.c`.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">goto_steno_layer_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_LEFT_CTRL</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="c1">// STEP 3: Define what keystroke the combos should send,</span>
<span class="c1">// and register them in `key_combos`.</span>
<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">GOTO_STENO_LAYER</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">goto_steno_layer_combo</span><span class="p">,</span> <span class="n">TO</span><span class="p">(</span><span class="n">STENO_LAYER</span><span class="p">)),</span>
<span class="p">};</span>
</code></pre></div></div> <blockquote> <p><a href="https://github.com/qmk/qmk_firmware/blob/master/docs/keycodes.md#layer-switching-idlayer-switching"><code class="language-plaintext highlighter-rouge">TO(layer)</code></a> “turns on <code class="language-plaintext highlighter-rouge">layer</code> and turns off all other layers, except the default layer”</p> </blockquote> <h3 id="qwerty-mode">QWERTY Mode</h3> <p>When it came to switching from Steno to QWERTY mode, I had a similar, but opposite, problem. By default, simply pressing the <code class="language-plaintext highlighter-rouge">FN</code> key switches you to Georgi’s QWERTY mode, a “pseudo-layer” within the steno keymap layer:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/georgi-change-to-qwerty-mode.png" alt="Switch to QWERTY mode"/> </figure> </div> <p>I found that I would inadvertently press this button frequently when using the new Steno-Gaming mode chord defined above. I would think I was in Gaming mode, but was in fact in stenotype QWERTY mode, leaving me unable to move my character, and at the mercy of whatever enemy was attacking me.</p> <p>I needed to change the switch to QWERTY mode be a bit more <em>complex</em>: from a simple button press, to a less-likely-to-occur-by-accident chord. The easiest change seemed to be mirroring the Steno-Gaming chord:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/georgi-change-to-qwerty-mode-chord.png" alt="Switch to QWERTY mode chord"/> <figcaption> <code>(FN | ST3)</code> </figcaption> </figure> </div> <p>The firmware edits to do this were also in Georgi’s stenography logic:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/sten.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bool</span> <span class="nf">send_steno_chord_user</span><span class="p">(</span><span class="n">steno_mode_t</span> <span class="n">mode</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">chord</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="c1">// Original cChord == FN</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cChord</span> <span class="o">==</span> <span class="p">(</span><span class="n">FN</span> <span class="o">|</span> <span class="n">ST3</span><span class="p">))</span> <span class="p">{</span>
        <span class="p">(</span><span class="n">cMode</span> <span class="o">==</span> <span class="n">STENO</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="n">cMode</span> <span class="o">=</span> <span class="n">QWERTY</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="n">cMode</span> <span class="o">=</span> <span class="n">STENO</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <p>As of this writing, both of those Georgi-steno-logic-level changes have worked out well for me, but I have no doubt I will continue to fine-tune them.</p> <h2 id="next-stage">Next Stage</h2> <p>I have little doubt that my gaming-related steno configuration is going to be a permanent work-in-progress, so here are a few of the things on my mind to look at next, as of this writing.</p> <h3 id="hard-to-use">Hard to “Use”</h3> <p>It seems that it is impossible to open doors or toggle switches (ie use the “Use” functionality) in steno mode. This can be a bit annoying if you encounter multiple enemies immediately after opening a door because:</p> <ul> <li>you get auto-changed from <span style="color: blue">Exploration Mode</span> to <span style="color: red">Combat Mode</span>, so you have to change from Gaming mode to Steno mode quickly</li> <li>there usually isn’t enough time to defeat all the enemies before the door closes</li> <li>you have to switch back to Gaming mode <em>just</em> to re-open the door (since the “simulated” stenotype Enter keystrokes do not register), and <em>then</em> switch back to Steno mode again to resume combat</li> </ul> <p>The workaround to this problem is to remember to dash toward the enemy and away from the door, but I would like the option to not have to do that. So, I am thinking that having another input device would be handy: like a foot pedal (I have my eye on a <a href="https://www.elgato.com/en/stream-deck-pedal">Stream Deck Pedal</a>, unless there are compelling alternatives…), which can permanently send standard keystrokes (in this case the “Use” key), regardless of what mode the Georgi is in.</p> <h3 id="brutal-doom-typist">Brutal Doom Typist</h3> <p>It would seem that the most popular <a href="https://en.wikipedia.org/wiki/Video_game_modding">mod</a> for Doom is <a href="https://www.moddb.com/mods/brutal-doom">Brutal Doom</a>. GZDoom has the ability to load multiple WAD files at a time, so I was actually able to get Brutal Doom and Typist.pk3 to load together!</p> <div class="centered-image" style="width: 50%"> <figure> <img src="/assets/images/2022-06-07/gzdoom-multiple-wad-files.jpg" alt="GZDoom multiple WAD files"/> <figcaption> Multiple WAD files loaded: Typist.pk3, Brutal Doom itself, its new soundtrack, and its new sound effects. </figcaption> </figure> </div> <p>I have not played it much just yet, but if you are planning to give Brutal Doom Typist a shot, just remember to always play the game in “Purist” mode:</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-06-07/purist-mode.jpg" alt="Brutal Doom Purist mode"/> </figure> </div> <p>This is because Classic Doom does not have the concept of looking up and down, but Brutal Doom does. Unfortunately, it will not autoaim your typing shots at enemies in high places when you get put in <span style="color: red">Combat Mode</span>, leading to never being able to defeat them. In Purist (Oldschool Mode), you get the expected “autoaim”.</p> <p>Here’s a video of me attempting to play Brutal Doom Typist with a Georgi:</p> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/LyeWSzbBfhY" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Brutal Doom Typist - Episode 1 Map 1 </figcaption> </div> <h3 id="multiplayer-steno-dooming">Multiplayer Steno Dooming…?</h3> <p>After writing most of this post, I found out about <a href="https://zandronum.com/">Zandronum</a>, another Doom source port, which is “leading the way in newschool multiplayer Doom online”, and supports a “large number of ZDoom and GZDoom mods”.</p> <p>I have not tried it yet, but if it runs Typist.pk3, could this enable multiplayer Steno Doom Typist <a href="https://en.wikipedia.org/wiki/LAN_party">LAN parties</a>…? Would that even be fun…? If you end up getting Doom Typist set up yourself and you want to find out, reach out to me and let’s collaborate!</p> <p>For now, though, it’s time to break out my old grungy <a href="https://en.wikipedia.org/wiki/Flannel">flanelette shirts</a> and <a href="https://en.wikipedia.org/wiki/Reebok_Pump">Reebok Pumps</a>, and get Georgi back to hell to chord like it’s 1993! :musical_keyboard:</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://doom.fandom.com/wiki/PK3">PK3</a> being “an alternate extension for <a href="https://en.wikipedia.org/wiki/ZIP_(file_format)">ZIP</a> files” <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p>On macOS, I even tried using the <a href="https://github.com/user202729/plover_run_shell">Plover Run Shell</a> plugin with an <a href="https://sites.google.com/site/learnplover/glossary">outline</a> that maps to an entry that runs a <a href="https://en.wikipedia.org/wiki/Shell_(computing)">shell</a> command that calls out to <a href="https://en.wikipedia.org/wiki/AppleScript">AppleScript</a> to trigger a Return keystroke:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="nl">"R*R"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:COMMAND:SHELL:osascript -e 'tell application </span><span class="se">\"</span><span class="s2">System Events</span><span class="se">\"</span><span class="s2"> to keystroke return'}"</span><span class="w">
</span></code></pre></div> </div> <p>and that <em>still</em> did not work with GZDoom during Doom gameplay. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3" role="doc-endnote"> <p>Even if you have already supercharged your steno firmware with <a href="https://github.com/JoshuaGrams">Joshua Grams</a>’ excellent <a href="https://github.com/JoshuaGrams/steno-firmware"><code class="language-plaintext highlighter-rouge">steno-firmware</code></a>, whose <code class="language-plaintext highlighter-rouge">STENO_REPEAT</code> functionality allows you to hold down chords to repeat them in quick succession, it will still not be enough. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4" role="doc-endnote"> <p>Typist.pk3 has no idea I’m playing using steno, and is likely not even expecting to receive anything but standard keystrokes from a user. So, naturally, there would not be the concept of any visual cues for that within the mod. I think if there was an <a href="https://en.wikipedia.org/wiki/Light-emitting_diode">LED</a> on the Georgi, or some kind of <a href="https://en.wikipedia.org/wiki/User_interface">UI</a> widget indicating current layer existed, that would be useful. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:5" role="doc-endnote"> <p>À la <code class="language-plaintext highlighter-rouge">STENO_1UP</code> functionality in <a href="https://github.com/JoshuaGrams">Joshua Grams</a>’ <a href="https://github.com/JoshuaGrams/steno-firmware"><code class="language-plaintext highlighter-rouge">steno-firmware</code></a>, which allows you to hold down common keys in between chords. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="retro-gaming"/><category term="georgi"/><category term="steno"/><category term="doom"/><category term="qmk"/><summary type="html"><![CDATA[Demon hordes are no match for steno chords!]]></summary></entry><entry><title type="html">Flashing Georgi Firmware</title><link href="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/" rel="alternate" type="text/html" title="Flashing Georgi Firmware"/><published>2022-05-18T16:00:00+10:00</published><updated>2022-05-19T08:20:00+10:00</updated><id>https://www.paulfioravanti.com/blog/flashing-georgi-firmware</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/"><![CDATA[<p>So, you have had your <a href="https://www.gboards.ca/product/georgi">Georgi</a> keyboard for a while, done lots of <a href="https://www.openstenoproject.org/plover/">Plover</a> <a href="https://en.wikipedia.org/wiki/Stenotype">stenography</a> practice, and are now thinking about making some changes to its keymap layout because you want it to do something that it currently does not.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-18/georgi.jpg" alt="Georgi keyboard"/> </figure> </div> <p>This will require you to generate some <a href="https://docs.qmk.fm/#/">Quantum Mechanical Keyboard (QMK)</a>-based <a href="https://en.wikipedia.org/wiki/Firmware">firmware</a> for the Georgi, and then <a href="https://en.wikipedia.org/wiki/Firmware#Flashing">flash</a> the device to overwrite the one that is currently there.</p> <blockquote> <p>See a previous blog post I wrote, <em><a href="https://www.paulfioravanti.com/blog/escape-defaults-control-keyboard-qmk/">Escape the defaults and Control your keyboard with QMK</a></em>, for more information about using QMK: some general, some more <a href="https://ergodox-ez.com/">Ergodox EZ</a>-focused.</p> </blockquote> <p>QMK has a <a href="https://config.qmk.fm/#">web-based configurator</a>, which enables you to create firmware files for a multitude of keyboards that QMK supports, without having to touch any <a href="https://en.wikipedia.org/wiki/C_(programming_language)">C</a> code. But, in the configurator<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>…</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/qmk-configurator.jpg" alt="QMK Configurator"/> </figure> </div> <ul> <li>Compilation of the <a href="https://config.qmk.fm/#/gboards/georgi/LAYOUT_georgi">Georgi layout</a> is not yet supported</li> <li><a href="https://docs.qmk.fm/#/feature_stenography?id=keycode-reference">Stenography keycodes</a> are not yet available to assign to keys</li> </ul> <p>If you still want to make any changes, steel yourself for hard mode, because we are going to have to get technical.</p> <p>Before we even think about firmware customisation, though, we will want to make sure that you can compile the <em>default</em> Georgi firmware locally on your computer, and flash your Georgi successfully with it. <em>Then</em>, we will get our hands dirty with some code by creating an example firmware customisation, compiling it, and then flash the Georgi again to apply it.</p> <p>If you have not already, I would recommend familiarising yourself, at least a little bit, with some of the Georgi-related <a href="http://docs.gboards.ca/">gBoards documentation</a>, to provide some context on what we will be doing. Specifically:</p> <ul> <li><a href="http://docs.gboards.ca/docs/Unboxing-Georgi/">Unboxing Georgi</a> - we will use the <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#entering-qmk-gaming-mode">Gaming mode</a> in the example customisation later on</li> <li><a href="http://docs.gboards.ca/docs/Configuring-Georgi/">Configuring Georgi</a> - in particular <a href="http://docs.gboards.ca/docs/Configuring-Georgi/#triggers">Triggers</a>, one of which we will change</li> <li><a href="http://docs.gboards.ca/docs/Hacking-Georgi/">Hacking Georgi</a> - here, just note that we will be working with the <a href="http://docs.gboards.ca/docs/Hacking-Georgi/#cchord"><code class="language-plaintext highlighter-rouge">cChord</code></a> <a href="https://en.wikipedia.org/wiki/Bit_field">bit field</a></li> </ul> <p>Ready? Let’s get hacking!</p> <h2 id="compile-default-georgi-firmware">Compile Default Georgi Firmware</h2> <p>Download the QMK firmware from its <a href="https://github.com/qmk/qmk_firmware">GitHub repository</a>. Pick a convenient directory to start in (I will use <code class="language-plaintext highlighter-rouge">~/Desktop</code> here, but you can pick one appropriate for your operating system), and either use <a href="https://git-scm.com/">Git</a> to get the source code (recommended), or download its <a href="https://en.wikipedia.org/wiki/ZIP_(file_format)">ZIP</a> file.</p> <div class="centered-image" style="width: 100%"> <figure style="margin-bottom: 0"> <img src="/assets/images/2022-05-18/qmk-firmware-github.jpg" alt="QMK Firmware GitHub page"/> </figure> </div> <p>Example commands:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">cd ~/Desktop
git clone https://github.com/qmk/qmk_firmware.git
cd qmk_firmware
</span></code></pre></div></div> <p>Next, follow the <a href="https://docs.qmk.fm/#/newbs_getting_started">Setting Up Your QMK Environment</a> instructions from the <a href="https://docs.qmk.fm/#/">QMK documentation</a> and install the <code class="language-plaintext highlighter-rouge">qmk</code> <a href="https://en.wikipedia.org/wiki/Command-line_interface">command line interface</a> (CLI) application.</p> <p>In the <a href="https://docs.qmk.fm/#/newbs_getting_started?id=_1-prerequisites">Prerequisites</a>, it says installation of the <a href="https://github.com/qmk/qmk_toolbox">QMK Toolbox</a> is optional, but we will be using it soon, so either download <a href="https://github.com/qmk/qmk_toolbox/releases">the latest release</a>, or, if you are on macOS, use <a href="https://brew.sh/">Homebrew</a> to install it:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">brew install qmk-toolbox
</span></code></pre></div></div> <p>Now, use the <code class="language-plaintext highlighter-rouge">qmk</code> CLI to compile the default Georgi firmware with the following command:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">qmk compile -kb georgi -km default
</span></code></pre></div></div> <blockquote> <p>You may get an error running this command the first time, and be prompted to run a command like <code class="language-plaintext highlighter-rouge">make git-submodule</code>. Follow any error message instructions, and then try compiling again.</p> </blockquote> <p>If the command runs successfully, the end of all of the compilation output should look something like this:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">...
</span><span class="go">Creating load file for flashing: .build/gboards_georgi_default.hex          [OK]
Copying gboards_georgi_default.hex to qmk_firmware folder                   [OK]
Checking file size of gboards_georgi_default.hex                            [OK]
</span></code></pre></div></div> <p>If you check in your <code class="language-plaintext highlighter-rouge">qmk_firmware</code> directory, you will see that a <a href="https://en.wikipedia.org/wiki/Intel_HEX">HEX</a> file named <code class="language-plaintext highlighter-rouge">gboards_georgi_default.hex</code> has been generated, which we will use to flash the Georgi.</p> <h2 id="flash-georgi-firmware">Flash Georgi Firmware</h2> <p>Open up the QMK Toolbox application, press the “Open” button, and select the generated HEX file.</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/qmk-toolbox-select-firmware.jpg" alt="QMK Toolbox Select Firmware"/> <figcaption> Screenshot is macOS version of QMK Toolbox. May differ slightly for other operating systems. </figcaption> </figure> </div> <p>You will notice that the “Flash” button is currently not selectable. This is because the Georgi is not currently in <a href="https://en.wikipedia.org/wiki/USB#Device_Firmware_Upgrade_mechanism">Device Firmware Upgrade</a> (DFU) mode. To get in DFU mode, and allow the Georgi to receive firmware, you need to press the tiny button on the left half of the keyboard, just below the <a href="https://en.wikipedia.org/wiki/Phone_connector_(audio)">TRRS</a> cable plug. I use a paperclip or a <a href="https://en.wikipedia.org/wiki/SIM_card">SIM card</a> tray ejector tool for this delicate job.</p> <div class="centered-image" style="width: 80%"> <figure> <img src="/assets/images/2022-05-18/georgi-flash-button.jpg" alt="Press button to put Georgi in DFU mode"/> <figcaption> Tray ejector tools are not just for mobile phones. </figcaption> </figure> </div> <p>Once the button has been pressed, QMK Toolbox will show you a message letting you know that you have successfully connected a device in DFU mode, and the “Flash” button will become pressable:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/qmk-toolbox-dfu-device-connected.jpg" alt="QMK Toolbox DFU mode device successfully connected"/> </figure> </div> <p>Press the “Flash” button, and if everything goes well, you should see output that looks something like this:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/qmk-toolbox-flashing-successful.jpg" alt="QMK Toolbox device successfully flashed"/> </figure> </div> <p>The Georgi has now been taken out of DFU mode, and can be reconnected to Plover.</p> <div class="centered-image" style="width: 60%"> <figure> <img src="/assets/images/2022-05-18/reconnect-plover.jpg" alt="Reconnect Georgi to Plover"/> <figcaption> My Georgi shows up as <code>/dev/cu.usbmodem14202</code> in Plover's connection list, but yours might look something like <code>COM6</code> if you use Windows. </figcaption> </figure> </div> <p>If you are able to stroke steno chords again (and it seems like nothing has changed), congratulations, you have just completed a full keyboard flashing process! You will get another chance to do this again, but before that, let’s actually go and make some firmware changes!</p> <h2 id="customising-the-firmware">Customising the Firmware</h2> <p>Before diving straight into the code, allow me to provide some context around the reasons for even wanting to make the changes we will use in the customisation example.</p> <h3 id="the-problem">The Problem</h3> <p>I have been experimenting with Georgi’s <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#entering-qmk-gaming-mode">Gaming mode</a>, which switches you to a separate keyboard layer that “acts like a traditional keyboard, as opposed to stenotype”, in the way it sends information to your computer.</p> <p>This is different to Georgi’s <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#modes">QWERTY and Symbol modes</a>, which still both act like a stenotype, and actually only exist as <a href="http://docs.gboards.ca/docs/Configuring-Georgi/#layers">“pseudo-layers”</a> within the main steno keymap layer.</p> <blockquote> <p>Open any game you may have that involves moving a character around a screen, and attempt to do so using Georgi’s QWERTY mode. You will most likely be unable to, due to this keyboard/stenotype difference (details of which are not important for this post).</p> </blockquote> <p>If you have a look at the code for the Georgi <a href="https://github.com/qmk/qmk_firmware/blob/e9e83b4da73e5594b1f864d78529e85aa5ebefe9/keyboards/gboards/georgi/keymaps/default/keymap.c#L219">default keymap layers</a>, you will actually see only three layers, which have the following layouts:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-steno-layer.png" alt="Steno (and QWERTY and Symbol) layer"/> <figcaption> Steno Layer (includes QWERTY and Symbol pseudo-layers; not shown above, but you can view them <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#modes">here</a>) </figcaption> </figure> </div> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-gaming-layer-1.png" alt="Gaming Layer 1"/> <figcaption> Gaming Layer 1 </figcaption> </figure> </div> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-gaming-layer-2.png" alt="Gaming Layer 2"/> <figcaption> Gaming Layer 2 </figcaption> </figure> </div> <p>In order to change from the Steno layer to Gaming layer 1, the default chord is:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-steno-layer-gaming-chord.png" alt="Enter Gaming Mode chord"/> <figcaption> Enter Gaming Mode chord </figcaption> </figure> </div> <p>In order to change from a Gaming layer to the Steno layer, the default keystroke is:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-gaming-layer-steno-key.png" alt="Return to Steno Mode key"/> <figcaption> Return to Steno Mode key </figcaption> </figure> </div> <p>My brain sees this as stroking a complex chord to change to Gaming Mode, yet pressing a completely different singular key to change back to Steno Mode. I would prefer to:</p> <ul> <li>have a single chord that that would feel like a “toggle” between Steno and Gaming modes</li> <li>make that chord a little bit simpler than the one above</li> </ul> <h3 id="the-solution">The Solution</h3> <p>I do not want to risk any dictionary-level outline conflicts, so the chord has to include a Georgi-specific key (<code class="language-plaintext highlighter-rouge">FN</code> or <code class="language-plaintext highlighter-rouge">PWR</code>). Therefore, I am thinking a <code class="language-plaintext highlighter-rouge">PWR | ST4</code> (“Star 4”) combination will be a good candidate:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-simple-gaming-chord.png" alt="Steno/Gaming toggle chord"/> <figcaption> Candidate Steno/Gaming "toggle" chord </figcaption> </figure> </div> <p>The plan of attack to implement this toggle chord will be twofold:</p> <ul> <li>Change the hardcoded Georgi Gaming layer <a href="http://docs.gboards.ca/docs/Configuring-Georgi/#triggers">trigger</a> on the Steno layer to be <code class="language-plaintext highlighter-rouge">PWR | ST4</code></li> <li>Create an equivalent <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/feature_combo.md">QMK Combo</a> shape (read: chord for a QWERTY keyboard) on the Gaming layer that returns to the Steno layer, using the “Left Control” and “H” keys</li> </ul> <p>Let’s give it a try!</p> <h3 id="change-gaming-layer-trigger">Change Gaming Layer Trigger</h3> <p>You will find all the logic for the triggers related to layer switching in Georgi’s <a href="https://github.com/qmk/qmk_firmware/blob/656090335066eed90a9b76e113fb93ee3bc8c089/keyboards/gboards/georgi/sten.c#L97"><code class="language-plaintext highlighter-rouge">sten.c</code></a> file. Inside the <code class="language-plaintext highlighter-rouge">send_steno_chord_user</code> function, you can see that the chord for the gaming toggle is currently hardcoded to <code class="language-plaintext highlighter-rouge">(PWR | FN | ST4 | ST3)</code>, as per the keymap above:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/sten.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// All processing done at chordUp goes through here</span>
<span class="n">bool</span> <span class="nf">send_steno_chord_user</span><span class="p">(</span><span class="n">steno_mode_t</span> <span class="n">mode</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">chord</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="c1">// Handle Gaming Toggle,</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cChord</span> <span class="o">==</span> <span class="p">(</span><span class="n">PWR</span> <span class="o">|</span> <span class="n">FN</span> <span class="o">|</span> <span class="n">ST4</span> <span class="o">|</span> <span class="n">ST3</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">keymapsCount</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="n">layer_on</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <p>All we need to do here is change the chord that <code class="language-plaintext highlighter-rouge">cChord</code> is checked against from <code class="language-plaintext highlighter-rouge">(PWR | FN | ST4 | ST3)</code> to <code class="language-plaintext highlighter-rouge">(PWR | ST4)</code>:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/sten.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// All processing done at chordUp goes through here</span>
<span class="n">bool</span> <span class="nf">send_steno_chord_user</span><span class="p">(</span><span class="n">steno_mode_t</span> <span class="n">mode</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">chord</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="c1">// Handle Gaming Toggle,</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cChord</span> <span class="o">==</span> <span class="p">(</span><span class="n">PWR</span> <span class="o">|</span> <span class="n">ST4</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">keymapsCount</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="n">layer_on</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <p>Made the change? Great! That wasn’t too scary, right? Now to move out of Georgi’s core firmware logic, and into the keymap logic, where most customisation typically occurs.</p> <h3 id="create-steno-layer-combo">Create Steno Layer Combo</h3> <p>Although we could not avoid changing core Georgi firmware logic in the previous step, the general rule when you create your own personal keymap customisations is to make a copy of the keymap directory you intend to change (in this case Georgi’s <code class="language-plaintext highlighter-rouge">default</code> keymap), and give it a unique name (in this case, I’ll name it <code class="language-plaintext highlighter-rouge">my_keymap</code>: unique, yet uncreative [feel free to name it as you wish]).</p> <p>You can create the new directory via your <a href="https://en.wikipedia.org/wiki/File_manager">file manager</a> user interface, or by the command line:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">cp -r keyboards/gboards/georgi/keymaps/default/ keyboards/gboards/georgi/keymaps/my_keymap/
</span></code></pre></div></div> <p>Now, open up the <code class="language-plaintext highlighter-rouge">keymap.c</code> file in the new <code class="language-plaintext highlighter-rouge">my_keymap</code> directory. Just above the keymap definitions, add the following code to define a new QMK Combo, which will mimic the Steno layer <code class="language-plaintext highlighter-rouge">(PWR | ST4)</code> chord we saw earlier, using the “Left Control” and “H” keys:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/keymaps/my_keymap/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
  <span class="n">GOTO_STENO_LAYER</span>
<span class="p">};</span>

<span class="c1">// NOTE: This combo is meant to mirror the chord used to switch to the gaming</span>
<span class="c1">// layer in `sten.c`.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">goto_steno_layer_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_LEFT_CTRL</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">GOTO_STENO_LAYER</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">goto_steno_layer_combo</span><span class="p">,</span> <span class="n">TO</span><span class="p">(</span><span class="n">STENO_LAYER</span><span class="p">)),</span>
<span class="p">};</span>

<span class="c1">// ..</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">keymaps</span><span class="p">[][</span><span class="n">MATRIX_ROWS</span><span class="p">][</span><span class="n">MATRIX_COLS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ..</span>
<span class="p">};</span>
</code></pre></div></div> <blockquote> <p>If you need a primer on QMK Combos, I wrote about them in excruciating detail in another blog post, <a href="https://www.paulfioravanti.com/blog/chording-qwerty-qmk-combos/">Chording QWERTY with QMK Combos</a>. Most of the information in there should still be current as of this writing.</p> </blockquote> <p>What we are doing here at a high level is:</p> <ul> <li>Giving a <em>name</em> to the chord, in the form of an <a href="https://en.wikipedia.org/wiki/Enumerated_type">enumerated type</a>, that indicates what it does: <code class="language-plaintext highlighter-rouge">GOTO_STENO_LAYER</code></li> <li>Defining what keys the combo should consist of: the <code class="language-plaintext highlighter-rouge">KC_LEFT_CTRL</code>, and <code class="language-plaintext highlighter-rouge">KC_H</code> keys</li> <li>Defining what should happen when the chord is pressed: in this case <code class="language-plaintext highlighter-rouge">TO(STENO_LAYER)</code>, meaning to “turn on” the Steno layer</li> </ul> <p>Next, we need to provide a definition for <code class="language-plaintext highlighter-rouge">COMBO_COUNT</code> above, which will need to be put inside a new <code class="language-plaintext highlighter-rouge">config.h</code> file within the keymap directory, so create that now:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/keymaps/my_keymap/config.h</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"../../config.h"</span><span class="cp">
</span>
<span class="cp">#define COMBO_COUNT 1
</span></code></pre></div></div> <blockquote> <p>If you add or remove combos in the future, you will also need to change this number accordingly.</p> </blockquote> <p>Finally, we need to actually enable the use of combos in our layout, otherwise we will get compilation errors for using things like <code class="language-plaintext highlighter-rouge">combo_t</code> and <code class="language-plaintext highlighter-rouge">COMBO_END</code> above. Just add the following line of configuration to the keymap <code class="language-plaintext highlighter-rouge">rules.mk</code> file:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/keymaps/my_keymap/rules.mk</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp"># ...
</span><span class="n">COMBO_ENABLE</span> <span class="o">=</span> <span class="n">yes</span>
</code></pre></div></div> <p>You have now done everything needed to implement the Gaming layer “toggle” chord! Time to make sure everything compiles correctly:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">qmk compile -kb georgi -km my_keymap
</span></code></pre></div></div> <p>Now, if you check in your <code class="language-plaintext highlighter-rouge">qmk_firmware</code> directory, you will see a newly created HEX file named <code class="language-plaintext highlighter-rouge">gboards_georgi_my_keymap.hex</code> for you to use when flashing. Different keymap compilations generate a separate firmware file.</p> <p>If you get any errors, trace back and see if you may have missed a step, or perhaps made a mistake in the code. If you get similar output to when you compiled the <code class="language-plaintext highlighter-rouge">default</code> keymap, then you are ready to flash your Georgi again. Repeat the firmware flashing steps from above, and give it a test!</p> <p>If you want to see what other customisations can be made with Georgi Gaming layers, feel free to use <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">my Georgi keymap</a> as a reference for any potential additions you may like to make to your own keymaps.</p> <p>If you do create your own custom layers, please share them publicly so every other Georgi owner can benefit from them as well! Good luck with your adventures in firmware!</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>As of QMK Configurator API v0.1 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="steno"/><category term="mechanical-keyboard"/><category term="qmk"/><summary type="html"><![CDATA[Make your steno keyboard do your bidding by codifying your preferences.]]></summary></entry><entry><title type="html">Play Classic Doom on a Mac</title><link href="https://www.paulfioravanti.com/blog/classic-doom-mac/" rel="alternate" type="text/html" title="Play Classic Doom on a Mac"/><published>2022-05-13T17:25:00+10:00</published><updated>2022-05-15T08:28:00+10:00</updated><id>https://www.paulfioravanti.com/blog/classic-doom-mac</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/classic-doom-mac/"><![CDATA[<p>The 1993 video game <a href="https://en.wikipedia.org/wiki/Doom_(1993_video_game)">Doom</a>, by <a href="https://en.wikipedia.org/wiki/Id_Software">id Software</a>, was <a href="https://en.wikipedia.org/wiki/List_of_Doom_ports#macOS">released for Mac on November 4, 1994</a>. But, good luck if you want to:</p> <ol style="list-style-type: lower-alpha"> <li> find <a href="https://doomwiki.org/wiki/Doom_(Apple_Macintosh)">that version</a> </li> <li> figure out a way to run it within some kind of emulation of <a href="https://en.wikipedia.org/wiki/Mac_OS_9">Mac OS 9</a> on your modern <a href="https://en.wikipedia.org/wiki/MacOS">macOS</a>-running computer (is that even possible?). </li> </ol> <p>Fortunately for us, <a href="https://zdoom.org/wiki/GZDoom">GZDoom</a><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> (<a href="https://zdoom.org/index">official site</a>), a “3D-accelerated Doom <a href="https://zdoom.org/wiki/Source_port">source port</a> based on <a href="https://zdoom.org/wiki/ZDoom">ZDoom</a><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>”, has our backs. It enables us to play the game as long as we can extract the <a href="https://doomwiki.org/wiki/WAD">WAD</a> file from the Doom <a href="https://en.wikipedia.org/wiki/.exe">.exe</a> file for <a href="https://en.wikipedia.org/wiki/Microsoft_Windows">Windows</a>.</p> <p>If getting from zero to fighting demon hordes on macOS was a straightforward course of action, there would be no need for this blog post. But, it’s a bit of an involved process, so here is the missing manual to get you up and running.</p> <blockquote> <p>I currently use an <a href="https://en.wikipedia.org/wiki/MacBook_Pro_(Intel-based)">Intel-based Macbook Pro</a> running <a href="https://en.wikipedia.org/wiki/MacOS_Monterey">macOS Monterey</a>, so that is what the following guide has been tested on. The process should still hopefully work for <a href="https://en.wikipedia.org/wiki/Apple_silicon">Apple Silicon</a>-based Macs and/or other macOS versions, but <a href="https://en.wiktionary.org/wiki/your_mileage_may_vary#Phrase">your mileage may vary</a>.</p> </blockquote> <h2 id="get-gzdoom">Get GZDoom</h2> <figure style="width:50%; float: right; margin-left: 10px; margin-top: 0;"> <img src="/assets/images/2022-05-13/gzdoom-download.jpg" alt="GZDoom downloads page"/> </figure> <p>It is possible to get GZDoom from its <a href="https://zdoom.org/downloads">downloads page</a>.</p> <p>You can click on the Macintosh link to download it, and install it like you would any other macOS application.</p> <p><em>However</em>, since you are going to have to get comfortable with using the <a href="https://en.wikipedia.org/wiki/Terminal_(macOS)">Terminal</a> application during this guide, I would suggest using this installation as the first opportunity to try it out (assuming you are not already comfortable, and have your own <a href="https://en.wikipedia.org/wiki/Terminal_emulator">terminal emulator</a> of choice).</p> <p>You are going to need to get <a href="https://brew.sh/">Homebrew</a>, a <a href="https://en.wikipedia.org/wiki/Package_manager">package manager</a> for macOS. Go to the Homebrew <a href="https://brew.sh/">homepage</a>, copy the installation command, open up your terminal, paste the command, and press enter.</p> <p>Once Homebrew is installed, you should be able to run the <code class="language-plaintext highlighter-rouge">brew</code> command in the terminal, so let’s do that using the following command to install GZDoom:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">brew install gzdoom
</span></code></pre></div></div> <p>If everything was successful, you should see output that looks something like this:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>brew <span class="nb">install </span>gzdoom
<span class="gp">==&gt;</span><span class="w"> </span>Downloading https://github.com/coelckers/gzdoom/releases/download/g4.7.1/gzdoom-4-7-1-macOS.zip
<span class="gp">==&gt;</span><span class="w"> </span>Downloading from https://objects.githubusercontent.com/github-production-release-asset-2e65be/10879376/59b36246-0a5b-4b9e-8fd8-90c6fce651f9?X-Amz-Algorith
<span class="gp">#</span><span class="c">####################################################################### 100.0%</span>
<span class="gp">==&gt;</span><span class="w"> </span>Installing Cask gzdoom
<span class="gp">==&gt;</span><span class="w"> </span>Moving App <span class="s1">'GZDoom.app'</span> to <span class="s1">'/Applications/GZDoom.app'</span>
<span class="go">🍺  gzdoom was successfully installed!
</span></code></pre></div></div> <p>Open up your Applications folder, and you should find GZDoom there, ready to go.</p> <div class="centered-image" style="width: 80%"> <figure> <img src="/assets/images/2022-05-13/gzdoom-in-applications.jpg" alt="GZDoom in the macOS Applications directory"/> </figure> </div> <p>However, if you double-click the icon and open GZDoom, you will likely find yourself greeted with an error message that looks like the following:</p> <div class="centered-image" style="width: 80%"> <figure style="margin-bottom: 0.5em"> <img src="/assets/images/2022-05-13/gzdoom-needs-wad-file.jpg" alt="GZDoom cannot find a Doom WAD file"/> </figure> </div> <p>GZDoom needs WAD files to run (and for you to place them in your local Library directory, <code class="language-plaintext highlighter-rouge">~/Library/Application Support/gzdoom</code>, which we will get to later…).</p> <p>GZDoom’s purpose is to run Doom, and is not, itself, the game Doom. So, it’s off to the store to go get it!</p> <h2 id="get-doom">Get Doom</h2> <p><em><a href="https://doomwiki.org/wiki/The_Ultimate_Doom">The Ultimate Doom</a></em> may be <a href="https://store.steampowered.com/app/2280/Ultimate_Doom/">available on Steam</a>, but we are going to need a file that is only provided in the version <a href="https://www.gog.com/en/game/the_ultimate_doom">available on GOG.com</a>.</p> <p>So, if you have not got a <a href="https://www.gog.com/">GOG.com</a> account yet, create one, then go and buy your copy of <em>The Ultimate Doom</em>.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-13/gog-doom.jpg" alt="GOG.com The Ultimate Doom purchase page"/> <figcaption> The price displayed here is in <a href="https://en.wikipedia.org/wiki/Australian_dollar">AUD</a>. Your price will likely reflect your region. </figcaption> </figure> </div> <p>All paid up and ready to go? Great! Go to the game detail page for your copy of <em>The Ultimate Doom</em> and let’s have a look at the files that are available to download.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-13/gog-doom-download.jpg" alt="Download the Doom Offline Backup Game Installers from GOG.com"/> </figure> </div> <p>See that big blue “DOWNLOAD AND INSTALL NOW” button that GOG.com is trying to guide you toward? Ignore it. The file downloaded from that button is for Windows users only, and cannot be used on a Mac.</p> <p>What we want is the less obvious “Offline Backup Game Installer”. Download the file linked from there, which will have a name like <code class="language-plaintext highlighter-rouge">setup_final_doom_1.9_(28044).exe</code>. Although we cannot directly use this <code class="language-plaintext highlighter-rouge">.exe</code> file on Mac, it contains the Doom WAD file that we seek to extract.</p> <h2 id="extract-wad-file">Extract WAD File</h2> <p>The extraction process is going to generate a lot of new files, so I would suggest first creating a new directory somewhere that can contain them.</p> <p>I just created a temporary <code class="language-plaintext highlighter-rouge">TheUltimateDoom</code> directory on my home Desktop, and put the setup file in there (feel free to do the same, or name it whatever you would like):</p> <div class="centered-image" style="width: 60%"> <figure> <img src="/assets/images/2022-05-13/setup-exe-file.jpg" alt="The offline backup game installer in its own directory"/> <figcaption> Terminal path: <code>~/Desktop/TheUltimateDoom</code> </figcaption> </figure> </div> <p>In order to perform the extraction, you will need to install a new program called <a href="https://constexpr.org/innoextract/"><code class="language-plaintext highlighter-rouge">innoextract</code></a> (<a href="https://github.com/dscharrer/innoextract">source code</a>).</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-13/innoextract.jpg" alt="innoextract web page screenshot"/> </figure> </div> <p><code class="language-plaintext highlighter-rouge">innoextract</code> is a “tool to unpack installers created by <a href="https://jrsoftware.org/isinfo.php">Inno Setup</a>”, which is a “tool to create installers for Microsoft Windows applications”. Of particular interest to us is that it supports GOG.com’s Inno Setup-based game installers, which the “Offline Backup Game Installer” you downloaded most definitely is.</p> <p>Like with GZDoom, you install <code class="language-plaintext highlighter-rouge">innoextract</code> using Homebrew with the following command:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">brew install innoextract
</span></code></pre></div></div> <blockquote> <p>Unlike with GZDoom, using Homebrew is the <em>only</em> installation option available. So, if you ignored the last suggestion to install GZDoom using a terminal, now is the time to acquaint yourself with the command line.</p> </blockquote> <p>If everything is successful, you should get output that looks something like this:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>brew <span class="nb">install </span>innoextract
<span class="gp">==&gt;</span><span class="w"> </span>Downloading https://ghcr.io/v2/homebrew/core/innoextract/manifests/1.9_1
<span class="gp">#</span><span class="c">####################################################################### 100.0%</span>
<span class="gp">==&gt;</span><span class="w"> </span>Downloading https://ghcr.io/v2/homebrew/core/innoextract/blobs/sha256:7206f8b88483356746d682b1e631d214e6172b808bd7b8b0567cb9c0f0906abb
<span class="gp">==&gt;</span><span class="w"> </span>Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sha256:7206f8b88483356746d682b1e631d214e6172b808bd7b8b0567cb9c0f0906abb?se<span class="o">=</span>2022-05-13T23%3A25%3A00Z&amp;sig<span class="o">=</span>AvLqNPFvkGI%2B9T1AJqz%2FWNuK0AW%2FzO%2FrIVjRHJeiBc4%3D&amp;sp<span class="o">=</span>r&amp;spr<span class="o">=</span>https&amp;s
<span class="gp">#</span><span class="c">####################################################################### 100.0%</span>
<span class="gp">==&gt;</span><span class="w"> </span>Pouring innoextract--1.9_1.monterey.bottle.tar.gz
<span class="go">🍺  /usr/local/Cellar/innoextract/1.9_1: 7 files, 622.9KB
</span><span class="gp">==&gt;</span><span class="w"> </span>Running <span class="sb">`</span>brew cleanup innoextract<span class="sb">`</span>...
</code></pre></div></div> <p>Let’s now put <code class="language-plaintext highlighter-rouge">innoextract</code> into action. In your terminal, change directory (<a href="https://en.wikipedia.org/wiki/Cd_(command)"><code class="language-plaintext highlighter-rouge">cd</code></a>) to the location where you put the Offline Backup Game Installer file, and run <code class="language-plaintext highlighter-rouge">innoextract</code> against it.</p> <p>For the directory and installer filename above, that would be:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">cd ~/Desktop/TheUltimateDoom
innoextract setup_final_doom_1.9_(28044).exe
</span></code></pre></div></div> <p>If everything is successful, you will get a whole bunch of output on your screen, that will include something like the following:</p> <div class="centered-image" style="width: 100%"> <figure style="margin: 0"> <img src="/assets/images/2022-05-13/innoextract-wad.jpg" alt="Extract WAD file from Offline Backup Game Installer file"/> </figure> </div> <p>And there is your payload: <code class="language-plaintext highlighter-rouge">DOOM.WAD</code>. Let’s go and introduce it to GZDoom!</p> <h2 id="play-doom-with-gzdoom">Play Doom with GZDoom</h2> <p>Open up a Finder window, go to the directory where all of your now-extracted files are, and find <code class="language-plaintext highlighter-rouge">DOOM.WAD</code>:</p> <div class="centered-image" style="width: 90%"> <figure style="margin: 0"> <img src="/assets/images/2022-05-13/wad-file-location.jpg" alt="Locate DOOM.WAD file in a Finder window"/> </figure> </div> <p>Copy <code class="language-plaintext highlighter-rouge">DOOM.WAD</code> into your local Library files under a <code class="language-plaintext highlighter-rouge">gzdoom</code> directory, so that GZDoom knows where to find it. If a <code class="language-plaintext highlighter-rouge">gzdoom</code> directory does not exist already, you can create it:</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-13/application-support-doom-wad.jpg" alt="Copy DOOM.WAD over to your local Library files"/> <figcaption> Terminal path: <code>~/Library/Application Support/gzdoom</code> </figcaption> </figure> </div> <p>Once you have done this, you can safely delete your <code class="language-plaintext highlighter-rouge">TheUltimateDoom</code> directory where you extracted all of Doom’s files.</p> <p>Now, all that is left is to run GZDoom! Double-click GZDoom in your Applications directory, and you should be greeted with a familiar title screen:</p> <div class="centered-image" style="width: 90%"> <figure style="margin: 0"> <img src="/assets/images/2022-05-13/doom-mac-desktop.jpg" alt="Doom on Mac using GZDoom"/> </figure> </div> <p>If you ever buy any other titles that also have WAD files, like <a href="https://en.wikipedia.org/wiki/Doom_II">Doom II</a>, or <a href="https://en.wikipedia.org/wiki/Heretic_(video_game)">Heretic</a> (or get any of the other <a href="https://doom.fandom.com/wiki/List_of_notable_WADs">list of notable WADs</a>), repeat the same process, and you should also be able to play them in GZDoom.</p> <p>But for now, don your helmet and armour, load your shotgun, and get yourself back to Mars for some classic <a href="https://en.wikipedia.org/wiki/2.5D">2.5D</a> fragging fun!</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>GZDoom is named after <a href="https://de.wikipedia.org/wiki/Sesamstra%C3%9Fe#Graf_Zahl">Graf Zahl</a>, the German name for <a href="https://en.wikipedia.org/wiki/Sesame_Street">Sesame Street</a> character <a href="https://en.wikipedia.org/wiki/Count_von_Count">Count von Count</a>, which <a href="https://github.com/coelckers">Christoph Oelckers</a>, GZDoom’s coder and maintainer, uses as an online <a href="https://www.merriam-webster.com/dictionary/moniker">moniker</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p>The meaning (and pronunciation) of the “Z” in ZDoom would seem to be <a href="https://forum.zdoom.org/viewtopic.php?t=290">up</a> <a href="https://forum.zdoom.org/viewtopic.php?t=1112">for</a> <a href="https://forum.zdoom.org/viewtopic.php?t=3761">debate</a>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="gaming"/><summary type="html"><![CDATA[Send Doomguy to hell without having to migrate to Windows.]]></summary></entry><entry><title type="html">`self.run`</title><link href="https://www.paulfioravanti.com/blog/self-dot-run/" rel="alternate" type="text/html" title="`self.run`"/><published>2022-05-01T19:45:00+10:00</published><updated>2022-05-01T19:45:00+10:00</updated><id>https://www.paulfioravanti.com/blog/self-dot-run</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/self-dot-run/"><![CDATA[<div class="post-audio"> <div class="post-audio-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/L_cNTVWBIIc" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> </div> <div class="spacer"></div> <div class="text"> :studio_microphone: This post has audio narration </div> </div> <p>Coming back home from picking up dinner, I arrived at my front door out of breath, heart beating rapidly, and just generally feeling unpleasant.</p> <p>The cause: exerting the apparently gargantuan effort of climbing up a couple of flights of stairs.</p> <p>In early 2020, we were just finding out about a <a href="https://en.wikipedia.org/wiki/COVID-19">virus</a> that would seem to cause respiratory illness, which, if we are not careful, we may contract in the short term, but will most definitely come into contact with in the long term.</p> <p>My lack of stamina and general fitness at the time made me worried that I was not in any kind of state to potentially take on a fight for my life, should I become infected.</p> <p>“Running helps improve endurance, doesn’t it?”, I thought. “It’s really boring, but I guess I should give it a try.” So, I did.</p> <h2 id="body-compilation">Body Compilation</h2> <p>While everyone understands intuitively how to logistically make your body perform the act of running (walking, but faster, right?), when your initial fitness <a href="https://en.wikipedia.org/wiki/State_(computer_science)">state</a> is the equivalent of an unmaintained <a href="https://en.wikipedia.org/wiki/Software_bug">:beetle:-riddled</a> <a href="https://en.wikipedia.org/wiki/Spaghetti_code">:spaghetti: codebase</a>, some <a href="https://en.wikipedia.org/wiki/Code_refactoring">refactoring</a> work will be needed before you can get yourself to <a href="https://en.wikipedia.org/wiki/Run_command">run</a> properly.</p> <p>If you are just starting to run, what distance should you aim for? Should you be running a certain amount of time per day, or per week? How fast should you be attempting to run? Do you have to start by running? What about jogging, or just walking?</p> <p>Answers to these questions eluded me. I did not want to end up paralysed into doing nothing, but also did not want to overexert myself into injury, or inability to continue longer term.</p> <p>Therefore, like any good computer programmer, I did the laziest thing possible: I outsourced building a running strategy to the well-known <a href="https://www.nhs.uk/live-well/exercise/couch-to-5k-week-by-week/">Couch to 5K</a> plan (C25K).</p> <p>Since it is just a plan, there are many different technical implementations of it, from the official <a href="https://apps.apple.com/gb/app/one-you-couch-to-5k/id1082307672">iOS</a> and <a href="https://play.google.com/store/apps/details?id=com.phe.couchto5K">Android</a> apps, to <a href="https://www.active.com/mobile/couch-to-5k-app">the “Active”-branded iOS app</a> I somehow ended up using (I’d wager C25K apps are all pretty much interchangeable).</p> <p>With canned plan in hand, only the most difficult step remained: execution. I had to actually force myself to do this thing over the course of 9 weeks.</p> <h2 id="program-execution">Program Execution</h2> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-01/sporlab-XiZ7pRvCzro-unsplash.jpg" alt="pair of blue-and-white Adidas running shoes"/> <figcaption style="text-align: center;"> Photo by <a href="https://unsplash.com/@sporlab?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> sporlab </a> on <a href="https://unsplash.com/s/photos/running?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Unsplash </a> </figcaption> </figure> </div> <p>I was self-conscious about jogging during daylight hours. So, I decided to make things even more difficult for myself by going out at the social-distancing-friendly time of 5:00am, three times a week, and do whatever the app robot voice told me to do: “walk”, “brisk walk”, or “jog” at varying intervals.</p> <p>The only thing that made this even slightly bearable was listening to spoken-word <a href="https://en.wikipedia.org/wiki/Podcast">podcasts</a>. They enabled my brain to be distracted by focusing on stories and conversations, while my body and breathing went on auto-pilot to push me through each day of the programme.</p> <p>Although the podcasts helped, sticking to this routine, especially as 5:00am got colder and darker heading into winter, was an exercise in <a href="https://en.wikipedia.org/wiki/Grit_(personality_trait)">grit</a>. Every fibre of my being questioned the need to do this to myself, but I found that as long as I could actually pull myself out of bed, that would be enough momentum to get me out the door, and into the chilly morning air.</p> <blockquote> My wife's nickname for me during this time became "<a href="https://en.wikipedia.org/wiki/Godzilla">Godzilla</a>", due both to my early morning water vapour breath resembling his "atomic breath", and it being a <a href="https://en.wikipedia.org/wiki/Word_play">play on words</a> from the original Japanese pronunciation, <strong>Gojira</strong> (ゴジラ), where <strong>goji</strong> can also mean 5 o'clock (becoming <span class="japanese-with-furigana-romaji"> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">５<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:8px;">ゴ</rt><rp>)</rp></ruby> </span> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">時<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:8px;">ジ</rt><rp>)</rp></ruby> </span> </ruby> </span> ラ). </blockquote> <p>Sometimes, I did lose the battle with my wake-up alarm, necessitating catch up sessions on concurrent days if I was going to stick to C25K’s schedule of 3 runs per week. Sometimes, the battle got lost for me: I pulled both of my <a href="https://en.wikipedia.org/wiki/Calf_(leg)">calf</a> muscles at least once during the course of the C25K, resulting in me limping home and resting for a few days (so just know that if you are going to try this, expect that you will probably lightly injure yourself, and it is not the end of the world).</p> <p>But, every completed run got me that one small step toward finishing the 27 runs the C25K plan had laid out for me (9 weeks x 3 runs per week). The desire to complete this “game”, and those small <a href="https://en.wikipedia.org/wiki/Dopamine">dopamine</a> hits I got after each completed “stage”, provided enough incentive to propel me forward to the end.</p> <h2 id="return-value">Return Value</h2> <p>The rewards I got for completing the program were:</p> <ul> <li>the satisfaction of having hit a goal I set</li> <li>being actually able to run 5 kilometres for the first time in probably ever</li> <li>a general elevated sense of well-being I had not felt for many years</li> <li>becoming a “morning person” by force</li> <li>thinking that maybe I had decreased my chances of being severely impacted by, or dying from, COVID-19</li> </ul> <p>These were all well and good, but now that the goal was done, so was the structure I had relied on for the last 9 weeks to haul myself out of bed.</p> <p>In an attempt to continue momentum, and confirm that getting to 5K was not a one-time fluke, I ended up repeating the final day of the plan 12 more times, playing out a long goodbye to my robot friend.</p> <p>After that got tiresome, I moved on to the app’s “free run” step, containing no robot guidance, which seems to exist as just a general bucket to log run information. 14 “free runs” later, and I started to get the same feeling as when I have completed all the missions and side quests in an <a href="https://en.wikipedia.org/wiki/Open_world">open world</a> game, and the urge to continue starts fizzling out.</p> <p>I was treading water. The C25K app had successfully served its purpose, and it was time to graduate away from it.</p> <h2 id="long-running-process">Long Running Process</h2> <p>Enter <a href="https://www.strava.com/">Strava</a>, probably the most directly beneficial social media app I currently use.</p> <p>As well as logging runs, I have gotten Strava to plot routes on maps for me to run based on what distance I want to try, leading to discovering more of my local area from the ground level. <a href="https://blog.strava.com/routes/">Plotting routes near you</a> is actually a feature for paid subscribers only; after using Strava for a few months with a free account, I decided that it was worth trying out its paid features, and so far, I have no regrets.</p> <p>Wanting to explore routes farther out has gradually lifted the distances I currently run: from 5 kilometres when I first started, to 8 kilometres on an average weekday, and about 10 kilometres on weekends, when I have more time.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-01/lucas-favre-JnoNcfFwrNA-unsplash.jpg" alt="silhouette photo of a person running on road"/> <figcaption style="text-align: center;"> Photo by <a href="https://unsplash.com/@we_are_rising?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> lucas Favre </a> on <a href="https://unsplash.com/s/photos/running?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Unsplash </a> </figcaption> </figure> </div> <p>And I want to do more. What was a huge grind when I first started is now just a part of my life routine, and I actually start to <em>miss</em> running — this boring activity — if I have been unable to do it for a couple of days.</p> <p>Seeing the activities of friends that I follow also provides some <a href="https://en.wikipedia.org/wiki/Accountability_partner">accountability buddy</a>-like benefits, keeping me going so I have something to show for myself on my timeline.</p> <p>Overall, I can definitely recommend giving it a try if you plan to start running or cycling, and I am sure it is better for your physical and mental health than <a href="https://en.wikipedia.org/wiki/Doomscrolling">doomscrolling</a> through the <a href="https://twitter.com/home">bird site</a>.</p> <h2 id="running-toolkit">Running Toolkit</h2> <p>In order to make walking-but-faster as bearable and safe as possible, I found that I needed to open my wallet a few times. Aside from the aforementioned Strava paid account, here is where that money has gone:</p> <h3 id="shoes">Shoes</h3> <p>By far the most comfortable shoes I’ve used for running, or even just general use, are <a href="https://www.adidas.com.au/ultraboost">Adidas Ultraboost</a>. I own multiple pairs, and rotate them on every run in hopes they will last longer.</p> <p>They are quite pricey, so I try and stock up on them when they go on sale.</p> <h3 id="earbuds">Earbuds</h3> <p>I’m mostly a slave to the Apple ecosystem, so I have a set of <a href="https://www.apple.com/airpods-pro/">Airpods Pro</a>. These generally function well, but I found that due to their absence of ear hooks, they would often annoyingly fall out of my ears as I worked up a sweat.</p> <p>I unsuccessfully attempted to use <a href="https://symbioeartips.com/">Symbio ear tips</a> to keep the Airpods in, and it was only when I used <a href="https://www.amazon.com/gp/product/B0837G66Q5">AhaStyle Ear Hooks Covers</a> that I was able to get them to stay firmly in place. The only drawback to using them is having to take the hooks on and off for every run, since the Airpods cannot fit back in their charger when the hooks are on.</p> <p>I now consider it a design flaw that Airpods do not come with some kind of ear stabilisers, especially since other comparable earbud models, like the <a href="https://www.bose.com/en_us/products/headphones/earbuds/bose-sport-earbuds.html">Bose Sport Earbuds</a>, which I have also enjoyed using, have hooks built in. Here’s hoping that Apple sees fit to remedy this on future iterations of their product.</p> <h3 id="headlamp">Headlamp</h3> <p>It is generally dark at 5:00am, so if you are planning to go out for a run at that time, it can help tremendously if you can actually see where you are going (who knew?).</p> <p>There are many types of running headlamps on the market at varying price points. I know that I don’t know a lot about them, and so decided to get a very entry level model at a low price point, the <a href="https://www.foxelli.com/collections/headlamps/products/headlamp-mx20">Foxelli MX20 Headlamp</a>. It has worked well for me running in urban areas that are at least moderately lit by street lamps. However, it has fallen short of providing adequate visibility where that ambient light is in short supply, like off-street paths and bush trails.</p> <p>So, I am currently investigating other models that can up the <a href="https://en.wikipedia.org/wiki/Lumen_(unit)">lumens</a> of light without weighing down my head, or costing a fortune.</p> <h2 id="just-do-something">Just Do Something</h2> <p>Speaking as someone that took care of his body during his teens, but not during his 20s and 30s, and is attempting to pay down that debt now by trying to care again in his 40s, I obviously wish I had changed my mindset sooner. But, better late than never.</p> <p>I now more viscerally understand that I spent too much time focusing on improving my mind as a developer, at the expense of body maintenance. After a morning run, my mind feels a lot sharper, and ready to tackle a day of fighting computers, so it doesn’t even make sense to have avoided doing this for so long, given the benefits.</p> <p>So, if you are finding that you are devoting <em>all</em> your self-improvement efforts towards your <a href="https://en.wikipedia.org/wiki/Ghost_in_the_Shell">ghost, rather than your shell</a>, I would urge you to try to diversify your effort investments, and help give some balance to your human portfolio.</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="fitness"/><category term="running"/><summary type="html"><![CDATA[The act of running is boring, so I grinded until I could tolerate it.]]></summary></entry><entry><title type="html">Mum’s Meetup</title><link href="https://www.paulfioravanti.com/blog/mums-meetup/" rel="alternate" type="text/html" title="Mum’s Meetup"/><published>2021-11-17T13:05:00+11:00</published><updated>2021-11-27T23:05:00+11:00</updated><id>https://www.paulfioravanti.com/blog/mums-meetup</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/mums-meetup/"><![CDATA[<div class="post-audio"> <div class="post-audio-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/Ehi-ett4PWM" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> </div> <div class="spacer"></div> <div class="text"> :studio_microphone: This post has audio narration </div> </div> <p>When you run a meetup, one of the more difficult things to gauge can be whether you’re actually doing it right.</p> <p>Feedback can be elusive, so it can be hard to know if this event that you put on has some value for, or is meaningful to, the people that come along.</p> <p>One day, though, I did get some feedback about a meetup from the most unlikely of places, and it helped reframe my views on the importance of community and human connection.</p> <hr/> <p>I have written posts encouraging participation in meetups before (<em><a href="https://www.paulfioravanti.com/blog/speak-at-meetups/">Speak at a Meetup</a></em>, and <em><a href="https://www.paulfioravanti.com/blog/organise-meetups/">Organise a Meetup</a></em>), but of all my attempts at evangelising this, I think I am most proud of having gotten one particular person into the meetup game:</p> <p>My mother.</p> <p>When Mum retired after a long career in education, I worried about how she would fill her days.</p> <p>Work constituted an important part of her life, and kept her constantly busy. With her children occupied with their own lives, no other family, few close friends who were, themselves, still working, and no specific hobbies that involved socialising, what would she do with herself?</p> <p>I was organising the <a href="https://www.meetup.com/en-AU/Ruby-On-Rails-Oceania-Sydney">Ruby on Rails Oceania Sydney</a> meetup at the time, and suggested that she try finding some communities that interested her, and go along to their events.</p> <p>Making new friends is harder as you get older, so she was hesitant at first. But, after talking up the benefits that I got from meetup participation after moving to a new city where I knew no one, she took the plunge.</p> <p>It was an over-50s social meetup, and on her first timid steps into the event space, the organiser rushed over, welcomed her with a big smile, and introduced her to some of the other members of the group.</p> <p>First impressions from the initial meetup were so good that Mum started regularly attending almost immediately. All the new people she met at the meetup, the places they went to, and the activities they did together, became a staple feature of our conversations.</p> <p>Frequent participation at the meetup events led Mum to become well-known and trusted. It was not long before she was invited into the leadership team, started running specific events for members, and eventually took on more responsibility as one of the main meetup organisers.</p> <p>And when Mum runs a meetup, much like when she ran a single-parent household, you will find no <a href="https://www.merriam-webster.com/dictionary/half%20measure">half measures</a>: multiple social events every week, from pub gatherings to cultural excursions to dinner parties.</p> <p>Between running her own events, helping others run theirs, scouting new venues for future potential meetups, handling new memberships (including dealing with financials), general <a href="https://en.wiktionary.org/wiki/herd_cats">cat herding</a>, and managing the drama found in large social groups of people with various personalities and temperaments, there is no doubt I would define it as a full-time job.</p> <p>Mum and I essentially became peers in this meetup space, though the amount of effort involved in her meetups leaves my own credentials as a so-called “organiser” of some <a href="https://www.merriam-webster.com/dictionary/dinky">dinky</a> technical meetups once a month in the dust!</p> <p>I am glad to have been shown up, though, as Mum’s passion and enthusiasm for meetup organisation and bringing people together led to her to become a happier, and even more outgoing, person.</p> <hr/> <p>We held Mum’s wake in the same pub we celebrated her 60th birthday some years earlier.</p> <p>More than a hundred people crammed into the room we had reserved to farewell Mum<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, and I delivered a tearful eulogy to a group of unfamiliar faces.</p> <p>But, they all knew Mum from the meetup.</p> <p>Over the course of the afternoon, I got to meet many of them, and receive their memories of Mum, each recount a small gift to my mourning soul.</p> <p>One, though, in particular, stood out:</p> <blockquote> <p>“Your Mum saved my life.”</p> </blockquote> <p>I smiled politely, but as if to immediately quash any potential thoughts of hyperbole, they continued on that no, really, they were mentally in a very dark place when they first went on a whim to one of Mum’s meetups.</p> <p>But, Mum took care of them immediately, got them talking to others, which led to conversations that grew into friendships.</p> <p>And that’s what kept them going, enabling them to be there, at the wake, on that day.</p> <hr/> <p>So, I got to take that feedback, on behalf of Mum, and attempt to apply it to my own meetups. Getting together to nerd out over programming languages seems unlikely to save a life in my mind, but, ultimately, who’s to say?</p> <p>You may not know, nor ever know, the impact on others of whatever you put out in the world. I think as long as the effort is worth the intrinsic value you get from it, it’s okay to just keep doing it.</p> <p>In times of plague, it has admittedly been tough to keep up a feeling of community when we are all apart, and the interface to meetups is the same as every work meeting you have been forced to attend on <a href="https://zoom.us/">Zoom</a>.</p> <p>But, I hope that having persevered with them, even in a remote format, is considered better than not, and that once we reach whatever ends up passing for normality, real human connection (and maybe even shared :pizza:?) can come back to meetups.</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>Early 2019, pre-normalisation of social distancing <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="meetups"/><summary type="html"><![CDATA[Organising a meetup gave my Mum a new lease on life.]]></summary></entry><entry><title type="html">A Person’s Character (人という字は)</title><link href="https://www.paulfioravanti.com/blog/persons-character/" rel="alternate" type="text/html" title="A Person’s Character (人という字は)"/><published>2021-10-17T17:30:00+11:00</published><updated>2022-06-18T15:25:00+10:00</updated><id>https://www.paulfioravanti.com/blog/persons-character</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/persons-character/"><![CDATA[<div class="post-audio"> <div class="post-audio-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/TlkoRxyb7E4" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> </div> <div class="spacer"></div> <div class="text"> :studio_microphone: This post has audio narration </div> </div> <p>The father of the bride was making his wedding toast. He recounted how his daughter had left Japan alone to embark on an adventure to Australia, where she met the man she would eventually marry.</p> <p>I stood beside the father, translating his speech to English for the benefit of the Australian locals in attendance. I am not a professional interpreter by any means, but I thought I was doing pretty well.</p> <p>The speech continued, with the father suggesting that since the bridegroom was also a Japanese far from home, the couple could leverage their shared experiences, and support each other as they move forward and grow in their new life together.</p> <p>The father then did something that completely threw me off guard.</p> <p>He raised his two hands up to form a representation of “<a href="https://en.wiktionary.org/wiki/%E4%BA%BA">人</a>” (<em>hito</em>), the <em><a href="https://en.wikipedia.org/wiki/Kanji">kanji</a></em> character for “person”:</p> <div class="centered-image"> <figure> <img src="/assets/images/2021-10-17/person-hands.jpg" alt="Hands in the shape of the Japanese character for person"/> </figure> </div> <p>He then said:</p> <blockquote style="font-size: xx-large;"> <div class="japanese-with-furigana-romaji"> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> Hito</rt> </ruby> <ruby lang="ja" class="japanese"> の <rt class="romaji" style="font-size: 50%"> no</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">漢字<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:8px;">かんじ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> kanji</rt> </ruby> <ruby lang="ja" class="japanese"> は <rt class="romaji" style="font-size: 50%"> wa</rt> </ruby> <ruby lang="ja" class="japanese"> こう <rt class="romaji" style="font-size: 50%"> kō</rt> </ruby> <ruby lang="ja" class="japanese"> だから <rt class="romaji" style="font-size: 50%"> dakara</rt> </ruby> <ruby lang="ja" class="japanese"> ね <rt class="romaji" style="font-size: 50%"> ne.</rt> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> </div> <strong>The <em>kanji</em> for "person" looks like this.</strong> </blockquote> <p>The Japanese in the audience smiled knowingly and laughed politely.</p> <p>I stopped and looked at the father, waiting for some further information that could help me contextualise what seemed like a complete <a href="https://www.merriam-webster.com/dictionary/non%20sequitur">non sequitur</a>.</p> <p>He looked back at me, hands still raised, waiting for his cue to continue after my interpretation.</p> <p>With no further assistance, nor any real idea of how to proceed through this awkward pause, I felt I had no other choice but to also raise my hands into a “人” shape, and just translate what had been said literally:</p> <blockquote> <p>“The <em>kanji</em> for person looks like this…¯\<em>(ツ)</em>/¯”</p> </blockquote> <p>With a sympathetic shrug of the shoulders to the audience, who were clearly as confused as I was, we continued on. Translation of the rest of the speech went fine, but this “人” issue really stuck with me.</p> <p>What did I miss that was so intuitively obvious to the Japanese in attendance, but left me completely blindsided?</p> <h2 id="kinpachi-sensei">Kinpachi-sensei</h2> <p>The answer lies with <em><a href="https://en.wikipedia.org/wiki/Kinpachi-sensei">Kinpachi-sensei</a></em> (<a href="https://ja.wikipedia.org/wiki/3%E5%B9%B4B%E7%B5%84%E9%87%91%E5%85%AB%E5%85%88%E7%94%9F">3<ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">年<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:0;">ねん</rt><rp>)</rp></ruby> </span> </ruby>B<ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">組金八先生<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:0;">ぐみきんぱちせんせい</rt><rp>)</rp></ruby> </span> </ruby></a>, <em>San-nen B-gumi Kinpachi-sensei</em>), a long-running Japanese television drama that portrays a variety of social issues faced by junior high school students.</p> <p><a href="https://en.wikipedia.org/wiki/Tetsuya_Takeda">Tetsuya Takeda</a> (<a href="https://ja.wikipedia.org/wiki/%E6%AD%A6%E7%94%B0%E9%89%84%E7%9F%A2"><ruby lang="ja" class="japanese"> <span class="japanese-compound-word"> <ruby lang="ja" class="japanese"> <ruby lang="ja">武田<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:0;">たけだ</rt><rp>)</rp></ruby> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja"> 鉄矢<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:0;"> てつや</rt><rp>)</rp></ruby> </ruby> </span> </ruby></a>) plays the titular role of school teacher Kinpachi Sakamoto, who sometimes illustrates points of morality to his students by deconstructing parts of <em>kanji</em> characters to reveal their deeper hidden meanings.</p> <p>During a scene in <em>Kinpachi-sensei</em>’s <a href="https://www.tbs.co.jp/tbs-ch/item/d1111/">4th special episode</a>, aired in 1985, Kinpachi writes “人” on the classroom blackboard, and says to his students:</p> <blockquote> <div class="japanese-with-furigana-romaji"> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">君<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">きみ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> Kimi</rt> </ruby> <ruby lang="ja" class="japanese"> たち <rt class="romaji" style="font-size: 50%"> tachi</rt> </ruby> <ruby lang="ja" class="japanese"> いい <rt class="romaji" style="font-size: 50%"> ii</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu</rt> </ruby> <ruby lang="ja" class="japanese"> か <rt class="romaji" style="font-size: 50%"> ka~.</rt> </ruby> <ruby lang="ja" class="japanese"> 〜。 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> Hito</rt> </ruby> <ruby lang="ja" class="japanese"> と <rt class="romaji" style="font-size: 50%"> to</rt> </ruby> <ruby lang="ja" class="japanese"> いう <rt class="romaji" style="font-size: 50%"> iu</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">字<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">じ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> ji</rt> </ruby> <ruby lang="ja" class="japanese"> は <rt class="romaji" style="font-size: 50%"> wa</rt> </ruby> <ruby lang="ja" class="japanese"> ねぇ <rt class="romaji" style="font-size: 50%"> nē,</rt> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> ひとり <rt class="romaji" style="font-size: 50%"> hitori</rt> </ruby> <ruby lang="ja" class="japanese"> の <rt class="romaji" style="font-size: 50%"> no</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">「人」<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:8px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> "hito"</rt> </ruby> <ruby lang="ja" class="japanese"> が <rt class="romaji" style="font-size: 50%"> ga</rt> </ruby> <ruby lang="ja" class="japanese"> もう <rt class="romaji" style="font-size: 50%"> mō</rt> </ruby> <ruby lang="ja" class="japanese"> ひとり <rt class="romaji" style="font-size: 50%"> hitori</rt> </ruby> <ruby lang="ja" class="japanese"> の <rt class="romaji" style="font-size: 50%"> no</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">「人」<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:8px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> "hito"</rt> </ruby> <ruby lang="ja" class="japanese"> を <rt class="romaji" style="font-size: 50%"> o</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">支えて<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:3px;">ささ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> sasaete</rt> </ruby> <ruby lang="ja" class="japanese"> いる <rt class="romaji" style="font-size: 50%"> iru</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">字<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">じ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> ji</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu.</rt> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> <ruby lang="ja" class="japanese"> つまり <rt class="romaji" style="font-size: 50%"> Tsumari,</rt> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> と <rt class="romaji" style="font-size: 50%"> to</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> が <rt class="romaji" style="font-size: 50%"> ga</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-compound-word"> <ruby lang="ja" class="japanese"> <ruby lang="ja">支え<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:3px;">ささ</rt><rp>)</rp></ruby> <rt class="romaji" style="font-size: 50%"> sasae</rt> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">合ってる<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:8px;">あ</rt><rp>)</rp></ruby> <rt class="romaji" style="font-size: 50%"> atteru</rt> </ruby> </span> </ruby> <ruby lang="ja" class="japanese"> から <rt class="romaji" style="font-size: 50%"> kara</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> なん <rt class="romaji" style="font-size: 50%"> nan</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu.</rt> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> Hito</rt> </ruby> <ruby lang="ja" class="japanese"> は <rt class="romaji" style="font-size: 50%"> wa</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> に <rt class="romaji" style="font-size: 50%"> ni</rt> </ruby> <ruby lang="ja" class="japanese"> よって <rt class="romaji" style="font-size: 50%"> yotte</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">支えられ<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:3px;">ささ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> sasaerare,</rt> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:4px;">ひと</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> hito</rt> </ruby> <ruby lang="ja" class="japanese"> の <rt class="romaji" style="font-size: 50%"> no</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">間<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:5px;">あいだ</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> aida</rt> </ruby> <ruby lang="ja" class="japanese"> で <rt class="romaji" style="font-size: 50%"> de</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">人間<rp>(</rp><rt style="ruby-align: center; text-align: center; font-size: 50%; padding-left:6px;">にんげん</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> ningen</rt> </ruby> <ruby lang="ja" class="japanese"> として <rt class="romaji" style="font-size: 50%"> toshite</rt> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-single-word"> <ruby lang="ja">磨かれて<rp>(</rp><rt style="ruby-align: start; text-align: left; font-size: 50%; padding-left:4px;">みが</rt><rp>)</rp></ruby> </span> <rt class="romaji" style="font-size: 50%"> migakarete</rt> </ruby> <ruby lang="ja" class="japanese"> いくん <rt class="romaji" style="font-size: 50%"> ikun</rt> </ruby> <ruby lang="ja" class="japanese"> です <rt class="romaji" style="font-size: 50%"> desu.</rt> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> </div> <br/> Can I have your attention, please. So, the character for "person" consists of one person holding up and sustaining another person. In other words, it is a "person" precisely <em>because</em> a person and another person are supporting each other. A person gets support from other people and their community, and through that support, grows and develops as a human. </blockquote> <p>So, our expectations about the composition of this character are flipped on learning this new information: “人” is not a single character or “person”, but rather one person, <code class="language-plaintext highlighter-rouge">|</code>, leaning into another person, <code class="language-plaintext highlighter-rouge">|</code>, to form <code class="language-plaintext highlighter-rouge">人</code>.</p> <p>For English speakers, the sentiment above perhaps has recognisable echoes of the African proverb <a href="https://en.wikipedia.org/wiki/It_takes_a_village">“It takes a village to raise a child”</a>. But for Japanese, it resonated within the context of marriage, where two people “become one”.</p> <p>For the father of the bride, his daughter and new son-in-law would be leaning on each other for support as they begin their life together, not as two individuals, but as one family unit.</p> <p>Hence, “人” represented the new form their relationship had evolved into.</p> <h2 id="the-power-of-人">The Power of 人</h2> <p>The kicker to this romantic notion? It was <a href="https://www.oricon.co.jp/news/2206715/full/">a complete lie</a>.</p> <p>Takeda confirmed as much in an appearance he made in 2021 on The Wide Show (<a href="https://www.fujitv.co.jp/widna-show/">ワイドナショー</a>), a Japanese news and entertainment television program.</p> <p>But, the meme has had decades to burrow into the collective consciousness of a generation, and regardless of the generally accepted <a href="https://en.wiktionary.org/wiki/%E4%BA%BA/derived_terms#Glyph_origin">glyph origin of 人</a> to be a “side view of a standing man, highlighting the arms and legs” (known before Takeda made his admission, of course), I would wager we will see “人” appear again at future weddings.</p> <p>If I had my time again at that speech, knowing what I know now, I think I would offer up the following translation for “the <em>kanji</em> for ‘person’ looks like this”:</p> <blockquote> <p><strong>[Hold both hands apart in a straight “<code class="language-plaintext highlighter-rouge">|</code>” formation]</strong>: “The bride and groom, once two individuals…“<br/> <strong>[Bring hands together to form “<code class="language-plaintext highlighter-rouge">人</code>”]</strong>: “…have come together to become a single family unit, leaning on each other for support as they begin their new life together, forming this, the Japanese character for ‘person’.”<br/> <strong>[Push hands slightly forward]</strong>: “These two have become one”.</p> </blockquote> <p>It’s certainly not a literal translation, nor an academic one, nor one that directly infers how the character of “人” is derived. Rather, it’s just a short bit of fanciful flourish that I think conveys enough meaning for the time given without having to impart all the details given in this blog post.</p> <p>So, if you ever somehow find yourself in a similar wedding-speech-interpreting situation, feel free to use or riff on my translation, and hopefully that will at least reduce your number of potential awkward pauses by one.</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="japanese"/><category term="日本語"/><summary type="html"><![CDATA["人" may be the _kanji_ for person, but its simplicity masks a deeper meaning.]]></summary></entry></feed>