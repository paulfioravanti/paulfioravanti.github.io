<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://www.paulfioravanti.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://www.paulfioravanti.com/" rel="alternate" type="text/html"/><updated>2022-06-20T18:45:22+10:00</updated><id>https://www.paulfioravanti.com/feed.xml</id><title type="html">Floor and Varnish</title><subtitle>The permanent drafts folder for brain dumps of Paul Fioravanti</subtitle><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><entry><title type="html">AppleScript Records: Strings as Keys</title><link href="https://www.paulfioravanti.com/blog/applescript-records-string-keys/" rel="alternate" type="text/html" title="AppleScript Records: Strings as Keys"/><published>2022-06-10T14:30:00+10:00</published><updated>2022-06-14T10:15:00+10:00</updated><id>https://www.paulfioravanti.com/blog/applescript-records-string-keys</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/applescript-records-string-keys/"><![CDATA[<p>I am a <a href="https://en.wikipedia.org/wiki/MacOS">macOS</a> user, and my attempts at creating programs to control my computer have necessitated working with <a href="https://en.wikipedia.org/wiki/AppleScript">AppleScript</a>. Like every programming language, it has its idiosyncrasies, but one in particular sent me down a <a href="https://en.wiktionary.org/wiki/rabbit_hole">rabbit hole</a>, which I hope this post can help you avoid should you find yourself in similar circumstances.</p> <p>Many programming languages have a built-in <a href="https://en.wikipedia.org/wiki/Key%E2%80%93value_database">key-value</a> data structure, which are known by different names: <a href="https://ruby-doc.org/core/Hash.html">hashes</a>, <a href="https://hexdocs.pm/elixir/Map.html">maps</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">objects</a>, <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a> etc. The AppleScript structure equivalent is called a <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_classes.html#//apple_ref/doc/uid/TP40000983-CH1g-BBCDGEAH">record</a>, and they look outwardly similar to those of other languages:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nv">product</span><span class="p">:</span><span class="s2">"pen"</span><span class="p">,</span><span class="w"> </span><span class="nv">price</span><span class="p">:</span><span class="mf">2.34</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>However, a big difference is that while many other languages will allow you to use any kind of data type as a key (<a href="https://en.wikipedia.org/wiki/String_(computer_science)">strings</a>, <a href="https://en.wikipedia.org/wiki/Integer">integers</a> etc), record keys can only be <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_fundamentals.html#//apple_ref/doc/uid/TP40000983-CH218-SW5">Properties</a>, which are <a href="http://books.gigatux.nl/mirror/applescriptdefinitiveguide/applescpttdg2-CHP-13-SECT-11.html">“effectively tokens created by AppleScript at compile time”</a>, and essentially act like <a href="https://en.wikipedia.org/wiki/Constant_(computer_programming)">constants</a> (which also means there’s no chance to, say, “<a href="https://api.rubyonrails.org/classes/String.html#method-i-constantize">constantize</a>” a string received at run time). Therefore, this kind of record is not legal:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="s2">"product"</span><span class="p">:</span><span class="s2">"pen"</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">:</span><span class="mf">2.34</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>The result of this is that a script must always know in advance what keys it plans to use to look up values in a record: no lookup is possible using, say, some variable that references a string.</p> <p>This is unfortunate, because I wanted to perform dynamic lookups on a record by fetching values from it based on some string I would receive from the result of a <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH">handler</a> (function) call. Here is a code snippet indicating what I <em>attempted</em> to write in order to perform a “zoom in”, which would send different shortcut keystrokes depending on what application was currently in focus:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Chrome Zoom In keyboard shortcut is ⌘+, while Postman is ⌘=</span><span class="w">
</span><span class="c1"># NOTE: This record will raise a syntax error.</span><span class="w">
</span><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="s2">"Google Chrome"</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Postman"</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">
</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="c1"># returns a string like "Google Chrome" for the application currently in focus</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="c1"># Fetch the appropriate "zoom in" value from the record based on the `activeApp` key</span><span class="w">
</span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w">

</span><span class="c1"># Perform the keyboard shortcut</span><span class="w">
</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span></code></pre></div></div> <p>I initially thought that perhaps the reason for the error was because the record key properties follow the rules of <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_lexical_conventions.html#//apple_ref/doc/uid/TP40000983-CH214-SW4">Identifiers</a>, which have a limited set of characters they are allowed to use (that do not include spaces). But…</p> <blockquote> <p>“AppleScript provides a loophole […]: identifiers whose first and last characters are vertical bars (|) can contain any characters”.</p> </blockquote> <p>So, I figured that changing the record definition to:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">|</span><span class="nv">Google</span><span class="w"> </span><span class="nv">Chrome</span><span class="err">|</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="err">|</span><span class="nv">Postman</span><span class="err">|</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>or</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">|</span><span class="s2">"Google Chrome"</span><span class="err">|</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="err">|</span><span class="s2">"Postman"</span><span class="err">|</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>would work. Alas, they did not. The workaround for getting this code running correctly was to fall back to a traditional <code class="language-plaintext highlighter-rouge">if</code> statement:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">

</span><span class="k">if</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="s2">"Google Chrome"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="s2">"+"</span><span class="w">
</span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="s2">"Postman"</span><span class="w"> </span><span class="k">then</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="s2">"="</span><span class="w">
</span><span class="k">else</span><span class="w">
  </span><span class="nb">display</span><span class="w"> </span><span class="nv">notification</span><span class="w"> </span><span class="s2">"Cannot zoom in"</span><span class="w"> </span><span class="nv">with</span><span class="w"> </span><span class="na">title</span><span class="w"> </span><span class="s2">"Error"</span><span class="w">
  </span><span class="nb">return</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">if</span><span class="w">

</span><span class="c1"># Perform the keyboard shortcut</span><span class="w">
</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span></code></pre></div></div> <p>At this point, the sane thing to do is to accept that you now have working code that is fit for purpose, and move on.</p> <p>But, I could not shake the feeling that there <em>must</em> be a way for string keys to work, even though hours of internet searching turned up nothing. How could every other programming language I know of do this, but not AppleScript? It did not make sense to me.</p> <p>So, I asked the <a href="https://twitter.com">bird site</a> in a <a href="https://twitter.com/paulfioravanti/status/1517743540784168960?s=20&amp;t=ai1eJAVRQpkoQ2bwoL8W0Q">last ditch attempt</a>, and it delivered in the form of <a href="http://piyocast.com/as/">Takaaki Naganoya</a>, whose efforts in creating a <a href="https://twitter.com/Piyomaru/status/1517769013488918528">solution</a> using the <a href="https://developer.apple.com/documentation/foundation">Foundation</a> framework led me to be able to change the original code to:</p> <div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">use</span><span class="w"> </span><span class="nb">AppleScript</span><span class="w"> </span><span class="nb">version</span><span class="w"> </span><span class="s2">"2.4"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">framework</span><span class="w"> </span><span class="s2">"Foundation"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">scripting</span><span class="w"> </span><span class="nv">additions</span><span class="w">

</span><span class="k">property</span><span class="w"> </span><span class="nv">zoomInKeys</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">|</span><span class="nv">Google</span><span class="w"> </span><span class="nv">Chrome</span><span class="err">|</span><span class="p">:</span><span class="s2">"+"</span><span class="p">,</span><span class="w"> </span><span class="err">|</span><span class="nv">Postman</span><span class="err">|</span><span class="p">:</span><span class="s2">"="</span><span class="p">}</span><span class="w">

</span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKeysDict</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="se">¬
</span><span class="w">    </span><span class="nb">current application</span>'s <span class="nv">NSDictionary</span>'s <span class="nv">dictionaryWithDictionary</span><span class="p">:</span><span class="nv">zoomInKeys</span><span class="w">

</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w">
    </span><span class="k">set</span><span class="w"> </span><span class="nv">activeApp</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nb">first</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nb">whose</span><span class="w"> </span><span class="na">frontmost</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">

</span><span class="k">set</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="p">(</span><span class="nv">zoomInKeysDict</span>'s <span class="nv">valueForKey</span><span class="p">:</span><span class="nv">activeApp</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nv">anything</span><span class="w">

</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">process</span><span class="w"> </span><span class="nv">activeApp</span><span class="w">
    </span><span class="nv">keystroke</span><span class="w"> </span><span class="nv">zoomInKey</span><span class="w"> </span><span class="nv">using</span><span class="w"> </span><span class="p">{</span><span class="nv">command</span><span class="w"> </span><span class="nv">down</span><span class="p">}</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span></code></pre></div></div> <p>Now, this code <em>works</em>. But, the <a href="https://en.wiktionary.org/wiki/shotgun_approach">shotgun approach</a> of bringing in a whole framework and other random handlers just to solve this small problem, coupled with the awkward readability of some of the <a href="https://en.wikipedia.org/wiki/API">API</a>s (looking at you, <code class="language-plaintext highlighter-rouge">dictionaryWithDictionary</code>), means that I think the code is now more difficult to understand, for very negligible benefit. So, <code class="language-plaintext highlighter-rouge">if</code> statements it is.</p> <p>If I wanted to dive even further down the rabbit hole, I could have attempted adapting Takaaki’s <a href="https://twitter.com/Piyomaru/status/1517770289597513730">other solution</a> to the same problem, which was done in vanilla AppleScript, without using Foundation. But, at this point, I think I’m good.</p> <p>If you are interested in seeing how I ended up using AppleScript for my own use case of mapping <a href="https://en.wikipedia.org/wiki/Stenotype">stenography</a> chords to macOS keyboard shortcuts, check out my <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/src/command">steno dictionaries GitHub repository</a>.</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="hash"/><category term="dictionary"/><category term="apple"/><category term="scripting"/><summary type="html"><![CDATA[Not as straightforward as you may think.]]></summary></entry><entry><title type="html">Steno Gaming: Doom Typist</title><link href="https://www.paulfioravanti.com/blog/steno-gaming-doom-typist/" rel="alternate" type="text/html" title="Steno Gaming: Doom Typist"/><published>2022-06-07T22:41:00+10:00</published><updated>2022-06-07T22:41:00+10:00</updated><id>https://www.paulfioravanti.com/blog/steno-gaming-doom-typist</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/steno-gaming-doom-typist/"><![CDATA[<p>Playing games is a great way to get better at <a href="https://en.wikipedia.org/wiki/Touch_typing">touch typing</a> with a <a href="https://en.wikipedia.org/wiki/QWERTY">standard keyboard</a>.</p> <p>A quick web search for typing games will likely net you results including <a href="https://en.wikipedia.org/wiki/Mavis_Beacon_Teaches_Typing">Mavis Beacon</a> mini-games, web-based shooters like <a href="https://zty.pe/">ZType</a>, and thoughtful adventure games like <a href="https://en.wikipedia.org/wiki/Epistory_-_Typing_Chronicles">Epistory - Typing Chronicles</a>. <a href="https://en.wikipedia.org/wiki/Stenotype">Stenography</a> enthusiasts have some extra options, with games specifically developed for them, like the free-to-play <a href="http://qwertysteno.com/Games/CargoCrisis.php">Cargo Crisis</a> and <a href="http://www.foralltoplay.com/games/steno-arcade/index.php">Steno Arcade</a>.</p> <p>Probably one of the most quirky typing games around is the on-rails shooter <a href="https://en.wikipedia.org/wiki/The_Typing_of_the_Dead">The Typing of the Dead</a>, an official <a href="https://en.wikipedia.org/wiki/Video_game_modding">mod</a> of <a href="https://en.wikipedia.org/wiki/The_House_of_the_Dead">The House of the Dead</a>. Alas, I do not have an old enough computer to play it at home, nor a <a href="https://en.wikipedia.org/wiki/Microsoft_Windows">Windows</a> machine to attempt its modern sequel, <a href="https://en.wikipedia.org/wiki/The_House_of_the_Dead:_Overkill">The Typing of the Dead: Overkill</a>. So, I will have to <a href="https://dictionary.cambridge.org/dictionary/english/take-a-rain-check-on-sth">take a rain check</a> on chording through those particular zombie swarms, but are there any similar alternatives?</p> <p>There most certainly are. Modders have gifted us with what I think is currently the best typing game of them all: <a href="https://github.com/mmaulwurff/typist.pk3">Typist.pk3</a><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, a “mod for <a href="https://en.wikipedia.org/wiki/Doom_(1993_video_game)">Doom</a> [1993] engine games that turns them into typing exercises”. “Doom engine games” are ones that can run inside a Doom <a href="https://zdoom.org/wiki/Source_port">source port</a> like <a href="https://zdoom.org/wiki/GZDoom">GZDoom</a> (eg Doom, <a href="https://en.wikipedia.org/wiki/Doom_II">Doom II</a>, <a href="https://en.wikipedia.org/wiki/Heretic_(video_game)">Heretic</a>, <a href="https://en.wikipedia.org/wiki/Hexen:_Beyond_Heretic">Hexen</a>, and <a href="https://doom.fandom.com/wiki/List_of_notable_WADs">others</a>).</p> <p>Here is a video of me doing some off-rails shooting with Doom Typist, using a <a href="https://www.gboards.ca/product/georgi">Georgi</a> stenographic keyboard.</p> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/OWnSjpOIT8s" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Doom Typist - Episode 1 Map 1 </figcaption> </div> <p>Want to give it a try yourself? Read on!</p> <p>If you are a <a href="https://en.wikipedia.org/wiki/QWERTY">QWERTY</a> typist, you will not have to worry about any steno-keyboard-related technical details below. You can just:</p> <ul> <li><a href="https://zdoom.org/downloads">Install GZDoom</a></li> <li>Buy a copy of Doom (<a href="https://www.gog.com/en/game/the_ultimate_doom">GOG.com</a> [<a href="https://en.wikipedia.org/wiki/Microsoft_Windows">Windows</a>, but with options to use with other platforms], <a href="https://store.steampowered.com/app/2280/Ultimate_Doom/">Steam</a> [Windows only])</li> <li><a href="https://zdoom.org/wiki/Installation_and_execution_of_ZDoom">Follow the instructions</a> to get Doom up and running with GZDoom, including extracting the <a href="https://doomwiki.org/wiki/WAD">WAD</a> game file from your copy of Doom</li> <li><a href="https://github.com/mmaulwurff/typist.pk3/releases">Download the latest Typist release</a>, and load it with GZDoom</li> <li>Bail out from the rest of this post, and enjoy your new typing game!</li> </ul> <blockquote> <p>The previous two blog posts to this one were both specifically written in service to, and as background context for, this post (though they are also meant to stand on their own):</p> <ul> <li><em><a href="https://www.paulfioravanti.com/blog/classic-doom-mac/">Play Classic Doom on a Mac</a></em></li> <li><em><a href="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/">Flashing Georgi Firmware</a></em></li> </ul> <p>Hopefully, you will find the answers to any specific questions this post does not answer in either one of them.</p> </blockquote> <hr/> <p>Still here? Okay, so I would wager that you are probably a <a href="https://www.openstenoproject.org/plover/">Plover</a> steno enthusiast, and maybe also a Georgi user. You may have noticed a fair bit of non-standard keystroke <a href="https://dictionary.cambridge.org/dictionary/english/shenanigans">shenanigans</a> going on in the video. Do not fret, though: although we will be getting technical (ie editing <a href="https://en.wikipedia.org/wiki/Firmware">firmware</a>), all customisations will be revealed so that you, too, can chord your way through Doom smoother than <a href="https://doom.fandom.com/wiki/Chainsaw">chainsaw</a>-ing through an <a href="https://doom.fandom.com/wiki/Imp">imp</a>!</p> <p>So, prepare your <a href="https://evildead.fandom.com/wiki/Boomstick">boomstick</a> and let’s begin!</p> <div class="centered-image" style="width: 75%"> <figure> <img src="/assets/images/2022-06-07/follow_your_dreams_by_azakachi_rd_17_d6of6bm.jpg" alt="Doom: Follow Your Dreams"/> <figcaption> Art by <a href="https://www.deviantart.com/azakachi-rd-17"> AzakaChi-RD-17 </a> on <a href="https://www.deviantart.com/azakachi-rd-17/art/Follow-your-dreams-403815874"> Deviant Art </a> </figcaption> </figure> </div> <h2 id="between-two-worlds">Between Two Worlds</h2> <p>A steno gamer cannot game in steno mode alone. Open up Doom, and you can navigate the menus using your arrow key chords, but when you start the game, you will likely find your <a href="https://en.wikipedia.org/wiki/Player_character">player character</a> unable to move, regardless of what keys you press. This is because:</p> <ul> <li>“Plover’s text and formatting strokes <a href="https://github.com/openstenoproject/plover/wiki/Dictionary-Format#keyboard-shortcuts">can’t send arbitrary key strokes</a>”, which means Plover cannot “press”, say, arrow keys or the Return key, in the same way as a QWERTY keyboard does: it only <em>simulates</em> the key presses. Unfortunately, GZDoom does not seem to recognise these “simulated key presses” during gameplay<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></li> <li>Stenotype is not really optimised for sending the <a href="https://en.wikipedia.org/wiki/Arrow_keys#WASD_keys">WASD</a>-style repeating key presses needed for movement in games<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup></li> </ul> <p>But! Lucky for Georgi owners, <a href="https://github.com/qmk/qmk_firmware/tree/master/keyboards/gboards/georgi">its firmware</a> has a <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#entering-qmk-gaming-mode">Gaming mode</a> that “acts like a traditional [QWERTY] keyboard, as opposed to stenotype”, enabling <em>real</em> keystrokes and key repetition (Georgi’s <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#modes">QWERTY mode</a> [not the same as Gaming mode] acts like stenotype, so we cannot game with it).</p> <p>For playing Doom Typist with steno on a Georgi, this means you can:</p> <ul> <li>Use Gaming Mode when you are in <span style="color: blue">Exploration Mode</span> (walking around, opening doors, flipping switches) <img src="/assets/images/2022-06-07/exploration-mode.jpg" alt="Exploration Mode" title="Exploration Mode" width="12%"/></li> <li>Use Steno Mode when you are in <span style="color: red">Combat Mode</span> (typing answers to hit your targets, dashing) <img src="/assets/images/2022-06-07/combat-mode.jpg" alt="Combat Mode" title="Combat Mode" width="30%"/></li> </ul> <p>I have found some of the challenges around having one foot in steno-land, and the other in standard-keyboard-land, within a high-tension environment that requires quick reflexes to be:</p> <ul> <li>remembering which typing mode you are in: Steno or Gaming (unlike the <span style="color: blue">Exploration</span>/<span style="color: red">Combat </span>game mode colour difference, there is no visual cue for your current typing mode<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>)</li> <li>remembering to <em>actually</em> change from Gaming to Steno mode when the game automatically switches you from <span style="color: blue">Exploration</span> to <span style="color: red">Combat</span> Mode upon encountering an enemy</li> <li>remembering to dash away when sudden close encounters with enemies occur (and which typing mode allows that)</li> </ul> <p>The customisations I made to my Georgi layout, in both Steno and Gaming layers, and the way I set up my player control scheme, helped at least part way in overcoming these challenges (getting the full way will probably just require continued practice to <a href="https://en.wiktionary.org/wiki/git_gud">git gud</a>).</p> <p>So, here’s the full list of everything I have done so far to make playing Doom steno-able.</p> <blockquote> <p>You can find the code encompassing all of the changes explained in detail below in my <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">Georgi QMK keymaps GitHub repository</a>.</p> </blockquote> <h2 id="controls">Controls</h2> <p>Setting up controls for Doom Typist was a more involved matter than I originally planned for.</p> <p>GZDoom, the Doom source port, plays more than just Doom itself: it provides a very robust selection of <a href="https://zdoom.org/wiki/Customize_controls">control mappings</a> that can be used across a variety of games. Mapping them all to Georgi keymaps is not a task I want to undertake right now, so I used Doom’s original instruction booklet to help filter down all the options to the ones that high-school me would have actually used during gameplay.</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/doom-manual-controls.jpg" alt="Doom Manual Controls"/> <figcaption> Commands and Shortcuts section from the original <a href="https://www.starehry.eu/download/action3d/docs/Doom-Manual.pdf"> Doom Manual </a> </figcaption> </figure> </div> <p>All of pink-outlined controls above will need to be mapped in Georgi’s Gaming mode. I do not intend to make one-to-one mappings of the keys to their literal equivalents in the Gaming mode keymaps, but rather focus on what form of key patterns would feel intuitive and comfortable for the controls.</p> <p>This will all be very subjective, so hopefully they can serve as a template for you to create your own custom control schemes if you have other ideas.</p> <blockquote> <p>You can see what the literal Gaming Mode keys look like in the <a href="https://github.com/qmk/qmk_firmware/blob/89a5d5aea095172c23b6e886217078ffe404ecec/keyboards/gboards/georgi/keymaps/default/keymap.c#L233">Georgi default Gaming keymaps</a>, and compare them to <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/4881b7ace9403a9fbdf0ece09a18f0916c4a8a01/keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c#L418">my personal ones</a>). The literal <code class="language-plaintext highlighter-rouge">KC_*</code> keycodes you will see referenced from here on in code examples are based on my personal keymaps.</p> </blockquote> <h3 id="movement-and-actions">Movement and Actions</h3> <p>The way I configured movement is based on <a href="https://en.wikipedia.org/wiki/Arrow_keys#ESDF_keys">ESDF keys</a> on the left side, and <a href="https://en.wikipedia.org/wiki/Vi">Vi</a>-style <a href="https://en.wikipedia.org/wiki/Arrow_keys#HJKL_keys">HJKL keys</a> on the right.</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/movement-controls.png" alt="Doom Georgi Movement Controls"/> </figure> </div> <p>Unlike Heretic or Hexen, Doom does not have the concept of “look up/down” (though many of its mods do…), so the two keys between Look Left and Look Right remain blank until I play a game that uses them. Firing weapons, opening doors and toggling switches (“Use”), and Toggle Automap all felt like thumb cluster keys, so that is where they reside. As for “running” and “fast turning”, I decided to combine them all together into a “Toggle Run” chord deliberately meant to be a complex enough set of keys that I would not inadvertently press by mistake.</p> <p>Those keys get mapped in-game on the Customize Action Controls screen:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/customize-action-controls.jpg" alt="GZDoom Customize Action Controls"/> <figcaption> Stripped down action controls </figcaption> </figure> </div> <p>The Toggle Run chord is implemented as a <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/feature_combo.md">QMK Combo</a>, since it is a non-steno chord for standard keyboards that lives in the Gaming mode layer, and is hence outside of Plover’s purview. Defining combos consists of the following three main steps:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// STEP 1: Give the combos names.</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
  <span class="c1">// ...</span>
  <span class="n">DOOM_TYPIST_TOGGLE_RUN</span>
<span class="p">};</span>

<span class="c1">// STEP 2: Define the set of keys for the combos.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_toggle_run_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_U</span><span class="p">,</span> <span class="n">KC_I</span><span class="p">,</span> <span class="n">KC_O</span><span class="p">,</span> <span class="n">KC_P</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="c1">// STEP 3: Define what keystroke the combos should send,</span>
<span class="c1">// and register them in `key_combos`.</span>
<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_TOGGLE_RUN</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_toggle_run_combo</span><span class="p">,</span> <span class="n">KC_TAB</span><span class="p">)</span>
<span class="p">};</span>
</code></pre></div></div> <blockquote> <p>In <em><a href="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/">Flashing Georgi Firmware</a></em>, I go into more detail about <a href="https://qmk.fm/">QMK</a> Combos for Georgi. Even more detail than that can be found in <em><a href="https://www.paulfioravanti.com/blog/chording-qwerty-qmk-combos/">Chording QWERTY with QMK Combos</a></em>.</p> </blockquote> <p>For <em>every</em> combo change, you <em>must</em> change the <code class="language-plaintext highlighter-rouge">COMBO_COUNT</code> counter in your <code class="language-plaintext highlighter-rouge">config.h</code> file to match the number of combos in <code class="language-plaintext highlighter-rouge">key_combos</code>, otherwise you will get compilation errors. For my configuration, this looks like:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/config.h</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
<span class="cp">#define COMBO_COUNT 44
</span></code></pre></div></div> <p>We will see where all those other combos came from very soon.</p> <h3 id="weapon-selection">Weapon Selection</h3> <p>Each weapon in Doom is assigned a number, so I wanted to be able to use the steno number chords for 0-9 to select them, even in Gaming mode.</p> <div class="centered-image" style="width: 70%"> <figure> <img src="/assets/images/2022-06-07/georgi-numbers-small-looping.gif" alt="Georgi Numbers 0-9"/> <figcaption> Steno number chords for 0-9 using the <kbr>#</kbr> modifier key </figcaption> </figure> </div> <blockquote> <p>See <em><a href="https://www.paulfioravanti.com/blog/steno-numbers-georgi/">Stenography Numbers on a Georgi</a></em> for more information about number chords.</p> </blockquote> <p>In the <a href="https://github.com/qmk/qmk_firmware/blob/89a5d5aea095172c23b6e886217078ffe404ecec/keyboards/gboards/georgi/keymaps/default/keymap.c#L233">Georgi default Gaming keymaps</a>, number keystrokes live in Gaming Layer 2. To get from Gaming Layer 1 (<code class="language-plaintext highlighter-rouge">GAMING</code>) to Gaming Layer 2 (<code class="language-plaintext highlighter-rouge">GAMING_2</code>), the layout has a key that uses the QMK <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#switching-and-toggling-layers-idswitching-and-toggling-layers"><code class="language-plaintext highlighter-rouge">LT(layer, kc)</code></a> function, which “momentarily activates <code class="language-plaintext highlighter-rouge">layer</code> when held, and sends <code class="language-plaintext highlighter-rouge">kc</code> when tapped”. In order to mimic steno number functionality, I assigned keystrokes that call that function to the keys that are assigned to the number keys (<code class="language-plaintext highlighter-rouge">#</code>) on Georgi’s steno layer:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/number-chords.png" alt="Momentarily active Gaming Layer 2 to access number keys"/> </figure> </div> <p>For <code class="language-plaintext highlighter-rouge">GAMING_2</code> access to numbers, we do not need to care too much about the <code class="language-plaintext highlighter-rouge">kc</code> for number access (feel free to assign any key to this: I used left and right brackets, <code class="language-plaintext highlighter-rouge">LT(GAMING_2, KC_LBRC)</code> and <code class="language-plaintext highlighter-rouge">LT(GAMING_2, KC_RBRC)</code>, quite arbitrarily in <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/2f78c94dfb233f4b11e51403826265cdfdaaec88/keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c#L566">my keymaps</a>).</p> <p>Here’s what the image above looks like in layer code (non-number-related keycodes are “commented out” with <code class="language-plaintext highlighter-rouge">/**/</code>):</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">keymaps</span><span class="p">[][</span><span class="n">MATRIX_ROWS</span><span class="p">][</span><span class="n">MATRIX_COLS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">GAMING</span><span class="p">]</span> <span class="o">=</span> <span class="n">LAYOUT_georgi</span><span class="p">(</span>
        <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span>
        <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span>
         <span class="n">LT</span><span class="p">(</span><span class="n">GAMING_2</span><span class="p">,</span> <span class="n">KC_LBRC</span><span class="p">),</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="n">LT</span><span class="p">(</span><span class="n">GAMING_2</span><span class="p">,</span> <span class="n">KC_RBRC</span><span class="p">)</span>
    <span class="p">),</span>
    <span class="p">[</span><span class="n">GAMING_2</span><span class="p">]</span> <span class="o">=</span> <span class="n">LAYOUT_georgi</span><span class="p">(</span>
        <span class="cm">/**/</span><span class="p">,</span> <span class="n">KC_1</span><span class="p">,</span> <span class="n">KC_2</span><span class="p">,</span> <span class="n">KC_3</span><span class="p">,</span> <span class="n">KC_4</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="n">KC_6</span><span class="p">,</span> <span class="n">KC_7</span><span class="p">,</span> <span class="n">KC_8</span><span class="p">,</span> <span class="n">KC_9</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span>
        <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span>
                          <span class="cm">/**/</span><span class="p">,</span> <span class="n">KC_5</span><span class="p">,</span> <span class="n">KC_0</span><span class="p">,</span> <span class="cm">/* | */</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span><span class="p">,</span> <span class="cm">/**/</span>
    <span class="p">)</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="automap">Automap</h3> <p>For Automap-related controls, rather than create specific QMK combos to mirror stenographic words that describe their meaning (ie outlines for “follow”, “mark” etc), I decided instead to re-create the entire steno <a href="https://www.artofchording.com/sounds/fingerspelling.html">fingerspelling</a> alphabet as combos, and leave the controls as their default single-letter values.</p> <p>The steps for creating the combos are the same as before; the general idea can be gleaned from the abbreviated configuration below, but the entire list can be found in <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">my Georgi keymaps</a>:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// STEP 1: Give the combos names.</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
    <span class="n">STENO_A</span><span class="p">,</span>
    <span class="c1">// ...</span>
    <span class="n">STENO_Z</span>
<span class="p">}</span>

<span class="c1">// STEP 2: Define the set of keys for the combos.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_a_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_BACKSPACE</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// ...</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_z_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_A</span><span class="p">,</span> <span class="n">KC_W</span><span class="p">,</span> <span class="n">KC_S</span><span class="p">,</span> <span class="n">KC_E</span><span class="p">,</span> <span class="n">KC_D</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="c1">// STEP 3: Define what keystroke the combos should send,</span>
<span class="c1">// and register them in `key_combos`.</span>
<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">STENO_A</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">steno_a_combo</span><span class="p">,</span> <span class="n">KC_A</span><span class="p">),</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">STENO_Z</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">steno_z_combo</span><span class="p">,</span> <span class="n">KC_Z</span><span class="p">),</span>
<span class="p">};</span>
</code></pre></div></div> <p>A big block of new chord config rarely goes 100% smooth, of course: there were a few fingerspelling combos whose chords conflicted with the Doom movement controls. Hence, I ended up adding an equivalent steno <code class="language-plaintext highlighter-rouge">-Z</code> key (for my keymaps, this ended up being <code class="language-plaintext highlighter-rouge">KC_QUOTE</code>) at the end of the fingerspelling chords for <code class="language-plaintext highlighter-rouge">K</code>, <code class="language-plaintext highlighter-rouge">P</code>, <code class="language-plaintext highlighter-rouge">R</code>, and <code class="language-plaintext highlighter-rouge">W</code> to disambiguate them:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// NOTE: KC_QUOTE/-Z needed to allow strafing left and turning left simultaneously</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_k_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_S</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">KC_QUOTE</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// NOTE: KC_QUOTE/-Z needed to allow moving forward and turning left simultaneously</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_p_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_E</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">KC_QUOTE</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// NOTE: KC_QUOTE/-Z needed to allow strafing right and turning left simultaneously</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_r_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_F</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">KC_QUOTE</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// KC_QUOTE/-Z needed to allow moving backward and turning left simultaneously</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">steno_w_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_D</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">KC_QUOTE</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="typist-controls">Typist Controls</h3> <p>Now that we have the controls of Doom itself configured for Gaming Mode, it is time to shift our focus over to adapting the <a href="https://github.com/mmaulwurff/typist.pk3#how-to-play">Typist.pk3 controls</a>.</p> <div class="centered-image" style="width: 80%"> <figure> <img src="/assets/images/2022-06-07/typist-controls.jpg" alt="Typist.pk3 configurable controls"/> <figcaption> </figcaption> </figure> </div> <p>Since all the “typing” in <span style="color: red">Combat Mode</span> will actually be done with steno chords, I created a new <a href="https://github.com/paulfioravanti/steno-dictionaries/blob/main/dictionaries/gaming/gaming-gzdoom-typist.json">Doom-Typist-specific dictionary</a> in <a href="https://github.com/paulfioravanti/steno-dictionaries/">my steno dictionaries</a>, encompassing controls that can be configured in-game, as well as those that cannot:</p> <p><strong><code class="language-plaintext highlighter-rouge">dictionaries/gaming/gaming-doom-typist.json</code></strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"A*UPL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:return to AUto Mode}{:KEY_COMBO:CONTROL_L}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"K-RBGS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:dash left}{:ATTACH:/dl}{:KEY_COMBO:RETURN}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"KHRAUL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:CLear ALL}{:KEY_COMBO:CONTROL_L(BACKSPACE)}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"KPWA*T"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:force COMBAT}{:KEY_COMBO:GRAVE}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"P-RBGS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:dash forward}{:ATTACH:/df}{:KEY_COMBO:RETURN}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"R-RBGS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:dash right}{:ATTACH:/dr}{:KEY_COMBO:RETURN}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"SPHRO*R"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:force EXPLORE}{:KEY_COMBO:ESCAPE}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"W-RBGS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:CMT:dash backward}{:ATTACH:/db}{:KEY_COMBO:RETURN}"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <blockquote> <p>The inline comment (<code class="language-plaintext highlighter-rouge">CMT</code>) syntax is from the <a href="https://github.com/user202729/plover-comment">plover-comment</a> Plover plugin, which I use to help provide outlines with metadata, particularly around how I pronounce outlines in my head, how I should remember them, or just what they are supposed to mean. The <code class="language-plaintext highlighter-rouge">ATTACH</code> and <code class="language-plaintext highlighter-rouge">KEY_COMBO</code> syntax are Plover’s <a href="https://github.com/openstenoproject/plover/wiki/Dictionary-Format#friendly-command-names">friendly command names</a>.</p> </blockquote> <p>The non-dash outlines are all (somewhat) <a href="https://en.wikipedia.org/wiki/Phonetics">phonetic</a>, while dash outlines re-use the <a href="https://en.wikipedia.org/wiki/Arrow_keys#ESDF_keys">ESDF</a>-style keys for dashing direction, along with a <code class="language-plaintext highlighter-rouge">-RBGS</code> “dash chord”:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/dash-chords.png" alt="Doom Typist 'dash chords'"/> </figure> </div> <p>Although dashing around in steno mode is all good and well, there came many times where I would, say, move up to a door in Gaming mode, open it, and immediately encounter an enemy. The surprise of this would make me forget that I was in Gaming mode, and I would attempt to dash away, forgetting that I was not yet in steno mode, where all the dashing chords were configured.</p> <p>I wanted to be able to instantly dash away to put some distance between me and the enemy, to compose myself and remember to switch to Steno mode. So, you guessed it, it’s combo time again to mirror all the dictionary entries above in Gaming mode (noticing a pattern yet?):</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// STEP 1: Create some custom keycodes</span>
<span class="k">enum</span> <span class="n">custom_keycodes</span> <span class="p">{</span>
  <span class="n">DASH</span> <span class="o">=</span> <span class="n">SAFE_RANGE</span><span class="p">,</span>
  <span class="n">DASH_BACKWARD</span><span class="p">,</span>
  <span class="n">DASH_FORWARD</span><span class="p">,</span>
  <span class="n">DASH_LEFT</span><span class="p">,</span>
  <span class="n">DASH_RIGHT</span>
<span class="p">};</span>

<span class="c1">// STEP 2: Give the combos names.</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="n">DOOM_TYPIST_DASH</span><span class="p">,</span>
    <span class="n">DOOM_TYPIST_DASH_BACKWARD</span><span class="p">,</span>
    <span class="n">DOOM_TYPIST_DASH_FORWARD</span><span class="p">,</span>
    <span class="n">DOOM_TYPIST_DASH_LEFT</span><span class="p">,</span>
    <span class="n">DOOM_TYPIST_DASH_RIGHT</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// STEP 3: Define the set of keys for the combos.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// Mirrors "W-RBGS": "{:CMT:dash backward}{:ATTACH:/db}{:KEY_COMBO:RETURN}"</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_backward_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_D</span><span class="p">,</span> <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// Mirrors "P-RBGS": "{:CMT:dash forward}{:ATTACH:/df}{:KEY_COMBO:RETURN}"</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_forward_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_E</span><span class="p">,</span> <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// Mirrors "K-RBGS": "{:CMT:dash left}{:ATTACH:/dl}{:KEY_COMBO:RETURN}"</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_left_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_S</span><span class="p">,</span> <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>
<span class="c1">// Mirrors "R-RBGS": "{:CMT:dash right}{:ATTACH:/dr}{:KEY_COMBO:RETURN}"</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">doom_typist_dash_right_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_F</span><span class="p">,</span> <span class="n">KC_J</span><span class="p">,</span> <span class="n">KC_K</span><span class="p">,</span> <span class="n">KC_L</span><span class="p">,</span> <span class="n">KC_SEMICOLON</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="c1">// STEP 4: Define what keystroke the combos should send,</span>
<span class="c1">// and register them in `key_combos`.</span>
<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_combo</span><span class="p">,</span> <span class="n">DASH</span><span class="p">),</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH_BACKWARD</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_backward_combo</span><span class="p">,</span> <span class="n">DASH_BACKWARD</span><span class="p">),</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH_FORWARD</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_forward_combo</span><span class="p">,</span> <span class="n">DASH_FORWARD</span><span class="p">),</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH_LEFT</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_left_combo</span><span class="p">,</span> <span class="n">DASH_LEFT</span><span class="p">),</span>
    <span class="p">[</span><span class="n">DOOM_TYPIST_DASH_RIGHT</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">doom_typist_dash_right_combo</span><span class="p">,</span> <span class="n">DASH_RIGHT</span><span class="p">),</span>
<span class="p">};</span>
</code></pre></div></div> <p>Assuming your eyes have not glazed over at seeing <em>yet another</em> set of combo configuration, you may have noticed a couple of peculiar things that prompted some questions:</p> <ul> <li>There are not any specific keycodes related to “dashing”, so some new <code class="language-plaintext highlighter-rouge">custom_keycodes</code> were created. The combos are configured to send these custom keycodes on activation. But, what do those keycodes mean? What will get sent?</li> <li>Why does just the “dash chord” get its own combo in isolation?</li> </ul> <blockquote> <p>In case you are wondering about <code class="language-plaintext highlighter-rouge">SAFE_RANGE</code> above, see <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#defining-a-new-keycode">Defining a New Keycode</a> in QMK’s documentation.</p> </blockquote> <p>We can define the handling for, and hence give meaning to, custom keycodes in the <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#programming-the-behavior-of-any-keycode-idprogramming-the-behavior-of-any-keycode"><code class="language-plaintext highlighter-rouge">process_record_user</code></a> function. For example, we want the <code class="language-plaintext highlighter-rouge">DASH_FORWARD</code> keycode to type in <code class="language-plaintext highlighter-rouge">/df</code> and then press enter, giving us an insta-dash forward when the combo is chorded:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bool</span> <span class="nf">process_record_user</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">keycode</span><span class="p">,</span> <span class="n">keyrecord_t</span> <span class="o">*</span><span class="n">record</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">keycode</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">case</span> <span class="n">DASH_FORWARD</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">record</span><span class="o">-&gt;</span><span class="n">event</span><span class="p">.</span><span class="n">pressed</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">SEND_STRING</span><span class="p">(</span><span class="s">"/df"</span> <span class="n">SS_TAP</span><span class="p">(</span><span class="n">X_ENTER</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div> <p>All the other dashing directions have similar handling in their <code class="language-plaintext highlighter-rouge">case</code> conditions, and you can find them all in <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">my Georgi keymaps</a>. Also, just by the way, custom keycodes never require any handling by QMK (they are custom to you after all), so we always <code class="language-plaintext highlighter-rouge">return false</code> at the end of their handling code.</p> <p>As for the “dash chord” combo, the reason it exists is that I wanted to be able to have a version of “partial chording”<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup> in Gaming mode, where I could keep the “dash chord” held down, and just press the direction keys in rapid succession to easily make quick getaways in any direction.</p> <p>This meant that, like with <code class="language-plaintext highlighter-rouge">moving_backward</code> earlier, the <code class="language-plaintext highlighter-rouge">process_record_user</code> function would need to keep track of whether we are <code class="language-plaintext highlighter-rouge">dashing</code> or not:</p> <ul> <li><code class="language-plaintext highlighter-rouge">true</code> if the “dash chord”, or any of the directional dash chords, are being pressed,</li> <li><code class="language-plaintext highlighter-rouge">false</code> if they are released</li> </ul> <p>Checking of the directional <a href="https://en.wikipedia.org/wiki/Arrow_keys#ESDF_keys">ESDF keys</a> in isolation would also need to be redefined to account for whether we are <code class="language-plaintext highlighter-rouge">dashing</code> or not and:</p> <ul> <li>if so, perform a directional dash</li> <li>if not, let QMK do its normal handling</li> </ul> <p>Here’s how that looks in keymap configuration for just dashing forward:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bool</span> <span class="nf">process_record_user</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">keycode</span><span class="p">,</span> <span class="n">keyrecord_t</span> <span class="o">*</span><span class="n">record</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">static</span> <span class="n">bool</span> <span class="n">dashing</span><span class="p">;</span>

    <span class="k">switch</span> <span class="p">(</span><span class="n">keycode</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">DASH</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">record</span><span class="o">-&gt;</span><span class="n">event</span><span class="p">.</span><span class="n">pressed</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">dashing</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">dashing</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="c1">// ...</span>
    <span class="k">case</span> <span class="n">DASH_FORWARD</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">record</span><span class="o">-&gt;</span><span class="n">event</span><span class="p">.</span><span class="n">pressed</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">SEND_STRING</span><span class="p">(</span><span class="s">"/df"</span> <span class="n">SS_TAP</span><span class="p">(</span><span class="n">X_ENTER</span><span class="p">));</span>
            <span class="n">dashing</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">dashing</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="c1">//</span>
    <span class="k">case</span> <span class="n">KC_E</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">record</span><span class="o">-&gt;</span><span class="n">event</span><span class="p">.</span><span class="n">pressed</span> <span class="o">&amp;&amp;</span> <span class="n">dashing</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">SEND_STRING</span><span class="p">(</span><span class="s">"/df"</span> <span class="n">SS_TAP</span><span class="p">(</span><span class="n">X_ENTER</span><span class="p">));</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div> <p>Similar configuration code for all the other dash direction keys and chords can be found in <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">my Georgi keymaps</a>.</p> <p>Okay. <em>Now</em> you are ready to play a bit of Doom, but there are just a couple more non-control-related quality-of-steno-gaming-life configuration changes that can be made.</p> <h2 id="layer-switching-chord-changes">Layer-Switching Chord Changes</h2> <p>In order to reduce the amount of fat-fingered mis-chording that seemed to happen to me while frantically attempting to toggle between moving around and shooting, I made a couple of changes to keymap-layer switching logic.</p> <h3 id="steno-mode---gaming-mode">Steno Mode &lt;-&gt; Gaming Mode</h3> <p>The default Georgi chord to change from Steno mode to Gaming mode looks like this:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/georgi-steno-layer-gaming-chord.png" alt="Enter Gaming Mode chord"/> <figcaption> <code>(PWR | FN | ST4 | ST3)</code> </figcaption> </figure> </div> <p>This is perfectly fine for normal steno use cases, if you are not planning on changing back and forth between the modes at rapid-fire speed. I found that I would frequently mis-chord it in the heat of battle, and desired a slightly simpler chord, which ended up being just the bottom half of the original one:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/georgi-simple-gaming-chord.png" alt="Simpler Steno/Gaming toggle chord"/> <figcaption> <code>(PWR | ST4)</code> </figcaption> </figure> </div> <p>The firmware edits required to make this happen necessitated small changes <a href="https://github.com/qmk/qmk_firmware/blob/f5d091a9d58c8349437e9d52de87294258cbd256/keyboards/gboards/georgi/sten.c#L97">directly to Georgi-specific stenography logic</a> (rather than user keymap logic, which is where most <a href="https://qmk.fm/">QMK</a> configuration takes place, and where all the configurations you have seen thus far have been made):</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/sten.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bool</span> <span class="nf">send_steno_chord_user</span><span class="p">(</span><span class="n">steno_mode_t</span> <span class="n">mode</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">chord</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="c1">// Handle Gaming Toggle,</span>
    <span class="c1">// Original cChord == (PWR | FN | ST4 | ST3)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cChord</span> <span class="o">==</span> <span class="p">(</span><span class="n">PWR</span> <span class="o">|</span> <span class="n">ST4</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">keymapsCount</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="n">layer_on</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <p>In the <em><a href="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/">Flashing Georgi Firmware</a></em> post, I go into significant detail about this particular change, as well as the mirroring QMK combo in the Gaming layer that returns back to Steno mode. For completeness’ sake though, here’s what that combo looks like:</p> <p><strong><code class="language-plaintext highlighter-rouge">keyboards/gboards/georgi/keymaps/paulfioravanti/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// STEP 1: Give the combos names.</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="n">GOTO_STENO_LAYER</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// STEP 2: Define the set of keys for the combos.</span>
<span class="c1">// Mirrors the (PWR | ST4) chord used to switch to the gaming layer in `sten.c`.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">goto_steno_layer_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_LEFT_CTRL</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="c1">// STEP 3: Define what keystroke the combos should send,</span>
<span class="c1">// and register them in `key_combos`.</span>
<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="p">[</span><span class="n">GOTO_STENO_LAYER</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">goto_steno_layer_combo</span><span class="p">,</span> <span class="n">TO</span><span class="p">(</span><span class="n">STENO_LAYER</span><span class="p">)),</span>
<span class="p">};</span>
</code></pre></div></div> <blockquote> <p><a href="https://github.com/qmk/qmk_firmware/blob/master/docs/keycodes.md#layer-switching-idlayer-switching"><code class="language-plaintext highlighter-rouge">TO(layer)</code></a> “turns on <code class="language-plaintext highlighter-rouge">layer</code> and turns off all other layers, except the default layer”</p> </blockquote> <h3 id="qwerty-mode">QWERTY Mode</h3> <p>When it came to switching from Steno to QWERTY mode, I had a similar, but opposite, problem. By default, simply pressing the <code class="language-plaintext highlighter-rouge">FN</code> key switches you to Georgi’s QWERTY mode, a “pseudo-layer” within the steno keymap layer:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/georgi-change-to-qwerty-mode.png" alt="Switch to QWERTY mode"/> </figure> </div> <p>I found that I would inadvertently press this button frequently when using the new Steno-Gaming mode chord defined above. I would think I was in Gaming mode, but was in fact in stenotype QWERTY mode, leaving me unable to move my character, and at the mercy of whatever enemy was attacking me.</p> <p>I needed to change the switch to QWERTY mode be a bit more <em>complex</em>: from a simple button press, to a less-likely-to-occur-by-accident chord. The easiest change seemed to be mirroring the Steno-Gaming chord:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-06-07/georgi-change-to-qwerty-mode-chord.png" alt="Switch to QWERTY mode chord"/> <figcaption> <code>(FN | ST3)</code> </figcaption> </figure> </div> <p>The firmware edits to do this were also in Georgi’s stenography logic:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/sten.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bool</span> <span class="nf">send_steno_chord_user</span><span class="p">(</span><span class="n">steno_mode_t</span> <span class="n">mode</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">chord</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="c1">// Original cChord == FN</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cChord</span> <span class="o">==</span> <span class="p">(</span><span class="n">FN</span> <span class="o">|</span> <span class="n">ST3</span><span class="p">))</span> <span class="p">{</span>
        <span class="p">(</span><span class="n">cMode</span> <span class="o">==</span> <span class="n">STENO</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="n">cMode</span> <span class="o">=</span> <span class="n">QWERTY</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="n">cMode</span> <span class="o">=</span> <span class="n">STENO</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <p>As of this writing, both of those Georgi-steno-logic-level changes have worked out well for me, but I have no doubt I will continue to fine-tune them.</p> <h2 id="next-stage">Next Stage</h2> <p>I have little doubt that my gaming-related steno configuration is going to be a permanent work-in-progress, so here are a few of the things on my mind to look at next, as of this writing.</p> <h3 id="hard-to-use">Hard to “Use”</h3> <p>It seems that it is impossible to open doors or toggle switches (ie use the “Use” functionality) in steno mode. This can be a bit annoying if you encounter multiple enemies immediately after opening a door because:</p> <ul> <li>you get auto-changed from <span style="color: blue">Exploration Mode</span> to <span style="color: red">Combat Mode</span>, so you have to change from Gaming mode to Steno mode quickly</li> <li>there usually isn’t enough time to defeat all the enemies before the door closes</li> <li>you have to switch back to Gaming mode <em>just</em> to re-open the door (since the “simulated” stenotype Enter keystrokes do not register), and <em>then</em> switch back to Steno mode again to resume combat</li> </ul> <p>The workaround to this problem is to remember to dash toward the enemy and away from the door, but I would like the option to not have to do that. So, I am thinking that having another input device would be handy: like a foot pedal (I have my eye on a <a href="https://www.elgato.com/en/stream-deck-pedal">Stream Deck Pedal</a>, unless there are compelling alternatives…), which can permanently send standard keystrokes (in this case the “Use” key), regardless of what mode the Georgi is in.</p> <h3 id="brutal-doom-typist">Brutal Doom Typist</h3> <p>It would seem that the most popular <a href="https://en.wikipedia.org/wiki/Video_game_modding">mod</a> for Doom is <a href="https://www.moddb.com/mods/brutal-doom">Brutal Doom</a>. GZDoom has the ability to load multiple WAD files at a time, so I was actually able to get Brutal Doom and Typist.pk3 to load together!</p> <div class="centered-image" style="width: 50%"> <figure> <img src="/assets/images/2022-06-07/gzdoom-multiple-wad-files.jpg" alt="GZDoom multiple WAD files"/> <figcaption> Multiple WAD files loaded: Typist.pk3, Brutal Doom itself, its new soundtrack, and its new sound effects. </figcaption> </figure> </div> <p>I have not played it much just yet, but if you are planning to give Brutal Doom Typist a shot, just remember to always play the game in “Purist” mode:</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-06-07/purist-mode.jpg" alt="Brutal Doom Purist mode"/> </figure> </div> <p>This is because Classic Doom does not have the concept of looking up and down, but Brutal Doom does. Unfortunately, it will not autoaim your typing shots at enemies in high places when you get put in <span style="color: red">Combat Mode</span>, leading to never being able to defeat them. In Purist (Oldschool Mode), you get the expected “autoaim”.</p> <p>Here’s a video of me attempting to play Brutal Doom Typist with a Georgi:</p> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/LyeWSzbBfhY" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Brutal Doom Typist - Episode 1 Map 1 </figcaption> </div> <h3 id="multiplayer-steno-dooming">Multiplayer Steno Dooming…?</h3> <p>After writing most of this post, I found out about <a href="https://zandronum.com/">Zandronum</a>, another Doom source port, which is “leading the way in newschool multiplayer Doom online”, and supports a “large number of ZDoom and GZDoom mods”.</p> <p>I have not tried it yet, but if it runs Typist.pk3, could this enable multiplayer Steno Doom Typist <a href="https://en.wikipedia.org/wiki/LAN_party">LAN parties</a>…? Would that even be fun…? If you end up getting Doom Typist set up yourself and you want to find out, reach out to me and let’s collaborate!</p> <p>For now, though, it’s time to break out my old grungy <a href="https://en.wikipedia.org/wiki/Flannel">flanelette shirts</a> and <a href="https://en.wikipedia.org/wiki/Reebok_Pump">Reebok Pumps</a>, and get Georgi back to hell to chord like it’s 1993! :musical_keyboard:</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://doom.fandom.com/wiki/PK3">PK3</a> being “an alternate extension for <a href="https://en.wikipedia.org/wiki/ZIP_(file_format)">ZIP</a> files” <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p>On macOS, I even tried using the <a href="https://github.com/user202729/plover_run_shell">Plover Run Shell</a> plugin with an <a href="https://sites.google.com/site/learnplover/glossary">outline</a> that maps to an entry that runs a <a href="https://en.wikipedia.org/wiki/Shell_(computing)">shell</a> command that calls out to <a href="https://en.wikipedia.org/wiki/AppleScript">AppleScript</a> to trigger a Return keystroke:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="nl">"R*R"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{:COMMAND:SHELL:osascript -e 'tell application </span><span class="se">\"</span><span class="s2">System Events</span><span class="se">\"</span><span class="s2"> to keystroke return'}"</span><span class="w">
</span></code></pre></div> </div> <p>and that <em>still</em> did not work with GZDoom during Doom gameplay. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3" role="doc-endnote"> <p>Even if you have already supercharged your steno firmware with <a href="https://github.com/JoshuaGrams">Joshua Grams</a>’ excellent <a href="https://github.com/JoshuaGrams/steno-firmware"><code class="language-plaintext highlighter-rouge">steno-firmware</code></a>, whose <code class="language-plaintext highlighter-rouge">STENO_REPEAT</code> functionality allows you to hold down chords to repeat them in quick succession, it will still not be enough. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4" role="doc-endnote"> <p>Typist.pk3 has no idea I’m playing using steno, and is likely not even expecting to receive anything but standard keystrokes from a user. So, naturally, there would not be the concept of any visual cues for that within the mod. I think if there was an <a href="https://en.wikipedia.org/wiki/Light-emitting_diode">LED</a> on the Georgi, or some kind of <a href="https://en.wikipedia.org/wiki/User_interface">UI</a> widget indicating current layer existed, that would be useful. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:5" role="doc-endnote"> <p>À la <code class="language-plaintext highlighter-rouge">STENO_1UP</code> functionality in <a href="https://github.com/JoshuaGrams">Joshua Grams</a>’ <a href="https://github.com/JoshuaGrams/steno-firmware"><code class="language-plaintext highlighter-rouge">steno-firmware</code></a>, which allows you to hold down common keys in between chords. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="retro-gaming"/><category term="georgi"/><category term="steno"/><category term="doom"/><category term="qmk"/><summary type="html"><![CDATA[Demon hordes are no match for steno chords!]]></summary></entry><entry><title type="html">Flashing Georgi Firmware</title><link href="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/" rel="alternate" type="text/html" title="Flashing Georgi Firmware"/><published>2022-05-18T16:00:00+10:00</published><updated>2022-05-19T08:20:00+10:00</updated><id>https://www.paulfioravanti.com/blog/flashing-georgi-firmware</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/flashing-georgi-firmware/"><![CDATA[<p>So, you have had your <a href="https://www.gboards.ca/product/georgi">Georgi</a> keyboard for a while, done lots of <a href="https://www.openstenoproject.org/plover/">Plover</a> <a href="https://en.wikipedia.org/wiki/Stenotype">stenography</a> practice, and are now thinking about making some changes to its keymap layout because you want it to do something that it currently does not.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-18/georgi.jpg" alt="Georgi keyboard"/> </figure> </div> <p>This will require you to generate some <a href="https://docs.qmk.fm/#/">Quantum Mechanical Keyboard (QMK)</a>-based <a href="https://en.wikipedia.org/wiki/Firmware">firmware</a> for the Georgi, and then <a href="https://en.wikipedia.org/wiki/Firmware#Flashing">flash</a> the device to overwrite the one that is currently there.</p> <blockquote> <p>See a previous blog post I wrote, <em><a href="https://www.paulfioravanti.com/blog/escape-defaults-control-keyboard-qmk/">Escape the defaults and Control your keyboard with QMK</a></em>, for more information about using QMK: some general, some more <a href="https://ergodox-ez.com/">Ergodox EZ</a>-focused.</p> </blockquote> <p>QMK has a <a href="https://config.qmk.fm/#">web-based configurator</a>, which enables you to create firmware files for a multitude of keyboards that QMK supports, without having to touch any <a href="https://en.wikipedia.org/wiki/C_(programming_language)">C</a> code. But, in the configurator<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>…</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/qmk-configurator.jpg" alt="QMK Configurator"/> </figure> </div> <ul> <li>Compilation of the <a href="https://config.qmk.fm/#/gboards/georgi/LAYOUT_georgi">Georgi layout</a> is not yet supported</li> <li><a href="https://docs.qmk.fm/#/feature_stenography?id=keycode-reference">Stenography keycodes</a> are not yet available to assign to keys</li> </ul> <p>If you still want to make any changes, steel yourself for hard mode, because we are going to have to get technical.</p> <p>Before we even think about firmware customisation, though, we will want to make sure that you can compile the <em>default</em> Georgi firmware locally on your computer, and flash your Georgi successfully with it. <em>Then</em>, we will get our hands dirty with some code by creating an example firmware customisation, compiling it, and then flash the Georgi again to apply it.</p> <p>If you have not already, I would recommend familiarising yourself, at least a little bit, with some of the Georgi-related <a href="http://docs.gboards.ca/">gBoards documentation</a>, to provide some context on what we will be doing. Specifically:</p> <ul> <li><a href="http://docs.gboards.ca/docs/Unboxing-Georgi/">Unboxing Georgi</a> - we will use the <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#entering-qmk-gaming-mode">Gaming mode</a> in the example customisation later on</li> <li><a href="http://docs.gboards.ca/docs/Configuring-Georgi/">Configuring Georgi</a> - in particular <a href="http://docs.gboards.ca/docs/Configuring-Georgi/#triggers">Triggers</a>, one of which we will change</li> <li><a href="http://docs.gboards.ca/docs/Hacking-Georgi/">Hacking Georgi</a> - here, just note that we will be working with the <a href="http://docs.gboards.ca/docs/Hacking-Georgi/#cchord"><code class="language-plaintext highlighter-rouge">cChord</code></a> <a href="https://en.wikipedia.org/wiki/Bit_field">bit field</a></li> </ul> <p>Ready? Let’s get hacking!</p> <h2 id="compile-default-georgi-firmware">Compile Default Georgi Firmware</h2> <p>Download the QMK firmware from its <a href="https://github.com/qmk/qmk_firmware">GitHub repository</a>. Pick a convenient directory to start in (I will use <code class="language-plaintext highlighter-rouge">~/Desktop</code> here, but you can pick one appropriate for your operating system), and either use <a href="https://git-scm.com/">Git</a> to get the source code (recommended), or download its <a href="https://en.wikipedia.org/wiki/ZIP_(file_format)">ZIP</a> file.</p> <div class="centered-image" style="width: 100%"> <figure style="margin-bottom: 0"> <img src="/assets/images/2022-05-18/qmk-firmware-github.jpg" alt="QMK Firmware GitHub page"/> </figure> </div> <p>Example commands:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">cd ~/Desktop
git clone https://github.com/qmk/qmk_firmware.git
cd qmk_firmware
</span></code></pre></div></div> <p>Next, follow the <a href="https://docs.qmk.fm/#/newbs_getting_started">Setting Up Your QMK Environment</a> instructions from the <a href="https://docs.qmk.fm/#/">QMK documentation</a> and install the <code class="language-plaintext highlighter-rouge">qmk</code> <a href="https://en.wikipedia.org/wiki/Command-line_interface">command line interface</a> (CLI) application.</p> <p>In the <a href="https://docs.qmk.fm/#/newbs_getting_started?id=_1-prerequisites">Prerequisites</a>, it says installation of the <a href="https://github.com/qmk/qmk_toolbox">QMK Toolbox</a> is optional, but we will be using it soon, so either download <a href="https://github.com/qmk/qmk_toolbox/releases">the latest release</a>, or, if you are on macOS, use <a href="https://brew.sh/">Homebrew</a> to install it:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">brew install qmk-toolbox
</span></code></pre></div></div> <p>Now, use the <code class="language-plaintext highlighter-rouge">qmk</code> CLI to compile the default Georgi firmware with the following command:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">qmk compile -kb georgi -km default
</span></code></pre></div></div> <blockquote> <p>You may get an error running this command the first time, and be prompted to run a command like <code class="language-plaintext highlighter-rouge">make git-submodule</code>. Follow any error message instructions, and then try compiling again.</p> </blockquote> <p>If the command runs successfully, the end of all of the compilation output should look something like this:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">...
</span><span class="go">Creating load file for flashing: .build/gboards_georgi_default.hex          [OK]
Copying gboards_georgi_default.hex to qmk_firmware folder                   [OK]
Checking file size of gboards_georgi_default.hex                            [OK]
</span></code></pre></div></div> <p>If you check in your <code class="language-plaintext highlighter-rouge">qmk_firmware</code> directory, you will see that a <a href="https://en.wikipedia.org/wiki/Intel_HEX">HEX</a> file named <code class="language-plaintext highlighter-rouge">gboards_georgi_default.hex</code> has been generated, which we will use to flash the Georgi.</p> <h2 id="flash-georgi-firmware">Flash Georgi Firmware</h2> <p>Open up the QMK Toolbox application, press the “Open” button, and select the generated HEX file.</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/qmk-toolbox-select-firmware.jpg" alt="QMK Toolbox Select Firmware"/> <figcaption> Screenshot is macOS version of QMK Toolbox. May differ slightly for other operating systems. </figcaption> </figure> </div> <p>You will notice that the “Flash” button is currently not selectable. This is because the Georgi is not currently in <a href="https://en.wikipedia.org/wiki/USB#Device_Firmware_Upgrade_mechanism">Device Firmware Upgrade</a> (DFU) mode. To get in DFU mode, and allow the Georgi to receive firmware, you need to press the tiny button on the left half of the keyboard, just below the <a href="https://en.wikipedia.org/wiki/Phone_connector_(audio)">TRRS</a> cable plug. I use a paperclip or a <a href="https://en.wikipedia.org/wiki/SIM_card">SIM card</a> tray ejector tool for this delicate job.</p> <div class="centered-image" style="width: 80%"> <figure> <img src="/assets/images/2022-05-18/georgi-flash-button.jpg" alt="Press button to put Georgi in DFU mode"/> <figcaption> Tray ejector tools are not just for mobile phones. </figcaption> </figure> </div> <p>Once the button has been pressed, QMK Toolbox will show you a message letting you know that you have successfully connected a device in DFU mode, and the “Flash” button will become pressable:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/qmk-toolbox-dfu-device-connected.jpg" alt="QMK Toolbox DFU mode device successfully connected"/> </figure> </div> <p>Press the “Flash” button, and if everything goes well, you should see output that looks something like this:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/qmk-toolbox-flashing-successful.jpg" alt="QMK Toolbox device successfully flashed"/> </figure> </div> <p>The Georgi has now been taken out of DFU mode, and can be reconnected to Plover.</p> <div class="centered-image" style="width: 60%"> <figure> <img src="/assets/images/2022-05-18/reconnect-plover.jpg" alt="Reconnect Georgi to Plover"/> <figcaption> My Georgi shows up as <code>/dev/cu.usbmodem14202</code> in Plover's connection list, but yours might look something like <code>COM6</code> if you use Windows. </figcaption> </figure> </div> <p>If you are able to stroke steno chords again (and it seems like nothing has changed), congratulations, you have just completed a full keyboard flashing process! You will get another chance to do this again, but before that, let’s actually go and make some firmware changes!</p> <h2 id="customising-the-firmware">Customising the Firmware</h2> <p>Before diving straight into the code, allow me to provide some context around the reasons for even wanting to make the changes we will use in the customisation example.</p> <h3 id="the-problem">The Problem</h3> <p>I have been experimenting with Georgi’s <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#entering-qmk-gaming-mode">Gaming mode</a>, which switches you to a separate keyboard layer that “acts like a traditional keyboard, as opposed to stenotype”, in the way it sends information to your computer.</p> <p>This is different to Georgi’s <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#modes">QWERTY and Symbol modes</a>, which still both act like a stenotype, and actually only exist as <a href="http://docs.gboards.ca/docs/Configuring-Georgi/#layers">“pseudo-layers”</a> within the main steno keymap layer.</p> <blockquote> <p>Open any game you may have that involves moving a character around a screen, and attempt to do so using Georgi’s QWERTY mode. You will most likely be unable to, due to this keyboard/stenotype difference (details of which are not important for this post).</p> </blockquote> <p>If you have a look at the code for the Georgi <a href="https://github.com/qmk/qmk_firmware/blob/e9e83b4da73e5594b1f864d78529e85aa5ebefe9/keyboards/gboards/georgi/keymaps/default/keymap.c#L219">default keymap layers</a>, you will actually see only three layers, which have the following layouts:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-steno-layer.png" alt="Steno (and QWERTY and Symbol) layer"/> <figcaption> Steno Layer (includes QWERTY and Symbol pseudo-layers; not shown above, but you can view them <a href="http://docs.gboards.ca/docs/Unboxing-Georgi/#modes">here</a>) </figcaption> </figure> </div> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-gaming-layer-1.png" alt="Gaming Layer 1"/> <figcaption> Gaming Layer 1 </figcaption> </figure> </div> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-gaming-layer-2.png" alt="Gaming Layer 2"/> <figcaption> Gaming Layer 2 </figcaption> </figure> </div> <p>In order to change from the Steno layer to Gaming layer 1, the default chord is:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-steno-layer-gaming-chord.png" alt="Enter Gaming Mode chord"/> <figcaption> Enter Gaming Mode chord </figcaption> </figure> </div> <p>In order to change from a Gaming layer to the Steno layer, the default keystroke is:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-gaming-layer-steno-key.png" alt="Return to Steno Mode key"/> <figcaption> Return to Steno Mode key </figcaption> </figure> </div> <p>My brain sees this as stroking a complex chord to change to Gaming Mode, yet pressing a completely different singular key to change back to Steno Mode. I would prefer to:</p> <ul> <li>have a single chord that that would feel like a “toggle” between Steno and Gaming modes</li> <li>make that chord a little bit simpler than the one above</li> </ul> <h3 id="the-solution">The Solution</h3> <p>I do not want to risk any dictionary-level outline conflicts, so the chord has to include a Georgi-specific key (<code class="language-plaintext highlighter-rouge">FN</code> or <code class="language-plaintext highlighter-rouge">PWR</code>). Therefore, I am thinking a <code class="language-plaintext highlighter-rouge">PWR | ST4</code> (“Star 4”) combination will be a good candidate:</p> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-18/georgi-simple-gaming-chord.png" alt="Steno/Gaming toggle chord"/> <figcaption> Candidate Steno/Gaming "toggle" chord </figcaption> </figure> </div> <p>The plan of attack to implement this toggle chord will be twofold:</p> <ul> <li>Change the hardcoded Georgi Gaming layer <a href="http://docs.gboards.ca/docs/Configuring-Georgi/#triggers">trigger</a> on the Steno layer to be <code class="language-plaintext highlighter-rouge">PWR | ST4</code></li> <li>Create an equivalent <a href="https://github.com/qmk/qmk_firmware/blob/master/docs/feature_combo.md">QMK Combo</a> shape (read: chord for a QWERTY keyboard) on the Gaming layer that returns to the Steno layer, using the “Left Control” and “H” keys</li> </ul> <p>Let’s give it a try!</p> <h3 id="change-gaming-layer-trigger">Change Gaming Layer Trigger</h3> <p>You will find all the logic for the triggers related to layer switching in Georgi’s <a href="https://github.com/qmk/qmk_firmware/blob/656090335066eed90a9b76e113fb93ee3bc8c089/keyboards/gboards/georgi/sten.c#L97"><code class="language-plaintext highlighter-rouge">sten.c</code></a> file. Inside the <code class="language-plaintext highlighter-rouge">send_steno_chord_user</code> function, you can see that the chord for the gaming toggle is currently hardcoded to <code class="language-plaintext highlighter-rouge">(PWR | FN | ST4 | ST3)</code>, as per the keymap above:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/sten.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// All processing done at chordUp goes through here</span>
<span class="n">bool</span> <span class="nf">send_steno_chord_user</span><span class="p">(</span><span class="n">steno_mode_t</span> <span class="n">mode</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">chord</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="c1">// Handle Gaming Toggle,</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cChord</span> <span class="o">==</span> <span class="p">(</span><span class="n">PWR</span> <span class="o">|</span> <span class="n">FN</span> <span class="o">|</span> <span class="n">ST4</span> <span class="o">|</span> <span class="n">ST3</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">keymapsCount</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="n">layer_on</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <p>All we need to do here is change the chord that <code class="language-plaintext highlighter-rouge">cChord</code> is checked against from <code class="language-plaintext highlighter-rouge">(PWR | FN | ST4 | ST3)</code> to <code class="language-plaintext highlighter-rouge">(PWR | ST4)</code>:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/sten.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// All processing done at chordUp goes through here</span>
<span class="n">bool</span> <span class="nf">send_steno_chord_user</span><span class="p">(</span><span class="n">steno_mode_t</span> <span class="n">mode</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">chord</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="c1">// Handle Gaming Toggle,</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cChord</span> <span class="o">==</span> <span class="p">(</span><span class="n">PWR</span> <span class="o">|</span> <span class="n">ST4</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">keymapsCount</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="n">layer_on</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <p>Made the change? Great! That wasn’t too scary, right? Now to move out of Georgi’s core firmware logic, and into the keymap logic, where most customisation typically occurs.</p> <h3 id="create-steno-layer-combo">Create Steno Layer Combo</h3> <p>Although we could not avoid changing core Georgi firmware logic in the previous step, the general rule when you create your own personal keymap customisations is to make a copy of the keymap directory you intend to change (in this case Georgi’s <code class="language-plaintext highlighter-rouge">default</code> keymap), and give it a unique name (in this case, I’ll name it <code class="language-plaintext highlighter-rouge">my_keymap</code>: unique, yet uncreative [feel free to name it as you wish]).</p> <p>You can create the new directory via your <a href="https://en.wikipedia.org/wiki/File_manager">file manager</a> user interface, or by the command line:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">cp -r keyboards/gboards/georgi/keymaps/default/ keyboards/gboards/georgi/keymaps/my_keymap/
</span></code></pre></div></div> <p>Now, open up the <code class="language-plaintext highlighter-rouge">keymap.c</code> file in the new <code class="language-plaintext highlighter-rouge">my_keymap</code> directory. Just above the keymap definitions, add the following code to define a new QMK Combo, which will mimic the Steno layer <code class="language-plaintext highlighter-rouge">(PWR | ST4)</code> chord we saw earlier, using the “Left Control” and “H” keys:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/keymaps/my_keymap/keymap.c</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
<span class="k">enum</span> <span class="n">combos</span> <span class="p">{</span>
  <span class="n">GOTO_STENO_LAYER</span>
<span class="p">};</span>

<span class="c1">// NOTE: This combo is meant to mirror the chord used to switch to the gaming</span>
<span class="c1">// layer in `sten.c`.</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">goto_steno_layer_combo</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">KC_LEFT_CTRL</span><span class="p">,</span> <span class="n">KC_H</span><span class="p">,</span> <span class="n">COMBO_END</span>
<span class="p">};</span>

<span class="n">combo_t</span> <span class="n">key_combos</span><span class="p">[</span><span class="n">COMBO_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">GOTO_STENO_LAYER</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMBO</span><span class="p">(</span><span class="n">goto_steno_layer_combo</span><span class="p">,</span> <span class="n">TO</span><span class="p">(</span><span class="n">STENO_LAYER</span><span class="p">)),</span>
<span class="p">};</span>

<span class="c1">// ..</span>
<span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">PROGMEM</span> <span class="n">keymaps</span><span class="p">[][</span><span class="n">MATRIX_ROWS</span><span class="p">][</span><span class="n">MATRIX_COLS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// ..</span>
<span class="p">};</span>
</code></pre></div></div> <blockquote> <p>If you need a primer on QMK Combos, I wrote about them in excruciating detail in another blog post, <a href="https://www.paulfioravanti.com/blog/chording-qwerty-qmk-combos/">Chording QWERTY with QMK Combos</a>. Most of the information in there should still be current as of this writing.</p> </blockquote> <p>What we are doing here at a high level is:</p> <ul> <li>Giving a <em>name</em> to the chord, in the form of an <a href="https://en.wikipedia.org/wiki/Enumerated_type">enumerated type</a>, that indicates what it does: <code class="language-plaintext highlighter-rouge">GOTO_STENO_LAYER</code></li> <li>Defining what keys the combo should consist of: the <code class="language-plaintext highlighter-rouge">KC_LEFT_CTRL</code>, and <code class="language-plaintext highlighter-rouge">KC_H</code> keys</li> <li>Defining what should happen when the chord is pressed: in this case <code class="language-plaintext highlighter-rouge">TO(STENO_LAYER)</code>, meaning to “turn on” the Steno layer</li> </ul> <p>Next, we need to provide a definition for <code class="language-plaintext highlighter-rouge">COMBO_COUNT</code> above, which will need to be put inside a new <code class="language-plaintext highlighter-rouge">config.h</code> file within the keymap directory, so create that now:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/keymaps/my_keymap/config.h</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"../../config.h"</span><span class="cp">
</span>
<span class="cp">#define COMBO_COUNT 1
</span></code></pre></div></div> <blockquote> <p>If you add or remove combos in the future, you will also need to change this number accordingly.</p> </blockquote> <p>Finally, we need to actually enable the use of combos in our layout, otherwise we will get compilation errors for using things like <code class="language-plaintext highlighter-rouge">combo_t</code> and <code class="language-plaintext highlighter-rouge">COMBO_END</code> above. Just add the following line of configuration to the keymap <code class="language-plaintext highlighter-rouge">rules.mk</code> file:</p> <p><strong><code class="language-plaintext highlighter-rouge">qmk_firmware/keyboards/gboards/georgi/keymaps/my_keymap/rules.mk</code></strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp"># ...
</span><span class="n">COMBO_ENABLE</span> <span class="o">=</span> <span class="n">yes</span>
</code></pre></div></div> <p>You have now done everything needed to implement the Gaming layer “toggle” chord! Time to make sure everything compiles correctly:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">qmk compile -kb georgi -km my_keymap
</span></code></pre></div></div> <p>Now, if you check in your <code class="language-plaintext highlighter-rouge">qmk_firmware</code> directory, you will see a newly created HEX file named <code class="language-plaintext highlighter-rouge">gboards_georgi_my_keymap.hex</code> for you to use when flashing. Different keymap compilations generate a separate firmware file.</p> <p>If you get any errors, trace back and see if you may have missed a step, or perhaps made a mistake in the code. If you get similar output to when you compiled the <code class="language-plaintext highlighter-rouge">default</code> keymap, then you are ready to flash your Georgi again. Repeat the firmware flashing steps from above, and give it a test!</p> <p>If you want to see what other customisations can be made with Georgi Gaming layers, feel free to use <a href="https://github.com/paulfioravanti/qmk_keymaps/blob/master/keyboards/gboards/georgi/keymaps/paulfioravanti/README.md">my Georgi keymap</a> as a reference for any potential additions you may like to make to your own keymaps.</p> <p>If you do create your own custom layers, please share them publicly so every other Georgi owner can benefit from them as well! Good luck with your adventures in firmware!</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>As of QMK Configurator API v0.1 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="steno"/><category term="mechanical-keyboard"/><category term="qmk"/><summary type="html"><![CDATA[Make your steno keyboard do your bidding by codifying your preferences.]]></summary></entry><entry><title type="html">Play Classic Doom on a Mac</title><link href="https://www.paulfioravanti.com/blog/classic-doom-mac/" rel="alternate" type="text/html" title="Play Classic Doom on a Mac"/><published>2022-05-13T17:25:00+10:00</published><updated>2022-05-15T08:28:00+10:00</updated><id>https://www.paulfioravanti.com/blog/classic-doom-mac</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/classic-doom-mac/"><![CDATA[<p>The 1993 video game <a href="https://en.wikipedia.org/wiki/Doom_(1993_video_game)">Doom</a>, by <a href="https://en.wikipedia.org/wiki/Id_Software">id Software</a>, was <a href="https://en.wikipedia.org/wiki/List_of_Doom_ports#macOS">released for Mac on November 4, 1994</a>. But, good luck if you want to:</p> <ol style="list-style-type: lower-alpha"> <li> find <a href="https://doomwiki.org/wiki/Doom_(Apple_Macintosh)">that version</a> </li> <li> figure out a way to run it within some kind of emulation of <a href="https://en.wikipedia.org/wiki/Mac_OS_9">Mac OS 9</a> on your modern <a href="https://en.wikipedia.org/wiki/MacOS">macOS</a>-running computer (is that even possible?). </li> </ol> <p>Fortunately for us, <a href="https://zdoom.org/wiki/GZDoom">GZDoom</a><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> (<a href="https://zdoom.org/index">official site</a>), a “3D-accelerated Doom <a href="https://zdoom.org/wiki/Source_port">source port</a> based on <a href="https://zdoom.org/wiki/ZDoom">ZDoom</a><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>”, has our backs. It enables us to play the game as long as we can extract the <a href="https://doomwiki.org/wiki/WAD">WAD</a> file from the Doom <a href="https://en.wikipedia.org/wiki/.exe">.exe</a> file for <a href="https://en.wikipedia.org/wiki/Microsoft_Windows">Windows</a>.</p> <p>If getting from zero to fighting demon hordes on macOS was a straightforward course of action, there would be no need for this blog post. But, it’s a bit of an involved process, so here is the missing manual to get you up and running.</p> <blockquote> <p>I currently use an <a href="https://en.wikipedia.org/wiki/MacBook_Pro_(Intel-based)">Intel-based Macbook Pro</a> running <a href="https://en.wikipedia.org/wiki/MacOS_Monterey">macOS Monterey</a>, so that is what the following guide has been tested on. The process should still hopefully work for <a href="https://en.wikipedia.org/wiki/Apple_silicon">Apple Silicon</a>-based Macs and/or other macOS versions, but <a href="https://en.wiktionary.org/wiki/your_mileage_may_vary#Phrase">your mileage may vary</a>.</p> </blockquote> <h2 id="get-gzdoom">Get GZDoom</h2> <figure style="width:50%; float: right; margin-left: 10px; margin-top: 0;"> <img src="/assets/images/2022-05-13/gzdoom-download.jpg" alt="GZDoom downloads page"/> </figure> <p>It is possible to get GZDoom from its <a href="https://zdoom.org/downloads">downloads page</a>.</p> <p>You can click on the Macintosh link to download it, and install it like you would any other macOS application.</p> <p><em>However</em>, since you are going to have to get comfortable with using the <a href="https://en.wikipedia.org/wiki/Terminal_(macOS)">Terminal</a> application during this guide, I would suggest using this installation as the first opportunity to try it out (assuming you are not already comfortable, and have your own <a href="https://en.wikipedia.org/wiki/Terminal_emulator">terminal emulator</a> of choice).</p> <p>You are going to need to get <a href="https://brew.sh/">Homebrew</a>, a <a href="https://en.wikipedia.org/wiki/Package_manager">package manager</a> for macOS. Go to the Homebrew <a href="https://brew.sh/">homepage</a>, copy the installation command, open up your terminal, paste the command, and press enter.</p> <p>Once Homebrew is installed, you should be able to run the <code class="language-plaintext highlighter-rouge">brew</code> command in the terminal, so let’s do that using the following command to install GZDoom:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">brew install gzdoom
</span></code></pre></div></div> <p>If everything was successful, you should see output that looks something like this:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>brew <span class="nb">install </span>gzdoom
<span class="gp">==&gt;</span><span class="w"> </span>Downloading https://github.com/coelckers/gzdoom/releases/download/g4.7.1/gzdoom-4-7-1-macOS.zip
<span class="gp">==&gt;</span><span class="w"> </span>Downloading from https://objects.githubusercontent.com/github-production-release-asset-2e65be/10879376/59b36246-0a5b-4b9e-8fd8-90c6fce651f9?X-Amz-Algorith
<span class="gp">#</span><span class="c">####################################################################### 100.0%</span>
<span class="gp">==&gt;</span><span class="w"> </span>Installing Cask gzdoom
<span class="gp">==&gt;</span><span class="w"> </span>Moving App <span class="s1">'GZDoom.app'</span> to <span class="s1">'/Applications/GZDoom.app'</span>
<span class="go">🍺  gzdoom was successfully installed!
</span></code></pre></div></div> <p>Open up your Applications folder, and you should find GZDoom there, ready to go.</p> <div class="centered-image" style="width: 80%"> <figure> <img src="/assets/images/2022-05-13/gzdoom-in-applications.jpg" alt="GZDoom in the macOS Applications directory"/> </figure> </div> <p>However, if you double-click the icon and open GZDoom, you will likely find yourself greeted with an error message that looks like the following:</p> <div class="centered-image" style="width: 80%"> <figure style="margin-bottom: 0.5em"> <img src="/assets/images/2022-05-13/gzdoom-needs-wad-file.jpg" alt="GZDoom cannot find a Doom WAD file"/> </figure> </div> <p>GZDoom needs WAD files to run (and for you to place them in your local Library directory, <code class="language-plaintext highlighter-rouge">~/Library/Application Support/gzdoom</code>, which we will get to later…).</p> <p>GZDoom’s purpose is to run Doom, and is not, itself, the game Doom. So, it’s off to the store to go get it!</p> <h2 id="get-doom">Get Doom</h2> <p><em><a href="https://doomwiki.org/wiki/The_Ultimate_Doom">The Ultimate Doom</a></em> may be <a href="https://store.steampowered.com/app/2280/Ultimate_Doom/">available on Steam</a>, but we are going to need a file that is only provided in the version <a href="https://www.gog.com/en/game/the_ultimate_doom">available on GOG.com</a>.</p> <p>So, if you have not got a <a href="https://www.gog.com/">GOG.com</a> account yet, create one, then go and buy your copy of <em>The Ultimate Doom</em>.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-13/gog-doom.jpg" alt="GOG.com The Ultimate Doom purchase page"/> <figcaption> The price displayed here is in <a href="https://en.wikipedia.org/wiki/Australian_dollar">AUD</a>. Your price will likely reflect your region. </figcaption> </figure> </div> <p>All paid up and ready to go? Great! Go to the game detail page for your copy of <em>The Ultimate Doom</em> and let’s have a look at the files that are available to download.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-13/gog-doom-download.jpg" alt="Download the Doom Offline Backup Game Installers from GOG.com"/> </figure> </div> <p>See that big blue “DOWNLOAD AND INSTALL NOW” button that GOG.com is trying to guide you toward? Ignore it. The file downloaded from that button is for Windows users only, and cannot be used on a Mac.</p> <p>What we want is the less obvious “Offline Backup Game Installer”. Download the file linked from there, which will have a name like <code class="language-plaintext highlighter-rouge">setup_final_doom_1.9_(28044).exe</code>. Although we cannot directly use this <code class="language-plaintext highlighter-rouge">.exe</code> file on Mac, it contains the Doom WAD file that we seek to extract.</p> <h2 id="extract-wad-file">Extract WAD File</h2> <p>The extraction process is going to generate a lot of new files, so I would suggest first creating a new directory somewhere that can contain them.</p> <p>I just created a temporary <code class="language-plaintext highlighter-rouge">TheUltimateDoom</code> directory on my home Desktop, and put the setup file in there (feel free to do the same, or name it whatever you would like):</p> <div class="centered-image" style="width: 60%"> <figure> <img src="/assets/images/2022-05-13/setup-exe-file.jpg" alt="The offline backup game installer in its own directory"/> <figcaption> Terminal path: <code>~/Desktop/TheUltimateDoom</code> </figcaption> </figure> </div> <p>In order to perform the extraction, you will need to install a new program called <a href="https://constexpr.org/innoextract/"><code class="language-plaintext highlighter-rouge">innoextract</code></a> (<a href="https://github.com/dscharrer/innoextract">source code</a>).</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-13/innoextract.jpg" alt="innoextract web page screenshot"/> </figure> </div> <p><code class="language-plaintext highlighter-rouge">innoextract</code> is a “tool to unpack installers created by <a href="https://jrsoftware.org/isinfo.php">Inno Setup</a>”, which is a “tool to create installers for Microsoft Windows applications”. Of particular interest to us is that it supports GOG.com’s Inno Setup-based game installers, which the “Offline Backup Game Installer” you downloaded most definitely is.</p> <p>Like with GZDoom, you install <code class="language-plaintext highlighter-rouge">innoextract</code> using Homebrew with the following command:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">brew install innoextract
</span></code></pre></div></div> <blockquote> <p>Unlike with GZDoom, using Homebrew is the <em>only</em> installation option available. So, if you ignored the last suggestion to install GZDoom using a terminal, now is the time to acquaint yourself with the command line.</p> </blockquote> <p>If everything is successful, you should get output that looks something like this:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>brew <span class="nb">install </span>innoextract
<span class="gp">==&gt;</span><span class="w"> </span>Downloading https://ghcr.io/v2/homebrew/core/innoextract/manifests/1.9_1
<span class="gp">#</span><span class="c">####################################################################### 100.0%</span>
<span class="gp">==&gt;</span><span class="w"> </span>Downloading https://ghcr.io/v2/homebrew/core/innoextract/blobs/sha256:7206f8b88483356746d682b1e631d214e6172b808bd7b8b0567cb9c0f0906abb
<span class="gp">==&gt;</span><span class="w"> </span>Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sha256:7206f8b88483356746d682b1e631d214e6172b808bd7b8b0567cb9c0f0906abb?se<span class="o">=</span>2022-05-13T23%3A25%3A00Z&amp;sig<span class="o">=</span>AvLqNPFvkGI%2B9T1AJqz%2FWNuK0AW%2FzO%2FrIVjRHJeiBc4%3D&amp;sp<span class="o">=</span>r&amp;spr<span class="o">=</span>https&amp;s
<span class="gp">#</span><span class="c">####################################################################### 100.0%</span>
<span class="gp">==&gt;</span><span class="w"> </span>Pouring innoextract--1.9_1.monterey.bottle.tar.gz
<span class="go">🍺  /usr/local/Cellar/innoextract/1.9_1: 7 files, 622.9KB
</span><span class="gp">==&gt;</span><span class="w"> </span>Running <span class="sb">`</span>brew cleanup innoextract<span class="sb">`</span>...
</code></pre></div></div> <p>Let’s now put <code class="language-plaintext highlighter-rouge">innoextract</code> into action. In your terminal, change directory (<a href="https://en.wikipedia.org/wiki/Cd_(command)"><code class="language-plaintext highlighter-rouge">cd</code></a>) to the location where you put the Offline Backup Game Installer file, and run <code class="language-plaintext highlighter-rouge">innoextract</code> against it.</p> <p>For the directory and installer filename above, that would be:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">cd ~/Desktop/TheUltimateDoom
innoextract setup_final_doom_1.9_(28044).exe
</span></code></pre></div></div> <p>If everything is successful, you will get a whole bunch of output on your screen, that will include something like the following:</p> <div class="centered-image" style="width: 100%"> <figure style="margin: 0"> <img src="/assets/images/2022-05-13/innoextract-wad.jpg" alt="Extract WAD file from Offline Backup Game Installer file"/> </figure> </div> <p>And there is your payload: <code class="language-plaintext highlighter-rouge">DOOM.WAD</code>. Let’s go and introduce it to GZDoom!</p> <h2 id="play-doom-with-gzdoom">Play Doom with GZDoom</h2> <p>Open up a Finder window, go to the directory where all of your now-extracted files are, and find <code class="language-plaintext highlighter-rouge">DOOM.WAD</code>:</p> <div class="centered-image" style="width: 90%"> <figure style="margin: 0"> <img src="/assets/images/2022-05-13/wad-file-location.jpg" alt="Locate DOOM.WAD file in a Finder window"/> </figure> </div> <p>Copy <code class="language-plaintext highlighter-rouge">DOOM.WAD</code> into your local Library files under a <code class="language-plaintext highlighter-rouge">gzdoom</code> directory, so that GZDoom knows where to find it. If a <code class="language-plaintext highlighter-rouge">gzdoom</code> directory does not exist already, you can create it:</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-13/application-support-doom-wad.jpg" alt="Copy DOOM.WAD over to your local Library files"/> <figcaption> Terminal path: <code>~/Library/Application Support/gzdoom</code> </figcaption> </figure> </div> <p>Once you have done this, you can safely delete your <code class="language-plaintext highlighter-rouge">TheUltimateDoom</code> directory where you extracted all of Doom’s files.</p> <p>Now, all that is left is to run GZDoom! Double-click GZDoom in your Applications directory, and you should be greeted with a familiar title screen:</p> <div class="centered-image" style="width: 90%"> <figure style="margin: 0"> <img src="/assets/images/2022-05-13/doom-mac-desktop.jpg" alt="Doom on Mac using GZDoom"/> </figure> </div> <p>If you ever buy any other titles that also have WAD files, like <a href="https://en.wikipedia.org/wiki/Doom_II">Doom II</a>, or <a href="https://en.wikipedia.org/wiki/Heretic_(video_game)">Heretic</a> (or get any of the other <a href="https://doom.fandom.com/wiki/List_of_notable_WADs">list of notable WADs</a>), repeat the same process, and you should also be able to play them in GZDoom.</p> <p>But for now, don your helmet and armour, load your shotgun, and get yourself back to Mars for some classic <a href="https://en.wikipedia.org/wiki/2.5D">2.5D</a> fragging fun!</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>GZDoom is named after <a href="https://de.wikipedia.org/wiki/Sesamstra%C3%9Fe#Graf_Zahl">Graf Zahl</a>, the German name for <a href="https://en.wikipedia.org/wiki/Sesame_Street">Sesame Street</a> character <a href="https://en.wikipedia.org/wiki/Count_von_Count">Count von Count</a>, which <a href="https://github.com/coelckers">Christoph Oelckers</a>, GZDoom’s coder and maintainer, uses as an online <a href="https://www.merriam-webster.com/dictionary/moniker">moniker</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p>The meaning (and pronunciation) of the “Z” in ZDoom would seem to be <a href="https://forum.zdoom.org/viewtopic.php?t=290">up</a> <a href="https://forum.zdoom.org/viewtopic.php?t=1112">for</a> <a href="https://forum.zdoom.org/viewtopic.php?t=3761">debate</a>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="gaming"/><summary type="html"><![CDATA[Send Doomguy to hell without having to migrate to Windows.]]></summary></entry><entry><title type="html">`self.run`</title><link href="https://www.paulfioravanti.com/blog/self-dot-run/" rel="alternate" type="text/html" title="`self.run`"/><published>2022-05-01T19:45:00+10:00</published><updated>2022-05-01T19:45:00+10:00</updated><id>https://www.paulfioravanti.com/blog/self-dot-run</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/self-dot-run/"><![CDATA[<div class="post-audio"> <div class="post-audio-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/L_cNTVWBIIc" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> </div> <div class="spacer"></div> <div class="text"> :studio_microphone: This post has audio narration </div> </div> <p>Coming back home from picking up dinner, I arrived at my front door out of breath, heart beating rapidly, and just generally feeling unpleasant.</p> <p>The cause: exerting the apparently gargantuan effort of climbing up a couple of flights of stairs.</p> <p>In early 2020, we were just finding out about a <a href="https://en.wikipedia.org/wiki/COVID-19">virus</a> that would seem to cause respiratory illness, which, if we are not careful, we may contract in the short term, but will most definitely come into contact with in the long term.</p> <p>My lack of stamina and general fitness at the time made me worried that I was not in any kind of state to potentially take on a fight for my life, should I become infected.</p> <p>“Running helps improve endurance, doesn’t it?”, I thought. “It’s really boring, but I guess I should give it a try.” So, I did.</p> <h2 id="body-compilation">Body Compilation</h2> <p>While everyone understands intuitively how to logistically make your body perform the act of running (walking, but faster, right?), when your initial fitness <a href="https://en.wikipedia.org/wiki/State_(computer_science)">state</a> is the equivalent of an unmaintained <a href="https://en.wikipedia.org/wiki/Software_bug">:beetle:-riddled</a> <a href="https://en.wikipedia.org/wiki/Spaghetti_code">:spaghetti: codebase</a>, some <a href="https://en.wikipedia.org/wiki/Code_refactoring">refactoring</a> work will be needed before you can get yourself to <a href="https://en.wikipedia.org/wiki/Run_command">run</a> properly.</p> <p>If you are just starting to run, what distance should you aim for? Should you be running a certain amount of time per day, or per week? How fast should you be attempting to run? Do you have to start by running? What about jogging, or just walking?</p> <p>Answers to these questions eluded me. I did not want to end up paralysed into doing nothing, but also did not want to overexert myself into injury, or inability to continue longer term.</p> <p>Therefore, like any good computer programmer, I did the laziest thing possible: I outsourced building a running strategy to the well-known <a href="https://www.nhs.uk/live-well/exercise/couch-to-5k-week-by-week/">Couch to 5K</a> plan (C25K).</p> <p>Since it is just a plan, there are many different technical implementations of it, from the official <a href="https://apps.apple.com/gb/app/one-you-couch-to-5k/id1082307672">iOS</a> and <a href="https://play.google.com/store/apps/details?id=com.phe.couchto5K">Android</a> apps, to <a href="https://www.active.com/mobile/couch-to-5k-app">the “Active”-branded iOS app</a> I somehow ended up using (I’d wager C25K apps are all pretty much interchangeable).</p> <p>With canned plan in hand, only the most difficult step remained: execution. I had to actually force myself to do this thing over the course of 9 weeks.</p> <h2 id="program-execution">Program Execution</h2> <div class="centered-image" style="width: 100%"> <figure> <img src="/assets/images/2022-05-01/sporlab-XiZ7pRvCzro-unsplash.jpg" alt="pair of blue-and-white Adidas running shoes"/> <figcaption style="text-align: center;"> Photo by <a href="https://unsplash.com/@sporlab?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> sporlab </a> on <a href="https://unsplash.com/s/photos/running?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Unsplash </a> </figcaption> </figure> </div> <p>I was self-conscious about jogging during daylight hours. So, I decided to make things even more difficult for myself by going out at the social-distancing-friendly time of 5:00am, three times a week, and do whatever the app robot voice told me to do: “walk”, “brisk walk”, or “jog” at varying intervals.</p> <p>The only thing that made this even slightly bearable was listening to spoken-word <a href="https://en.wikipedia.org/wiki/Podcast">podcasts</a>. They enabled my brain to be distracted by focusing on stories and conversations, while my body and breathing went on auto-pilot to push me through each day of the programme.</p> <p>Although the podcasts helped, sticking to this routine, especially as 5:00am got colder and darker heading into winter, was an exercise in <a href="https://en.wikipedia.org/wiki/Grit_(personality_trait)">grit</a>. Every fibre of my being questioned the need to do this to myself, but I found that as long as I could actually pull myself out of bed, that would be enough momentum to get me out the door, and into the chilly morning air.</p> <blockquote> My wife's nickname for me during this time became "<a href="https://en.wikipedia.org/wiki/Godzilla">Godzilla</a>", due both to my early morning water vapour breath resembling his "atomic breath", and it being a <a href="https://en.wikipedia.org/wiki/Word_play">play on words</a> from the original Japanese pronunciation, <strong>Gojira</strong> (ゴジラ), where <strong>goji</strong> can also mean 5 o'clock (becoming <span class="japanese-with-furigana-romaji"> <ruby lang="ja" class="japanese"> <ruby lang="ja">５<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 8px;">ゴ</rt><rp>)</rp></ruby> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">時<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 8px;">ジ</rt><rp>)</rp></ruby> </ruby> </span> ラ). </blockquote> <p>Sometimes, I did lose the battle with my wake-up alarm, necessitating catch up sessions on concurrent days if I was going to stick to C25K’s schedule of 3 runs per week. Sometimes, the battle got lost for me: I pulled both of my <a href="https://en.wikipedia.org/wiki/Calf_(leg)">calf</a> muscles at least once during the course of the C25K, resulting in me limping home and resting for a few days (so just know that if you are going to try this, expect that you will probably lightly injure yourself, and it is not the end of the world).</p> <p>But, every completed run got me that one small step toward finishing the 27 runs the C25K plan had laid out for me (9 weeks x 3 runs per week). The desire to complete this “game”, and those small <a href="https://en.wikipedia.org/wiki/Dopamine">dopamine</a> hits I got after each completed “stage”, provided enough incentive to propel me forward to the end.</p> <h2 id="return-value">Return Value</h2> <p>The rewards I got for completing the program were:</p> <ul> <li>the satisfaction of having hit a goal I set</li> <li>being actually able to run 5 kilometres for the first time in probably ever</li> <li>a general elevated sense of well-being I had not felt for many years</li> <li>becoming a “morning person” by force</li> <li>thinking that maybe I had decreased my chances of being severely impacted by, or dying from, COVID-19</li> </ul> <p>These were all well and good, but now that the goal was done, so was the structure I had relied on for the last 9 weeks to haul myself out of bed.</p> <p>In an attempt to continue momentum, and confirm that getting to 5K was not a one-time fluke, I ended up repeating the final day of the plan 12 more times, playing out a long goodbye to my robot friend.</p> <p>After that got tiresome, I moved on to the app’s “free run” step, containing no robot guidance, which seems to exist as just a general bucket to log run information. 14 “free runs” later, and I started to get the same feeling as when I have completed all the missions and side quests in an <a href="https://en.wikipedia.org/wiki/Open_world">open world</a> game, and the urge to continue starts fizzling out.</p> <p>I was treading water. The C25K app had successfully served its purpose, and it was time to graduate away from it.</p> <h2 id="long-running-process">Long Running Process</h2> <p>Enter <a href="https://www.strava.com/">Strava</a>, probably the most directly beneficial social media app I currently use.</p> <p>As well as logging runs, I have gotten Strava to plot routes on maps for me to run based on what distance I want to try, leading to discovering more of my local area from the ground level. <a href="https://blog.strava.com/routes/">Plotting routes near you</a> is actually a feature for paid subscribers only; after using Strava for a few months with a free account, I decided that it was worth trying out its paid features, and so far, I have no regrets.</p> <p>Wanting to explore routes farther out has gradually lifted the distances I currently run: from 5 kilometres when I first started, to 8 kilometres on an average weekday, and about 10 kilometres on weekends, when I have more time.</p> <div class="centered-image" style="width: 90%"> <figure> <img src="/assets/images/2022-05-01/lucas-favre-JnoNcfFwrNA-unsplash.jpg" alt="silhouette photo of a person running on road"/> <figcaption style="text-align: center;"> Photo by <a href="https://unsplash.com/@we_are_rising?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> lucas Favre </a> on <a href="https://unsplash.com/s/photos/running?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"> Unsplash </a> </figcaption> </figure> </div> <p>And I want to do more. What was a huge grind when I first started is now just a part of my life routine, and I actually start to <em>miss</em> running — this boring activity — if I have been unable to do it for a couple of days.</p> <p>Seeing the activities of friends that I follow also provides some <a href="https://en.wikipedia.org/wiki/Accountability_partner">accountability buddy</a>-like benefits, keeping me going so I have something to show for myself on my timeline.</p> <p>Overall, I can definitely recommend giving it a try if you plan to start running or cycling, and I am sure it is better for your physical and mental health than <a href="https://en.wikipedia.org/wiki/Doomscrolling">doomscrolling</a> through the <a href="https://twitter.com/home">bird site</a>.</p> <h2 id="running-toolkit">Running Toolkit</h2> <p>In order to make walking-but-faster as bearable and safe as possible, I found that I needed to open my wallet a few times. Aside from the aforementioned Strava paid account, here is where that money has gone:</p> <h3 id="shoes">Shoes</h3> <p>By far the most comfortable shoes I’ve used for running, or even just general use, are <a href="https://www.adidas.com.au/ultraboost">Adidas Ultraboost</a>. I own multiple pairs, and rotate them on every run in hopes they will last longer.</p> <p>They are quite pricey, so I try and stock up on them when they go on sale.</p> <h3 id="earbuds">Earbuds</h3> <p>I’m mostly a slave to the Apple ecosystem, so I have a set of <a href="https://www.apple.com/airpods-pro/">Airpods Pro</a>. These generally function well, but I found that due to their absence of ear hooks, they would often annoyingly fall out of my ears as I worked up a sweat.</p> <p>I unsuccessfully attempted to use <a href="https://symbioeartips.com/">Symbio ear tips</a> to keep the Airpods in, and it was only when I used <a href="https://www.amazon.com/gp/product/B0837G66Q5">AhaStyle Ear Hooks Covers</a> that I was able to get them to stay firmly in place. The only drawback to using them is having to take the hooks on and off for every run, since the Airpods cannot fit back in their charger when the hooks are on.</p> <p>I now consider it a design flaw that Airpods do not come with some kind of ear stabilisers, especially since other comparable earbud models, like the <a href="https://www.bose.com/en_us/products/headphones/earbuds/bose-sport-earbuds.html">Bose Sport Earbuds</a>, which I have also enjoyed using, have hooks built in. Here’s hoping that Apple sees fit to remedy this on future iterations of their product.</p> <h3 id="headlamp">Headlamp</h3> <p>It is generally dark at 5:00am, so if you are planning to go out for a run at that time, it can help tremendously if you can actually see where you are going (who knew?).</p> <p>There are many types of running headlamps on the market at varying price points. I know that I don’t know a lot about them, and so decided to get a very entry level model at a low price point, the <a href="https://www.foxelli.com/collections/headlamps/products/headlamp-mx20">Foxelli MX20 Headlamp</a>. It has worked well for me running in urban areas that are at least moderately lit by street lamps. However, it has fallen short of providing adequate visibility where that ambient light is in short supply, like off-street paths and bush trails.</p> <p>So, I am currently investigating other models that can up the <a href="https://en.wikipedia.org/wiki/Lumen_(unit)">lumens</a> of light without weighing down my head, or costing a fortune.</p> <h2 id="just-do-something">Just Do Something</h2> <p>Speaking as someone that took care of his body during his teens, but not during his 20s and 30s, and is attempting to pay down that debt now by trying to care again in his 40s, I obviously wish I had changed my mindset sooner. But, better late than never.</p> <p>I now more viscerally understand that I spent too much time focusing on improving my mind as a developer, at the expense of body maintenance. After a morning run, my mind feels a lot sharper, and ready to tackle a day of fighting computers, so it doesn’t even make sense to have avoided doing this for so long, given the benefits.</p> <p>So, if you are finding that you are devoting <em>all</em> your self-improvement efforts towards your <a href="https://en.wikipedia.org/wiki/Ghost_in_the_Shell">ghost, rather than your shell</a>, I would urge you to try to diversify your effort investments, and help give some balance to your human portfolio.</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="fitness"/><category term="running"/><summary type="html"><![CDATA[The act of running is boring, so I grinded until I could tolerate it.]]></summary></entry><entry><title type="html">Mum’s Meetup</title><link href="https://www.paulfioravanti.com/blog/mums-meetup/" rel="alternate" type="text/html" title="Mum’s Meetup"/><published>2021-11-17T13:05:00+11:00</published><updated>2021-11-27T23:05:00+11:00</updated><id>https://www.paulfioravanti.com/blog/mums-meetup</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/mums-meetup/"><![CDATA[<div class="post-audio"> <div class="post-audio-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/Ehi-ett4PWM" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> </div> <div class="spacer"></div> <div class="text"> :studio_microphone: This post has audio narration </div> </div> <p>When you run a meetup, one of the more difficult things to gauge can be whether you’re actually doing it right.</p> <p>Feedback can be elusive, so it can be hard to know if this event that you put on has some value for, or is meaningful to, the people that come along.</p> <p>One day, though, I did get some feedback about a meetup from the most unlikely of places, and it helped reframe my views on the importance of community and human connection.</p> <hr/> <p>I have written posts encouraging participation in meetups before (<em><a href="https://www.paulfioravanti.com/blog/speak-at-meetups/">Speak at a Meetup</a></em>, and <em><a href="https://www.paulfioravanti.com/blog/organise-meetups/">Organise a Meetup</a></em>), but of all my attempts at evangelising this, I think I am most proud of having gotten one particular person into the meetup game:</p> <p>My mother.</p> <p>When Mum retired after a long career in education, I worried about how she would fill her days.</p> <p>Work constituted an important part of her life, and kept her constantly busy. With her children occupied with their own lives, no other family, few close friends who were, themselves, still working, and no specific hobbies that involved socialising, what would she do with herself?</p> <p>I was organising the <a href="https://www.meetup.com/en-AU/Ruby-On-Rails-Oceania-Sydney">Ruby on Rails Oceania Sydney</a> meetup at the time, and suggested that she try finding some communities that interested her, and go along to their events.</p> <p>Making new friends is harder as you get older, so she was hesitant at first. But, after talking up the benefits that I got from meetup participation after moving to a new city where I knew no one, she took the plunge.</p> <p>It was an over-50s social meetup, and on her first timid steps into the event space, the organiser rushed over, welcomed her with a big smile, and introduced her to some of the other members of the group.</p> <p>First impressions from the initial meetup were so good that Mum started regularly attending almost immediately. All the new people she met at the meetup, the places they went to, and the activities they did together, became a staple feature of our conversations.</p> <p>Frequent participation at the meetup events led Mum to become well-known and trusted. It was not long before she was invited into the leadership team, started running specific events for members, and eventually took on more responsibility as one of the main meetup organisers.</p> <p>And when Mum runs a meetup, much like when she ran a single-parent household, you will find no <a href="https://www.merriam-webster.com/dictionary/half%20measure">half measures</a>: multiple social events every week, from pub gatherings to cultural excursions to dinner parties.</p> <p>Between running her own events, helping others run theirs, scouting new venues for future potential meetups, handling new memberships (including dealing with financials), general <a href="https://en.wiktionary.org/wiki/herd_cats">cat herding</a>, and managing the drama found in large social groups of people with various personalities and temperaments, there is no doubt I would define it as a full-time job.</p> <p>Mum and I essentially became peers in this meetup space, though the amount of effort involved in her meetups leaves my own credentials as a so-called “organiser” of some <a href="https://www.merriam-webster.com/dictionary/dinky">dinky</a> technical meetups once a month in the dust!</p> <p>I am glad to have been shown up, though, as Mum’s passion and enthusiasm for meetup organisation and bringing people together led to her to become a happier, and even more outgoing, person.</p> <hr/> <p>We held Mum’s wake in the same pub we celebrated her 60th birthday some years earlier.</p> <p>More than a hundred people crammed into the room we had reserved to farewell Mum<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, and I delivered a tearful eulogy to a group of unfamiliar faces.</p> <p>But, they all knew Mum from the meetup.</p> <p>Over the course of the afternoon, I got to meet many of them, and receive their memories of Mum, each recount a small gift to my mourning soul.</p> <p>One, though, in particular, stood out:</p> <blockquote> <p>“Your Mum saved my life.”</p> </blockquote> <p>I smiled politely, but as if to immediately quash any potential thoughts of hyperbole, they continued on that no, really, they were mentally in a very dark place when they first went on a whim to one of Mum’s meetups.</p> <p>But, Mum took care of them immediately, got them talking to others, which led to conversations that grew into friendships.</p> <p>And that’s what kept them going, enabling them to be there, at the wake, on that day.</p> <hr/> <p>So, I got to take that feedback, on behalf of Mum, and attempt to apply it to my own meetups. Getting together to nerd out over programming languages seems unlikely to save a life in my mind, but, ultimately, who’s to say?</p> <p>You may not know, nor ever know, the impact on others of whatever you put out in the world. I think as long as the effort is worth the intrinsic value you get from it, it’s okay to just keep doing it.</p> <p>In times of plague, it has admittedly been tough to keep up a feeling of community when we are all apart, and the interface to meetups is the same as every work meeting you have been forced to attend on <a href="https://zoom.us/">Zoom</a>.</p> <p>But, I hope that having persevered with them, even in a remote format, is considered better than not, and that once we reach whatever ends up passing for normality, real human connection (and maybe even shared :pizza:?) can come back to meetups.</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>Early 2019, pre-normalisation of social distancing <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="meetups"/><summary type="html"><![CDATA[Organising a meetup gave my Mum a new lease on life.]]></summary></entry><entry><title type="html">A Person’s Character (人という字は)</title><link href="https://www.paulfioravanti.com/blog/persons-character/" rel="alternate" type="text/html" title="A Person’s Character (人という字は)"/><published>2021-10-17T17:30:00+11:00</published><updated>2022-06-18T15:25:00+10:00</updated><id>https://www.paulfioravanti.com/blog/persons-character</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/persons-character/"><![CDATA[<div class="post-audio"> <div class="post-audio-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/TlkoRxyb7E4" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> </div> <div class="spacer"></div> <div class="text"> :studio_microphone: This post has audio narration </div> </div> <p>The father of the bride was making his wedding toast. He recounted how his daughter had left Japan alone to embark on an adventure to Australia, where she met the man she would eventually marry.</p> <p>I stood beside the father, translating his speech to English for the benefit of the Australian locals in attendance. I am not a professional interpreter by any means, but I thought I was doing pretty well.</p> <p>The speech continued, with the father suggesting that since the bridegroom was also a Japanese far from home, the couple could leverage their shared experiences, and support each other as they move forward and grow in their new life together.</p> <p>The father then did something that completely threw me off guard.</p> <p>He raised his two hands up to form a representation of “<a href="https://en.wiktionary.org/wiki/%E4%BA%BA">人</a>” (<em>hito</em>), the <em><a href="https://en.wikipedia.org/wiki/Kanji">kanji</a></em> character for “person”:</p> <div class="centered-image"> <figure> <img src="/assets/images/2021-10-17/person-hands.jpg" alt="Hands in the shape of the Japanese character for person"/> </figure> </div> <p>He then said:</p> <blockquote style="font-size: xx-large;"> <div class="japanese-with-furigana-romaji"> <ruby lang="ja" class="japanese"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 4px;">ひと</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> Hito </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> の <rp>[</rp> <rt class="romaji"> no </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">漢字<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 8px;">かんじ</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> kanji </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> は <rp>[</rp> <rt class="romaji"> wa </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> こう <rp>[</rp> <rt class="romaji"> kō </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> だから <rp>[</rp> <rt class="romaji"> dakara </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> ね <rp>[</rp> <rt class="romaji"> ne. </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> </div> <strong>The <em>kanji</em> for "person" looks like this.</strong> </blockquote> <p>The Japanese in the audience smiled knowingly and laughed politely.</p> <p>I stopped and looked at the father, waiting for some further information that could help me contextualise what seemed like a complete <a href="https://www.merriam-webster.com/dictionary/non%20sequitur">non sequitur</a>.</p> <p>He looked back at me, hands still raised, waiting for his cue to continue after my interpretation.</p> <p>With no further assistance, nor any real idea of how to proceed through this awkward pause, I felt I had no other choice but to also raise my hands into a “人” shape, and just translate what had been said literally:</p> <blockquote> <p>“The <em>kanji</em> for person looks like this…¯\<em>(ツ)</em>/¯”</p> </blockquote> <p>With a sympathetic shrug of the shoulders to the audience, who were clearly as confused as I was, we continued on. Translation of the rest of the speech went fine, but this “人” issue really stuck with me.</p> <p>What did I miss that was so intuitively obvious to the Japanese in attendance, but left me completely blindsided?</p> <h2 id="kinpachi-sensei">Kinpachi-sensei</h2> <p>The answer lies with <em><a href="https://en.wikipedia.org/wiki/Kinpachi-sensei">Kinpachi-sensei</a></em> (<a href="https://ja.wikipedia.org/wiki/3%E5%B9%B4B%E7%B5%84%E9%87%91%E5%85%AB%E5%85%88%E7%94%9F">3<ruby lang="ja">年<rp>(</rp><rt style="">ねん</rt><rp>)</rp></ruby>B<ruby lang="ja">組金八先生<rp>(</rp><rt style="">ぐみきんぱちせんせい</rt><rp>)</rp></ruby></a>, <em>San-nen B-gumi Kinpachi-sensei</em>), a long-running Japanese television drama that portrays a variety of social issues faced by junior high school students.</p> <p><a href="https://en.wikipedia.org/wiki/Tetsuya_Takeda">Tetsuya Takeda</a> (<a href="https://ja.wikipedia.org/wiki/%E6%AD%A6%E7%94%B0%E9%89%84%E7%9F%A2"><ruby lang="ja">武田<rp>(</rp><rt style="">たけだ</rt><rp>)</rp>鉄矢<rp>(</rp><rt style="">てつや</rt><rp>)</rp></ruby></a>) plays the titular role of school teacher Kinpachi Sakamoto, who sometimes illustrates points of morality to his students by deconstructing parts of <em>kanji</em> characters to reveal their deeper hidden meanings.</p> <p>During a scene in <em>Kinpachi-sensei</em>’s <a href="https://www.tbs.co.jp/tbs-ch/item/d1111/">4th special episode</a>, aired in 1985, Kinpachi writes “人” on the classroom blackboard, and says to his students:</p> <blockquote> <div class="japanese-with-furigana-romaji"> <ruby lang="ja" class="japanese"> <ruby lang="ja">君<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 4px;">きみ</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> Kimi </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> たち <rp>[</rp> <rt class="romaji"> tachi </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> いい <rp>[</rp> <rt class="romaji"> ii </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> です <rp>[</rp> <rt class="romaji"> desu </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> か <rp>[</rp> <rt class="romaji"> ka~. </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> 〜。 </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 4px;">ひと</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> Hito </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> と <rp>[</rp> <rt class="romaji"> to </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> いう <rp>[</rp> <rt class="romaji"> iu </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">字<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 4px;">じ</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> ji </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> は <rp>[</rp> <rt class="romaji"> wa </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> ねぇ <rp>[</rp> <rt class="romaji"> nē, </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> ひとり <rp>[</rp> <rt class="romaji"> hitori </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> の <rp>[</rp> <rt class="romaji"> no </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">「人」<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 8px;">ひと</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> "hito" </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> が <rp>[</rp> <rt class="romaji"> ga </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> もう <rp>[</rp> <rt class="romaji"> mō </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> ひとり <rp>[</rp> <rt class="romaji"> hitori </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> の <rp>[</rp> <rt class="romaji"> no </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">「人」<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 8px;">ひと</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> "hito" </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> を <rp>[</rp> <rt class="romaji"> wo </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">支えて<rp>(</rp><rt style="ruby-align: start; text-align: left; padding-left: 3px;">ささ</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> sasaete </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> いる <rp>[</rp> <rt class="romaji"> iru </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">字<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 4px;">じ</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> ji </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> です <rp>[</rp> <rt class="romaji"> desu. </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> <ruby lang="ja" class="japanese"> つまり <rp>[</rp> <rt class="romaji"> Tsumari, </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 4px;">ひと</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> hito </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> と <rp>[</rp> <rt class="romaji"> to </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 4px;">ひと</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> hito </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> が <rp>[</rp> <rt class="romaji"> ga </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <span class="japanese-compound-word"> <ruby lang="ja" class="japanese"> <ruby lang="ja">支え<rp>(</rp><rt style="ruby-align: start; text-align: left; padding-left:3px;">ささ</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> sasae </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">合ってる<rp>(</rp><rt style="ruby-align: start; text-align: left; padding-left:8px;">あ</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> atteru </rt> <rp>]</rp> </ruby> </span> </ruby> <ruby lang="ja" class="japanese"> から <rp>[</rp> <rt class="romaji"> kara </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 4px;">ひと</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> hito </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> なん <rp>[</rp> <rt class="romaji"> nan </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> です <rp>[</rp> <rt class="romaji"> desu. </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 4px;">ひと</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> Hito </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> は <rp>[</rp> <rt class="romaji"> wa </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 4px;">ひと</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> hito </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> に <rp>[</rp> <rt class="romaji"> ni </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> よって <rp>[</rp> <rt class="romaji"> yotte </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">支えられ<rp>(</rp><rt style="ruby-align: start; text-align: left; padding-left: 3px;">ささ</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> sasaerare, </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> 、 </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">人<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 4px;">ひと</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> hito </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> の <rp>[</rp> <rt class="romaji"> no </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">間<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 5px;">あいだ</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> aida </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> で <rp>[</rp> <rt class="romaji"> de </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">人間<rp>(</rp><rt style="ruby-align: center; text-align: center; padding-left: 6px;">にんげん</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> ningen </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> として <rp>[</rp> <rt class="romaji"> toshite </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> <ruby lang="ja">磨かれて<rp>(</rp><rt style="ruby-align: start; text-align: left; padding-left: 4px;">みが</rt><rp>)</rp></ruby> <rp>[</rp> <rt class="romaji"> migakarete </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> いくん <rp>[</rp> <rt class="romaji"> ikun </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> です <rp>[</rp> <rt class="romaji"> desu. </rt> <rp>]</rp> </ruby> <ruby lang="ja" class="japanese"> 。 </ruby> </div> <br/> Can I have your attention, please. So, the character for "person" consists of one person holding up and sustaining another person. In other words, it is a "person" precisely <em>because</em> a person and another person are supporting each other. A person gets support from other people and their community, and through that support, grows and develops as a human. </blockquote> <p>So, our expectations about the composition of this character are flipped on learning this new information: “人” is not a single character or “person”, but rather one person, <code class="language-plaintext highlighter-rouge">|</code>, leaning into another person, <code class="language-plaintext highlighter-rouge">|</code>, to form <code class="language-plaintext highlighter-rouge">人</code>.</p> <p>For English speakers, the sentiment above perhaps has recognisable echoes of the African proverb <a href="https://en.wikipedia.org/wiki/It_takes_a_village">“It takes a village to raise a child”</a>. But for Japanese, it resonated within the context of marriage, where two people “become one”.</p> <p>For the father of the bride, his daughter and new son-in-law would be leaning on each other for support as they begin their life together, not as two individuals, but as one family unit.</p> <p>Hence, “人” represented the new form their relationship had evolved into.</p> <h2 id="the-power-of-人">The Power of 人</h2> <p>The kicker to this romantic notion? It was <a href="https://www.oricon.co.jp/news/2206715/full/">a complete lie</a>.</p> <p>Takeda confirmed as much in an appearance he made in 2021 on The Wide Show (<a href="https://www.fujitv.co.jp/widna-show/">ワイドナショー</a>), a Japanese news and entertainment television program.</p> <p>But, the meme has had decades to burrow into the collective consciousness of a generation, and regardless of the generally accepted <a href="https://en.wiktionary.org/wiki/%E4%BA%BA/derived_terms#Glyph_origin">glyph origin of 人</a> to be a “side view of a standing man, highlighting the arms and legs” (known before Takeda made his admission, of course), I would wager we will see “人” appear again at future weddings.</p> <p>If I had my time again at that speech, knowing what I know now, I think I would offer up the following translation for “the <em>kanji</em> for ‘person’ looks like this”:</p> <blockquote> <p><strong>[Hold both hands apart in a straight “<code class="language-plaintext highlighter-rouge">|</code>” formation]</strong>: “The bride and groom, once two individuals…“<br/> <strong>[Bring hands together to form “<code class="language-plaintext highlighter-rouge">人</code>”]</strong>: “…have come together to become a single family unit, leaning on each other for support as they begin their new life together, forming this, the Japanese character for ‘person’.”<br/> <strong>[Push hands slightly forward]</strong>: “These two have become one”.</p> </blockquote> <p>It’s certainly not a literal translation, nor an academic one, nor one that directly infers how the character of “人” is derived. Rather, it’s just a short bit of fanciful flourish that I think conveys enough meaning for the time given without having to impart all the details given in this blog post.</p> <p>So, if you ever somehow find yourself in a similar wedding-speech-interpreting situation, feel free to use or riff on my translation, and hopefully that will at least reduce your number of potential awkward pauses by one.</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="japanese"/><category term="日本語"/><summary type="html"><![CDATA["人" may be the _kanji_ for person, but its simplicity masks a deeper meaning.]]></summary></entry><entry><title type="html">Pipe a Codebase into Ruby</title><link href="https://www.paulfioravanti.com/blog/pipe-codebase-into-ruby/" rel="alternate" type="text/html" title="Pipe a Codebase into Ruby"/><published>2021-10-10T20:50:00+11:00</published><updated>2021-10-10T20:50:00+11:00</updated><id>https://www.paulfioravanti.com/blog/pipe-codebase-into-ruby</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/pipe-codebase-into-ruby/"><![CDATA[<p><a href="https://twitter.com/alistairtweed">Alistair Tweed</a> asked an interesting question on the <a href="https://ruby.org.au/">Ruby Australia</a> <a href="https://ruby-au-join.herokuapp.com/">Slack</a>, which I thought deserved a more permanent home over being banished to <a href="https://slack.com/">Slack</a>’s archives:</p> <blockquote> <p>Can anyone help me with getting user input when piping code to Ruby?<br/> The command I’m using is:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>hello | ruby
</code></pre></div> </div> <p>The <code class="language-plaintext highlighter-rouge">hello</code> file contains the following code:</p> <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env ruby</span>
<span class="c1"># frozen_string_literal: true</span>

<span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">strip</span>

<span class="nb">puts</span> <span class="s2">"Hello, </span><span class="si">#{</span><span class="nb">name</span> <span class="o">||</span> <span class="s1">'World'</span><span class="si">}</span><span class="s2">!"</span>
</code></pre></div> </div> <p>When using <code class="language-plaintext highlighter-rouge">gets</code>, the output is <code class="language-plaintext highlighter-rouge">Hello, World!</code><br/> When using <code class="language-plaintext highlighter-rouge">STDIN.read</code>, the output is <code class="language-plaintext highlighter-rouge">Hello, !</code><br/> The problem is that the script doesn’t stop to allow the user to type in a value. Any ideas?</p> </blockquote> <p>I do not think I had previously considered running a <a href="https://www.ruby-lang.org/en/">Ruby</a> program in this way, but regardless of whether I ever would or not, I was curious about how this question could be answered.</p> <p>All the examples below will be for the <a href="https://www.gnu.org/software/bash/">Bash</a> shell unless specified.</p> <h2 id="why-dont-you-just">Why don’t you just…?</h2> <p>First, though, let’s just address some potential “why don’t you just…?” questions around the use of <a href="https://en.wikipedia.org/wiki/Pipeline_(Unix)">piping</a> in this scenario.</p> <div class="centered-image"> <figure> <img src="/assets/images/2021-10-10/treachery-of-images-unix.jpg" alt="The Treachery of Images Unix parody"/> <figcaption> This is not a Unix pipe. From <a href="https://www.reddit.com/r/ProgrammerHumor/comments/1vyuny/ceci_nest_pas_une_pipe/"> r/ProgrammerHumor </a> </figcaption> </figure> </div> <p>Yes, we could <em>just</em> change the command to pass the file directly to <code class="language-plaintext highlighter-rouge">ruby</code>, and manually type in a name when <a href="https://rubyapi.org/o/kernel#method-i-gets"><code class="language-plaintext highlighter-rouge">gets</code></a> prompts for it:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ruby hello
Mario
Hello, Mario!
</code></pre></div></div> <p>We could also use <a href="http://www.gnu.org/software/bash/manual/html_node/Process-Substitution.html#Process-Substitution">process substitution</a> to allow us to provide a name as an argument when running a command:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ruby hello &lt;<span class="o">(</span><span class="nb">echo </span>Mario<span class="o">)</span>
Hello, Mario!
</code></pre></div></div> <p>The codebase, as it stands, only really gives unexpected results when we ignore the input prompt (ie just press <code class="language-plaintext highlighter-rouge">[Enter]</code>):</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ruby hello
&lt;press Enter&gt;
Hello, <span class="o">!</span>
</code></pre></div></div> <p>Pressing <code class="language-plaintext highlighter-rouge">[Enter]</code> sends an empty string (<code class="language-plaintext highlighter-rouge">""</code>), not <code class="language-plaintext highlighter-rouge">nil</code>, and since <code class="language-plaintext highlighter-rouge">""</code> is a <a href="https://learn.co/lessons/truthiness-in-ruby-readme">truthy value in Ruby</a>, when <code class="language-plaintext highlighter-rouge">name || 'World'</code> gets evaluated, <code class="language-plaintext highlighter-rouge">name</code> gets output.</p> <p>This could be fixed by changing final line of the code to something like:</p> <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s2">"Hello, </span><span class="si">#{</span><span class="nb">name</span><span class="p">.</span><span class="nf">empty?</span> <span class="p">?</span> <span class="s1">'World'</span> <span class="p">:</span> <span class="nb">name</span><span class="si">}</span><span class="s2">!"</span>
</code></pre></div></div> <p>This allows the program to fall back to its default value when input is not provided:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ruby hello
&lt;press Enter&gt;
Hello, World!
</code></pre></div></div> <p>But! We are going to consider all of the above as <em>out of scope</em> for answering this question, and we are going to take the use of a pipe as an <em>unchangeable</em> (hard) requirement.</p> <h2 id="down-the-pipe">Down the Pipe</h2> <div class="centered-image"> <figure> <img src="/assets/images/2021-10-10/Mario!_(86871905).jpg" alt="The Manchester Mario"/> <figcaption> The Manchester Mario. <a href="https://commons.wikimedia.org/wiki/File:Mario!_(86871905).jpg"> Pete Birkinshaw from Manchester, UK </a>, <a href="https://creativecommons.org/licenses/by/2.0"> CC BY 2.0 </a>, via Wikimedia Commons </figcaption> </figure> </div> <p>Back to the problem at hand. Running the original command, we get the following:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>hello | ruby
Hello, World!
</code></pre></div></div> <p>The codebase is being passed over to <code class="language-plaintext highlighter-rouge">ruby</code>, so that we end up with a command that looks something like:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby &lt;code&gt;
</code></pre></div></div> <p>We want to be able to capture a reference to that code being passed over via the pipe, so that we can inject arguments into it, and create a command that looks something like:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby &lt;code&gt; <span class="o">[</span>arguments]
</code></pre></div></div> <h3 id="xargs">xargs</h3> <p>Whenever I want to do something potentially complex with piped-in arguments, I tend to reach for the <a href="https://en.wikipedia.org/wiki/Xargs">xargs</a> utility first. Let’s see what we can do with it.</p> <p>We will start with attempting to get the most basic command running first (without any arguments), follow the trail of errors until it works, add in arguments, then rinse and repeat.</p> <p>First let’s just try passing the code through xargs and see what happens:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>hello | xargs ruby
/../bin/ruby: No such file or directory <span class="nt">--</span> <span class="c">#!/usr/bin/env (LoadError)</span>
</code></pre></div></div> <p>It looks like we are only passing the first line of the file over to Ruby, rather than the entire file.</p> <p>This would seem to indicate that we have a <a href="https://en.wikipedia.org/wiki/Xargs#Separator_problem">separator problem</a>: xargs is not a line-oriented tool, but also separates on spaces.</p> <p>Looking back at the file, it’s first line is:</p> <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env ruby</span>
</code></pre></div></div> <p>xargs has separated on the space between <code class="language-plaintext highlighter-rouge">env</code> and <code class="language-plaintext highlighter-rouge">ruby</code>, resulting in the error above. Fortunately, using the <code class="language-plaintext highlighter-rouge">-0</code> flag deals with this problem, so let’s add it in:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>hello | xargs <span class="nt">-0</span> ruby
/../bin/ruby: No such file or directory <span class="nt">--</span> <span class="c">#!/usr/bin/env ruby (LoadError)</span>
<span class="c"># frozen_string_literal: true</span>

name <span class="o">=</span> gets&amp;.strip

puts <span class="s2">"Hello, #{name || 'World'}!"</span>
</code></pre></div></div> <p>Okay, it looks like the whole file is being passed through this time, but we are still getting the same error. It would seem that perhaps <code class="language-plaintext highlighter-rouge">ruby</code> is not evaluating the code it is getting passed.</p> <p>We can fix this by adding <code class="language-plaintext highlighter-rouge">ruby</code>’s <code class="language-plaintext highlighter-rouge">-e</code> flag:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>hello | xargs <span class="nt">-0</span> ruby <span class="nt">-e</span>
Hello, World!
</code></pre></div></div> <p>Great! We now have the default case working with xargs!</p> <p>But, we still need a reference to the Ruby code being piped through so that we can then give <em>it</em> arguments.</p> <p>To do that, we can use xargs’ <code class="language-plaintext highlighter-rouge">-I</code> option, and name the variable however we want. Let’s call it <code class="language-plaintext highlighter-rouge">rubycode</code>:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>hello | xargs <span class="nt">-0I</span> rubycode ruby <span class="nt">-e</span> rubycode
Hello, World!
</code></pre></div></div> <p>So far, so good. Now, what happens when we use process substitution to provide a name argument…?</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>hello | xargs <span class="nt">-0I</span> rubycode ruby <span class="nt">-e</span> rubycode &lt;<span class="o">(</span><span class="nb">echo </span>Mario<span class="o">)</span>
Hello, Mario!
</code></pre></div></div> <p>Looks like we have ourselves a working command! Ship it! :shipit:</p> <h3 id="xargs-1">!xargs</h3> <p>Looking back at the command, I cannot help but think that using xargs is overkill for this kind of problem. The pipe is passing the code through as <a href="https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)">standard input</a> (<code class="language-plaintext highlighter-rouge">stdin</code>), we use xargs to “catch” it, assign it to the <code class="language-plaintext highlighter-rouge">rubycode</code> variable, and then pass that variable on to <code class="language-plaintext highlighter-rouge">ruby</code>.</p> <p>Surely we can do the same thing with just plain bash code, right? Let’s give it a try by using <a href="https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html">command substitution</a> to capture the output of a <a href="https://www.gnu.org/software/bash/manual/html_node/Redirections.html">redirection</a> of <code class="language-plaintext highlighter-rouge">stdin</code> into a <code class="language-plaintext highlighter-rouge">rubycode</code> variable.</p> <p>As we did with xargs, we can then use that variable in the Ruby command:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>hello | <span class="nv">rubycode</span><span class="o">=</span><span class="si">$(</span>&lt; /dev/stdin<span class="si">)</span><span class="p">;</span> ruby <span class="nt">-e</span> <span class="s2">"</span><span class="nv">$rubycode</span><span class="s2">"</span> &lt;<span class="o">(</span><span class="nb">echo </span>Mario<span class="o">)</span>
<span class="o">[</span>No output]
</code></pre></div></div> <p>Hmmm…getting no output here is unexpected.</p> <p>And, indeed, it would seem that I have neglected to <a href="https://www.gnu.org/software/bash/manual/html_node/Command-Grouping.html">group these commands together</a> in <code class="language-plaintext highlighter-rouge">(</code>parentheses<code class="language-plaintext highlighter-rouge">)</code>, so that the redirection that gets assigned to the <code class="language-plaintext highlighter-rouge">rubycode</code> variable can be applied to the other command when it gets referenced in the <code class="language-plaintext highlighter-rouge">ruby</code> command:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>hello | <span class="o">(</span><span class="nv">rubycode</span><span class="o">=</span><span class="si">$(</span>&lt; /dev/stdin<span class="si">)</span><span class="p">;</span> ruby <span class="nt">-e</span> <span class="s2">"</span><span class="nv">$rubycode</span><span class="s2">"</span> &lt;<span class="o">(</span><span class="nb">echo </span>Mario<span class="o">))</span>
Hello, Mario!
</code></pre></div></div> <p>And we are back to working again! But, we can probably make this a little bit more compact without sacrificing readability.</p> <p>Let’s get rid of the intermediate <code class="language-plaintext highlighter-rouge">rubycode</code> variable, which removes a command, meaning no need for any grouping:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>hello | ruby <span class="nt">-e</span> <span class="s2">"</span><span class="si">$(</span>&lt; /dev/stdin<span class="si">)</span><span class="s2">"</span> &lt;<span class="o">(</span><span class="nb">echo </span>Mario<span class="o">)</span>
Hello, Mario!
</code></pre></div></div> <p>Success! At this point, I think I would consider the <a href="https://en.wiktionary.org/wiki/yak_shaving">yak shaved</a>, and leave it at that.</p> <p>There are two other minor refactors I can think of, which we will go through below for completeness’ sake (said very loosely: “completeness” as in “all I could think of right now”, as I am sure there are more ways to do many of the commands in this post), but I personally think they sacrifice readability.</p> <h3 id="bonus-shave">Bonus Shave</h3> <p>The <a href="https://www.gnu.org/software/coreutils/manual/html_node/cat-invocation.html"><code class="language-plaintext highlighter-rouge">cat</code></a> command, if no arguments are provided, copies the contents of what it receives from standard input to <a href="https://en.wikipedia.org/wiki/Standard_streams#Standard_output_(stdout)">standard output</a> (<code class="language-plaintext highlighter-rouge">stdout</code>). This means that we do not need to grab a reference to <code class="language-plaintext highlighter-rouge">stdin</code> and redirect it, but can instead just use <code class="language-plaintext highlighter-rouge">cat</code> in the <code class="language-plaintext highlighter-rouge">ruby</code> command:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>hello | ruby <span class="nt">-e</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span><span class="si">)</span><span class="s2">"</span> &lt;<span class="o">(</span><span class="nb">echo </span>Mario<span class="o">)</span>
Hello, Mario!
</code></pre></div></div> <p>If you use <a href="https://en.wikipedia.org/wiki/Z_shell">Z Shell</a> (<a href="https://www.zsh.org/"><code class="language-plaintext highlighter-rouge">zsh</code></a>), then you have the option of tapping directly into the mnemonics for Unix <a href="https://en.wikipedia.org/wiki/File_descriptor">file descriptors</a> for <code class="language-plaintext highlighter-rouge">stdin</code> (<code class="language-plaintext highlighter-rouge">0</code>), <code class="language-plaintext highlighter-rouge">stdout</code> (<code class="language-plaintext highlighter-rouge">1</code>), and <a href="https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)">standard error</a> (<code class="language-plaintext highlighter-rouge">stderr</code>, <code class="language-plaintext highlighter-rouge">2</code>):</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>hello | <span class="o">(</span>ruby <span class="nt">-e</span> <span class="s2">"</span><span class="si">$(</span>&lt;&amp;0<span class="si">)</span><span class="s2">"</span> &lt;<span class="o">(</span><span class="nb">echo </span>Mario<span class="o">))</span>
Hello, Mario!
</code></pre></div></div> <h2 id="blunt-razors">Blunt Razors</h2> <p>Our supply of yak shaving cream is depleted, and our razors are now blunt.</p> <p>Even if you never plan to run Ruby programs in the ways outlined above, hopefully, like me, you were able to learn a bit more about shell programming!</p> <p>Got any better commands that would make a shaven yak happier? Leave them in the comments!</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="ruby"/><category term="bash"/><category term="zsh"/><category term="shell"/><category term="pipe"/><category term="unix"/><summary type="html"><![CDATA["Pipes! Well done! I feel like Leonardo da Vinci! It's a masterpiece!"]]></summary></entry><entry><title type="html">A Canvas of Cypress Tests</title><link href="https://www.paulfioravanti.com/blog/canvas-of-cypress-tests/" rel="alternate" type="text/html" title="A Canvas of Cypress Tests"/><published>2021-10-06T22:50:00+11:00</published><updated>2022-03-25T15:40:00+11:00</updated><id>https://www.paulfioravanti.com/blog/canvas-of-cypress-tests</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/canvas-of-cypress-tests/"><![CDATA[<p>I have two different applications that essentially do the same thing. One is written using <a href="https://elixir-lang.org/">Elixir</a> and <a href="https://www.phoenixframework.org/">Phoenix</a>; the other, <a href="https://elm-lang.org/">Elm</a>.</p> <p>I am too lazy to write a separate test suite in each application’s language. I want to write just one test suite, and be able to run it against either application, without it needing to know about any technical internals.</p> <p>Sounds a lot like I want an <a href="https://en.wikipedia.org/wiki/Integration_testing">integration test</a> suite, something that <a href="https://www.cypress.io/">Cypress</a> excels in helping you build. Let’s see how we can use it to create the testing glue between the two applications.</p> <h2 id="internationalisation-in-elixirelm">Internationalisation in Elixir/Elm</h2> <p>The application under test is a very simple toy application that re-creates the <a href="http://tachyons.io/">Tachyons</a> <a href="http://tachyons.io/components/layout/full-screen-centered-title/index.html">Full Screen Centered Title component documentation page</a>, but adds a dropdown menu to change the language of the message on screen, and in the browser title.</p> <p><img src="/assets/images/2021-10-06/tachyons-elm.gif" alt="Tachyons App" title="Animated GIF of Tachyons page implemented in Elm"/></p> <blockquote> <p>The application codebases, and their companion blog posts, can be found at the following locations:</p> <table style="display: inline-table;"> <thead> <tr> <th style="text-align: left">Language</th> <th style="text-align: left">Application Codebase</th> <th style="text-align: left">Companion Blog Post</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Elixir/Phoenix</td> <td style="text-align: left"><a href="https://github.com/paulfioravanti/phx_i18n_example">Phoenix LiveView I18n Example</a></td> <td style="text-align: left"><em><a href="https://www.paulfioravanti.com/blog/internationalisation-phoenix-liveview/">Internationalisation with Phoenix LiveView</a></em></td> </tr> <tr> <td style="text-align: left">Elm</td> <td style="text-align: left"><a href="https://github.com/paulfioravanti/elm-i18n-example">Elm I18n Example</a></td> <td style="text-align: left"><em><a href="https://www.paulfioravanti.com/blog/runtime-language-switching-elm/">Runtime Language Switching in Elm</a></em></td> </tr> </tbody> </table> </blockquote> <p>The entire feature set consists of the following use cases:</p> <ol> <li><strong>Initial language setting</strong> <ul> <li>When the application has a language setting, it displays a message and title in that language.</li> <li>When the language setting is set to an unknown language, or is left blank, English is displayed.</li> </ul> </li> <li><strong>The language menu</strong> <ul> <li>The default state for the menu is closed.</li> <li>If you click the current language, the menu opens.</li> <li>When the menu is open: <ul> <li>if you click the current language, the menu closes</li> <li>if you click anywhere else on the page, the menu closes</li> <li>if you click another language, the menu closes</li> </ul> </li> </ul> </li> <li><strong>Changing language</strong> <ul> <li>For any language selectable in the dropdown menu, when you click that language, the display of the page will change to that language</li> </ul> </li> <li><strong>Language setting storage</strong> <ul> <li>If you change the application language and refresh the browser, the application will remember that change and still display in your chosen language</li> </ul> </li> </ol> <p>These use cases will form the blueprint for creating some <a href="http://mochajs.org/">Mocha</a> and <a href="http://chaijs.com/">Chai</a>-based tests in Cypress.</p> <p>We will start off with the third scenario, changing languages, since it will introduce us to some building blocks of Cypress testing. Initially, we will also focus on testing a single application, the Elm one.</p> <p>Once we have some passing tests, we will leverage some of Cypress’ features to do some refactoring, make sure that the same test can exercise both the Elm and Elixir applications at the same time, and then build on our knowledge by moving on to the other scenarios</p> <blockquote> <p>Feel free to follow along with the finished application, located at the <a href="https://github.com/paulfioravanti/cypress-i18n-example">Cypress I18n Example</a> Github repository.</p> </blockquote> <h2 id="changing-language">Changing Language</h2> <div class="centered-image" style="width: 90%;"> <figure> <img src="/assets/images/2021-10-06/van-gogh-wheatfield-with-cypresses-june-july-1889.jpg" alt="A Wheatfield with Cypresses, Vincent Van Gogh, mid June - 2 July 1889"/> <figcaption> "A Wheatfield with Cypresses", Vincent Van Gogh, mid June - 2 July 1889 </figcaption> </figure> </div> <p>After <a href="https://docs.npmjs.com/cli/init/">initialising a new Node JS application</a>, <a href="https://docs.cypress.io/guides/getting-started/installing-cypress">installing Cypress</a>, and making sure the Elm application is running, let’s create our first test to make sure we can switch language to Italian.</p> <blockquote> <p><a href="https://docs.cypress.io/api/table-of-contents">Cypress’ API documentation</a> is very user-friendly, so I will defer to you to reference it for any detailed explanations of Cypress-related functions you may see in the example code. I will only focus my commentary on application-specific logic, and any Cypress functionality I want to highlight.</p> </blockquote> <p><strong><code class="language-plaintext highlighter-rouge">cypress/integration/changing_language.spec.js</code></strong></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">Changing language</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">p</span><span class="dl">"</span><span class="p">).</span><span class="nx">click</span><span class="p">()</span>
  <span class="p">})</span>

  <span class="nx">context</span><span class="p">(</span><span class="dl">"</span><span class="s2">to Italian</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">li</span><span class="dl">"</span><span class="p">).</span><span class="nx">contains</span><span class="p">(</span><span class="dl">"</span><span class="s2">Italiano</span><span class="dl">"</span><span class="p">).</span><span class="nx">click</span><span class="p">()</span>
    <span class="p">})</span>

    <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">displays Italian</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">cy</span><span class="p">.</span><span class="nx">title</span><span class="p">().</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">eq</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Multilingualizzazione in Elm</span><span class="dl">"</span><span class="p">)</span>
      <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">h1</span><span class="dl">"</span><span class="p">).</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">contain</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Centrare verticalmente con css è facile!</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div> <p>A few notes about this test:</p> <ul> <li>Since no language is initially set in this scenario, the application defaults to display in English</li> <li>An Elm application runs at <code class="language-plaintext highlighter-rouge">http://localhost:3000</code> by default</li> <li>Since we are testing a bare-bones toy application, many <a href="https://en.wikipedia.org/wiki/HTML">HTML</a> tags represent unique elements on a page (eg <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code> for language menu), so we are able to target them by simply using commands like <a href="https://docs.cypress.io/api/commands/get"><code class="language-plaintext highlighter-rouge">cy.get()</code></a>, rather than needing more granular targets like <a href="https://www.w3schools.com/html/html_classes.asp">classes</a> or <a href="https://www.w3schools.com/html/html_id.asp">IDs</a>.</li> </ul> <p>Running the test within Cypress will look something like the following (but just note it has been slowed down significantly via <a href="https://github.com/cypress-io/cypress/issues/249#issuecomment-670028947">this technique</a>):</p> <figure> <img src="/assets/images/2021-10-06/change-language-italian-cypress.gif" alt="Change language to Italian passing test in Cypress"/> </figure> <p>Great! We have our first passing test, and a baseline case to create tests for the other scenarios. Thanks to this, testing for changing the language to Japanese is, for the most part, a reproduction job:</p> <p><strong><code class="language-plaintext highlighter-rouge">cypress/integration/changing_language.spec.js</code></strong></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">Changing language</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">p</span><span class="dl">"</span><span class="p">).</span><span class="nx">click</span><span class="p">()</span>
  <span class="p">})</span>

  <span class="nx">context</span><span class="p">(</span><span class="dl">"</span><span class="s2">to Italian</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">})</span>

  <span class="nx">context</span><span class="p">(</span><span class="dl">"</span><span class="s2">to Japanese</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">li</span><span class="dl">"</span><span class="p">).</span><span class="nx">contains</span><span class="p">(</span><span class="dl">"</span><span class="s2">日本語</span><span class="dl">"</span><span class="p">).</span><span class="nx">click</span><span class="p">()</span>
    <span class="p">})</span>

    <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">displays Japanese</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">cy</span><span class="p">.</span><span class="nx">title</span><span class="p">().</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">eq</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Elmにおける多言語化</span><span class="dl">"</span><span class="p">)</span>
      <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">h1</span><span class="dl">"</span><span class="p">).</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">contain</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">CSSで垂直センタリングは簡単だよ！</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div> <p>The test for changing the language to English, though, will be slightly more involved, since we have to change the application language to be non-English before the test runs.</p> <p>The Elm application attempts to set the initial language by first checking <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"><code class="language-plaintext highlighter-rouge">localStorage</code></a> for a specific key/value pair. Since Cypress tests are run in a browser, we have direct access to <code class="language-plaintext highlighter-rouge">localStorage</code>, as well as other browser-related functionality.</p> <p>We can leverage that, and the Cypress <code class="language-plaintext highlighter-rouge">before()</code> <a href="https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Hooks">hook</a>, to make sure we can set the initial language within a nested test, even before the top level <code class="language-plaintext highlighter-rouge">beforeEach()</code> hook visits the application URL:</p> <p><strong><code class="language-plaintext highlighter-rouge">cypress/integration/changing_language.spec.js</code></strong></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">Changing language</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">p</span><span class="dl">"</span><span class="p">).</span><span class="nx">click</span><span class="p">()</span>
  <span class="p">})</span>

  <span class="nx">context</span><span class="p">(</span><span class="dl">"</span><span class="s2">to Italian</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">})</span>
  <span class="nx">context</span><span class="p">(</span><span class="dl">"</span><span class="s2">to Japanese</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">})</span>

  <span class="nx">context</span><span class="p">(</span><span class="dl">"</span><span class="s2">to English</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">before</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// Start in a non-English language.</span>
      <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">elm-i18n-example-language</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">ja</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">})</span>

    <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">li</span><span class="dl">"</span><span class="p">).</span><span class="nx">contains</span><span class="p">(</span><span class="dl">"</span><span class="s2">English</span><span class="dl">"</span><span class="p">).</span><span class="nx">click</span><span class="p">()</span>
    <span class="p">})</span>

    <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">displays English</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">cy</span><span class="p">.</span><span class="nx">title</span><span class="p">().</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">eq</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Multilingualisation in Elm</span><span class="dl">"</span><span class="p">)</span>
      <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">h1</span><span class="dl">"</span><span class="p">).</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">contain</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Vertically centering things in css is easy!</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div> <p>Okay, that’s our test suite for the use case done! Let’s run the tests!</p> <figure> <img src="/assets/images/2021-10-06/change-language-all-cypress.gif" alt="Changing languages passing test suite in Cypress"/> </figure> <p>Looks like they all pass, which is good, but looking at the test code, it does seem to look quite repetitive…</p> <p>It might be nice to clean them up by extracting out the logic involved to perform core testing actions, and explicitly giving those extractions names, like “click language menu” or “displays Japanese” etc.</p> <h2 id="custom-commands">Custom Commands</h2> <div class="centered-image" style="width: 90%;"> <figure> <img src="/assets/images/2021-10-06/van-gogh-wheatfield-with-cypresses-early-september-1889.jpg" alt="A Wheatfield with Cypresses, Vincent Van Gogh, Early September 1889"/> <figcaption> "A Wheatfield with Cypresses", Vincent Van Gogh, Early September 1889 </figcaption> </figure> </div> <p>Using <a href="https://docs.cypress.io/api/cypress-api/custom-commands">Custom Commands</a>, we can define our own methods to use in the same way that Cypress uses its own API. When we set up Cypress, it provided us a file to put them in, so let’s fill it up with some methods to clean up the tests!</p> <p>We will start with some commands that wrap around logic related to the language menu:</p> <p><strong><code class="language-plaintext highlighter-rouge">cypress/support/commands.js</code></strong></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Cypress</span><span class="p">.</span><span class="nx">Commands</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">clickLanguageMenu</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">p</span><span class="dl">"</span><span class="p">).</span><span class="nx">click</span><span class="p">()</span>
<span class="p">})</span>

<span class="nx">Cypress</span><span class="p">.</span><span class="nx">Commands</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">clickEnglish</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">clickMenuLabel</span><span class="p">(</span><span class="dl">"</span><span class="s2">English</span><span class="dl">"</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">Cypress</span><span class="p">.</span><span class="nx">Commands</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">clickItalian</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">clickMenuLabel</span><span class="p">(</span><span class="dl">"</span><span class="s2">Italiano</span><span class="dl">"</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">Cypress</span><span class="p">.</span><span class="nx">Commands</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">clickJapanese</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">clickMenuLabel</span><span class="p">(</span><span class="dl">"</span><span class="s2">日本語</span><span class="dl">"</span><span class="p">)</span>
<span class="p">})</span>

<span class="kd">function</span> <span class="nx">clickMenuLabel</span><span class="p">(</span><span class="nx">label</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">li</span><span class="dl">"</span><span class="p">).</span><span class="nx">contains</span><span class="p">(</span><span class="nx">label</span><span class="p">).</span><span class="nx">click</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div> <p>The first argument in each of the commands is the name of the command that will become available to us in the tests, so let’s see how that looks:</p> <p><strong><code class="language-plaintext highlighter-rouge">cypress/integration/changing_language.spec.js</code></strong></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">Changing language</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">clickLanguageMenu</span><span class="p">()</span>
  <span class="p">})</span>

  <span class="nx">context</span><span class="p">(</span><span class="dl">"</span><span class="s2">to Italian</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">cy</span><span class="p">.</span><span class="nx">clickItalian</span><span class="p">()</span>
    <span class="p">})</span>

    <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">displays Italian</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">cy</span><span class="p">.</span><span class="nx">title</span><span class="p">().</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">eq</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Multilingualizzazione in Elm</span><span class="dl">"</span><span class="p">)</span>
      <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">h1</span><span class="dl">"</span><span class="p">).</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">contain</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Centrare verticalmente con css è facile!</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">})</span>

  <span class="c1">// ...</span>
<span class="p">})</span>
</code></pre></div></div> <p>This looks okay for a first refactor, so let’s go ahead and add some other commands to deal with language display, and, while we are at it, language storage:</p> <p><strong><code class="language-plaintext highlighter-rouge">cypress/support/commands.js</code></strong></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>

<span class="nx">Cypress</span><span class="p">.</span><span class="nx">Commands</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">displaysEnglish</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">title</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Multilingualisation in Elm</span><span class="dl">"</span>
  <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Vertically centering things in css is easy!</span><span class="dl">"</span>
  <span class="nx">displays</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">Cypress</span><span class="p">.</span><span class="nx">Commands</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">displaysItalian</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">title</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Multilingualizzazione in Elm</span><span class="dl">"</span>
  <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Centrare verticalmente con css è facile!</span><span class="dl">"</span>
  <span class="nx">displays</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">Cypress</span><span class="p">.</span><span class="nx">Commands</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">displaysJapanese</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">title</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Elmにおける多言語化</span><span class="dl">"</span>
  <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">CSSで垂直センタリングは簡単だよ！</span><span class="dl">"</span>
  <span class="nx">displays</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span>
<span class="p">})</span>

<span class="kd">function</span> <span class="nx">displays</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">cy</span><span class="p">.</span><span class="nx">title</span><span class="p">().</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">eq</span><span class="dl">"</span><span class="p">,</span> <span class="nx">title</span><span class="p">)</span>
  <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">h1</span><span class="dl">"</span><span class="p">).</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">contain</span><span class="dl">"</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">Cypress</span><span class="p">.</span><span class="nx">Commands</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">storeLanguage</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">language</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">elm-i18n-example-language</span><span class="dl">"</span><span class="p">,</span> <span class="nx">language</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div> <p>Back in the test file, here is an example of how we can use these commands, inside the test that changes the language to English:</p> <p><strong><code class="language-plaintext highlighter-rouge">cypress/integration/changing_language.spec.js</code></strong></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">Changing language</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">clickLanguageMenu</span><span class="p">()</span>
  <span class="p">})</span>

  <span class="c1">// ...</span>

  <span class="nx">context</span><span class="p">(</span><span class="dl">"</span><span class="s2">to English</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">before</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// Start in a non-English language.</span>
      <span class="nx">cy</span><span class="p">.</span><span class="nx">storeLanguage</span><span class="p">(</span><span class="dl">"</span><span class="s2">ja</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">})</span>

    <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">cy</span><span class="p">.</span><span class="nx">clickEnglish</span><span class="p">()</span>
    <span class="p">})</span>

    <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">displays English</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">cy</span><span class="p">.</span><span class="nx">displaysEnglish</span><span class="p">()</span>
    <span class="p">})</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div> <p>Not bad…for tests that only need to deal with the Elm application. But, the aim is to be lazy and re-use these tests for the Elixir application as well!</p> <p>The Phoenix server runs by default on port <code class="language-plaintext highlighter-rouge">4000</code>, rather than <code class="language-plaintext highlighter-rouge">3000</code>, and it is application-specific information like this that we will need to dynamically inject into the tests in order to enable maximum laziness.</p> <p>It would be handy to define this kind of information somewhere outside the test suite, where it can be referenced when needed. Luckily, Cypress has just the place for it.</p> <h2 id="cypress-environment-variables">Cypress Environment Variables</h2> <p>Cypress offers a few different options to define <a href="https://docs.cypress.io/guides/guides/environment-variables">environment variables</a>.</p> <p>The one we will use is defining an application root-level <a href="https://docs.cypress.io/guides/guides/environment-variables#Option-2-cypress-env-json"><code class="language-plaintext highlighter-rouge">cypress.env.json</code></a> file, which will contain static information about each application, as well as the language codes common across both applications:</p> <p><strong><code class="language-plaintext highlighter-rouge">cypress.env.json</code></strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"ENGLISH_LANGUAGE"</span><span class="p">:</span><span class="w"> </span><span class="s2">"en"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ITALIAN_LANGUAGE"</span><span class="p">:</span><span class="w"> </span><span class="s2">"it"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"JAPANESE_LANGUAGE"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ja"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"APPLICATIONS"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"elm-i18n-example"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:3000"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"storageKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"elm-i18n-example-language"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"phx_i18n_example"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:4000"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"storageKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"phxi18nexamplelanguage"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>As well as the <code class="language-plaintext highlighter-rouge">url</code> and <code class="language-plaintext highlighter-rouge">storageKey</code> for each application, we have added an application <code class="language-plaintext highlighter-rouge">name</code> identifier, as there are some test commands that will need to know which application is currently under test in order to correctly perform some action.</p> <p>Variables defined in <code class="language-plaintext highlighter-rouge">cypress.env.json</code> can be accessed via <a href="https://docs.cypress.io/api/cypress-api/env"><code class="language-plaintext highlighter-rouge">Cypress.env</code></a>, so let’s see how the changing language test file we have been working on changes in order to accommodate multiple applications:</p> <p><strong><code class="language-plaintext highlighter-rouge">cypress/integration/changing_language.spec.js</code></strong></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">APPLICATIONS</span><span class="p">,</span> <span class="nx">JAPANESE_LANGUAGE</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Cypress</span><span class="p">.</span><span class="nx">env</span><span class="p">()</span>

<span class="nx">APPLICATIONS</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(({</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">url</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">describe</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">: changing language`</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">cy</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
      <span class="nx">cy</span><span class="p">.</span><span class="nx">clickLanguageMenu</span><span class="p">()</span>
    <span class="p">})</span>

    <span class="nx">context</span><span class="p">(</span><span class="dl">"</span><span class="s2">to Italian</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">cy</span><span class="p">.</span><span class="nx">clickItalian</span><span class="p">()</span>
      <span class="p">})</span>

      <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">displays Italian</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">cy</span><span class="p">.</span><span class="nx">displaysItalian</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
      <span class="p">})</span>
    <span class="p">})</span>

    <span class="nx">context</span><span class="p">(</span><span class="dl">"</span><span class="s2">to Japanese</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">cy</span><span class="p">.</span><span class="nx">clickJapanese</span><span class="p">()</span>
      <span class="p">})</span>

      <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">displays Japanese</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">cy</span><span class="p">.</span><span class="nx">displaysJapanese</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
      <span class="p">})</span>
    <span class="p">})</span>

    <span class="nx">context</span><span class="p">(</span><span class="dl">"</span><span class="s2">to English</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">before</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// Start in a non-English language.</span>
        <span class="nx">cy</span><span class="p">.</span><span class="nx">storeLanguage</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">JAPANESE_LANGUAGE</span><span class="p">)</span>
      <span class="p">})</span>

      <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">cy</span><span class="p">.</span><span class="nx">clickEnglish</span><span class="p">()</span>
      <span class="p">})</span>

      <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">displays English</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">cy</span><span class="p">.</span><span class="nx">displaysEnglish</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
      <span class="p">})</span>
    <span class="p">})</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div> <p>And, we now have a passing set of tests that cover both applications!</p> <figure> <img src="/assets/images/2021-10-06/change-language-all-apps-cypress.gif" alt="Changing languages passing test suite in Cypress for both apps"/> </figure> <p>Note how the address in the browser changes from the Elm application on port <code class="language-plaintext highlighter-rouge">3000</code>, to the Phoenix application on port <code class="language-plaintext highlighter-rouge">4000</code>.</p> <p>While we did not need to make any changes regarding the way that the language menu and language options are clicked between the applications, there are slight differences in how each application displays messages for a language, and how it remembers a language choice.</p> <p>As mentioned above, this has resulted in the need for some custom commands to accept the <code class="language-plaintext highlighter-rouge">name</code> parameter from the config, so let’s see how it is being used.</p> <h2 id="application-dependent-commands">Application-Dependent Commands</h2> <p>First up are the “displays language” set of commands. They have all changed in the same way, so we will just have a look at <code class="language-plaintext highlighter-rouge">displaysEnglish</code> as an example (check the application codebase for details of the other commands):</p> <p><strong><code class="language-plaintext highlighter-rouge">cypress/support/commands.js</code></strong></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[{</span> <span class="na">name</span><span class="p">:</span> <span class="nx">ELM_APP_NAME</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">Cypress</span><span class="p">.</span><span class="nx">env</span><span class="p">(</span><span class="dl">"</span><span class="s2">APPLICATIONS</span><span class="dl">"</span><span class="p">)</span>

<span class="nx">Cypress</span><span class="p">.</span><span class="nx">Commands</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">displaysEnglish</span><span class="dl">"</span><span class="p">,</span> <span class="nx">appName</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">title</span> <span class="o">=</span>
    <span class="nx">appName</span> <span class="o">===</span> <span class="nx">ELM_APP_NAME</span>
      <span class="p">?</span> <span class="dl">"</span><span class="s2">Multilingualisation in Elm</span><span class="dl">"</span>
      <span class="p">:</span> <span class="dl">"</span><span class="s2">Multilingualisation in Phoenix</span><span class="dl">"</span>
  <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Vertically centering things in css is easy!</span><span class="dl">"</span>
  <span class="nx">displays</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span>
<span class="p">})</span>

<span class="c1">// ...</span>
</code></pre></div></div> <p>The only display difference between the two applications is the page title content, so we do a simple <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">ternary expression</a> to decide which title to use.</p> <p>How about storing the language for future reference? Although I used <code class="language-plaintext highlighter-rouge">localStorage</code> for the Elm application, I opted to instead use <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies">cookies</a> in the Phoenix application, so that I could keep as much logic as possible in Elixir, and not have to write any Javascript in <a href="https://hexdocs.pm/phoenix_live_view/js-interop.html#client-hooks">LiveView Hooks</a>.</p> <p>Cypress has an easy-to-use <a href="https://docs.cypress.io/api/commands/setcookie"><code class="language-plaintext highlighter-rouge">setCookie</code></a> API, and so adapting the <code class="language-plaintext highlighter-rouge">storeLanguage</code> custom command to handle the Phoenix application was very straightforward:</p> <p><strong><code class="language-plaintext highlighter-rouge">cypress/support/commands.js</code></strong></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="nx">ELM_APP_NAME</span><span class="p">,</span> <span class="na">storageKey</span><span class="p">:</span> <span class="nx">ELM_STORAGE_KEY</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">storageKey</span><span class="p">:</span> <span class="nx">PHX_STORAGE_KEY</span> <span class="p">}</span>
<span class="p">]</span> <span class="o">=</span> <span class="nx">Cypress</span><span class="p">.</span><span class="nx">env</span><span class="p">(</span><span class="dl">"</span><span class="s2">APPLICATIONS</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">// ...</span>

<span class="nx">Cypress</span><span class="p">.</span><span class="nx">Commands</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">storeLanguage</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">appName</span><span class="p">,</span> <span class="nx">language</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">appName</span> <span class="o">===</span> <span class="nx">ELM_APP_NAME</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="nx">ELM_STORAGE_KEY</span><span class="p">,</span> <span class="nx">language</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">setCookie</span><span class="p">(</span><span class="nx">PHX_STORAGE_KEY</span><span class="p">,</span> <span class="nx">language</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div> <p>I did end up doing some further refactoring of the commands, like splitting them out into different files by functionality, and extracting static string values into their own file. If you are interested in those changes, see the <a href="https://github.com/paulfioravanti/cypress-i18n-example/tree/main/cypress/support"><code class="language-plaintext highlighter-rouge">support</code> directory</a> of the <a href="https://github.com/paulfioravanti/cypress-i18n-example">Cypress I18n Example</a> application.</p> <h2 id="all-green">All Green</h2> <p>Most of the other tests in the suite are quite similar in format to <code class="language-plaintext highlighter-rouge">changing_language.spec.js</code>, and build off of functionality that we have already seen. So, I will leave it to any interested parties to have a look at the rest of the test suite in detail.</p> <p>Suffice to say, that all the tests do pass, and you should be able to see below a test for every feature described in the use case set towards the top of this post:</p> <div> <figure> <img src="/assets/images/2021-10-06/full-test-suite-all-apps-cypress.gif" alt="Full passing test suite in Cypress for both apps"/> </figure> </div> <p>There is one <a href="https://www.merriam-webster.com/dictionary/gotcha">gotcha</a>, though, that is worth bringing up: the applications would seem to sometimes inexplicably fail to register clicks on the language menu when the suite ran at full speed. This resulted in tests randomly failing, and much frustration and confusion on my part.</p> <p>Trawling through the <a href="https://github.com/cypress-io/cypress">Cypress GitHub repository</a> surfaced <a href="https://github.com/cypress-io/cypress/issues/1847">this issue</a>, seemingly indicating that there was a time where clicks were not being registered properly due to <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event"><code class="language-plaintext highlighter-rouge">mouseover</code> events</a> not being fired. <a href="https://github.com/cypress-io/cypress/issues/1847#issuecomment-447996153">The workaround</a> was to manually fire the event before clicking using <code class="language-plaintext highlighter-rouge">.trigger("mouseover").click()</code>.</p> <p><a href="https://github.com/cypress-io/cypress/pull/3030">This pull request</a> introduced automatic firing of <code class="language-plaintext highlighter-rouge">mouseover</code> events for clicks, but only for clickable input tags like <code class="language-plaintext highlighter-rouge">&lt;button&gt;</code>s. The language menu in our application is a <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code> tag, so it does not benefit from auto-firing <code class="language-plaintext highlighter-rouge">mouseover</code> events, but manually adding that to the <code class="language-plaintext highlighter-rouge">clickLanguageMenu</code> command fixed the issue (and gave me a new rule-of-thumb for clicking elements in Cypress):</p> <p><strong><code class="language-plaintext highlighter-rouge">cypress/support/commands.js</code></strong></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Cypress</span><span class="p">.</span><span class="nx">Commands</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">clickLanguageMenu</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">p</span><span class="dl">"</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="dl">"</span><span class="s2">mouseover</span><span class="dl">"</span><span class="p">).</span><span class="nx">click</span><span class="p">()</span>
<span class="p">})</span>
</code></pre></div></div> <h2 id="cypress-vs-phoenix-tests-vs-elm-tests">Cypress vs Phoenix Tests vs Elm Tests</h2> <div class="centered-image" style="width: 90%;"> <figure> <img src="/assets/images/2021-10-06/van-gogh-wheatfield-with-cypresses-late-september-1889.jpg" alt="A Wheatfield with Cypresses, Vincent Van Gogh, Late September 1889"/> <figcaption> "A Wheatfield with Cypresses", Vincent Van Gogh, Late September 1889 </figcaption> </figure> </div> <p>Remember when I said that the reason for creating the Cypress test suite was that “I am too lazy to write a separate test suite in each application’s language”?</p> <p>Well, writing this blog post ended up baiting me into writing them anyway.</p> <p>I wanted to see how much of the Cypress tests I could actually replicate in the respective application languages. You can find the tests in their Github repositories:</p> <ul> <li><a href="https://github.com/paulfioravanti/phx_i18n_example/tree/master/test/phx_i18n_example_web/integration">Phoenix LiveView integration tests</a></li> <li><a href="https://github.com/paulfioravanti/elm-i18n-example/tree/master/tests">Elm integration tests</a></li> </ul> <p>So, how do each of these test suites fare? Let’s take a look at each language’s equivalent of the “displays English” test from <code class="language-plaintext highlighter-rouge">changing_language.spec.js</code> and do a bit of compare and contrast.</p> <h3 id="phoenix-liveview-tests">Phoenix LiveView Tests</h3> <p>Since the Phoenix application uses <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html">LiveView</a>, which “enables rich, real-time user experiences with server-rendered HTML”, we leverage the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html"><code class="language-plaintext highlighter-rouge">Phoenix.LiveViewTest</code></a> module to create our tests.</p> <p>Unlike Cypress, Phoenix tests are not run in a browser (<a href="https://github.com/elixir-wallaby/wallaby">Wallaby</a> is the tool for that in Elixir-land). Rather, we start off with a socket connection (<code class="language-plaintext highlighter-rouge">conn</code>, a <a href="https://hexdocs.pm/plug/Plug.Conn.html"><code class="language-plaintext highlighter-rouge">Plug.Conn</code></a>), and use <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#live/2"><code class="language-plaintext highlighter-rouge">live/2</code></a> to spawn a stateful LiveView process (<code class="language-plaintext highlighter-rouge">view</code>), that we can then interact with like we would a web page:</p> <p><strong><code class="language-plaintext highlighter-rouge">test/phx_i18n_example_web/integration/changing_language_test.exs</code></strong></p> <div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">PhxI18nExampleWeb</span><span class="o">.</span><span class="no">ChangingLanguageTest</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">PhxI18nExampleWeb</span><span class="o">.</span><span class="no">ConnCase</span>
  <span class="kn">import</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">ConnTest</span>
  <span class="kn">import</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveViewTest</span>

  <span class="n">setup</span> <span class="p">%{</span><span class="ss">conn:</span> <span class="n">conn</span><span class="p">,</span> <span class="ss">language:</span> <span class="n">language</span><span class="p">,</span> <span class="ss">cookie:</span> <span class="n">cookie</span><span class="p">}</span> <span class="k">do</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">view</span><span class="p">,</span> <span class="n">_html</span><span class="p">}</span> <span class="o">=</span>
      <span class="n">conn</span>
      <span class="o">|&gt;</span> <span class="n">put_req_cookie</span><span class="p">(</span><span class="s2">"phxi18nexamplelanguage"</span><span class="p">,</span> <span class="n">cookie</span><span class="p">)</span>
      <span class="o">|&gt;</span> <span class="n">live</span><span class="p">(</span><span class="s2">"/"</span><span class="p">)</span>

    <span class="n">view</span>
    <span class="o">|&gt;</span> <span class="n">element</span><span class="p">(</span><span class="s2">"p"</span><span class="p">)</span>
    <span class="o">|&gt;</span> <span class="n">render_click</span><span class="p">()</span>

    <span class="n">view</span>
    <span class="o">|&gt;</span> <span class="n">element</span><span class="p">(</span><span class="s2">"li"</span><span class="p">,</span> <span class="n">language</span><span class="p">)</span>
    <span class="o">|&gt;</span> <span class="n">render_click</span><span class="p">()</span>

    <span class="n">heading</span> <span class="o">=</span>
      <span class="n">view</span>
      <span class="o">|&gt;</span> <span class="n">element</span><span class="p">(</span><span class="s2">"h1"</span><span class="p">)</span>
      <span class="o">|&gt;</span> <span class="n">render</span><span class="p">()</span>

    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">[</span><span class="ss">heading:</span> <span class="n">heading</span><span class="p">,</span> <span class="ss">title:</span> <span class="n">page_title</span><span class="p">(</span><span class="n">view</span><span class="p">)]}</span>
  <span class="k">end</span>

  <span class="c1"># ...</span>

  <span class="nv">@tag</span> <span class="ss">cookie:</span> <span class="s2">"ja"</span>
  <span class="nv">@tag</span> <span class="ss">language:</span> <span class="s2">"English"</span>
  <span class="n">test</span> <span class="s2">"displays English when language changed to English"</span><span class="p">,</span>
       <span class="p">%{</span><span class="ss">heading:</span> <span class="n">heading</span><span class="p">,</span> <span class="ss">title:</span> <span class="n">title</span><span class="p">}</span> <span class="k">do</span>
    <span class="n">assert</span> <span class="n">heading</span> <span class="o">=~</span> <span class="s2">"Vertically centering things in css is easy!"</span>
    <span class="n">assert</span> <span class="n">title</span> <span class="o">==</span> <span class="s2">"Multilingualisation in Phoenix"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div> <p>Since we are not working with a browser, we have to inject the language cookie value directly into the raw connection, using <a href="https://hexdocs.pm/plug/Plug.Test.html#put_req_cookie/3"><code class="language-plaintext highlighter-rouge">put_req_cookie/3</code></a>, in order to change the LiveView’s <code class="language-plaintext highlighter-rouge">language</code> (passed up to <code class="language-plaintext highlighter-rouge">setup</code> from the <code class="language-plaintext highlighter-rouge">@tag</code> attribute on the test) to English.</p> <p>From there, we perform <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#render_click/1"><code class="language-plaintext highlighter-rouge">render_click/1</code></a> actions to open the language dropdown menu, select a language, and then extract the LiveView page title and heading to send into the test itself.</p> <p>For testing LiveViews in isolation, I think these kinds of tests are absolutely fine. However, where I think Cypress does get an upper hand in this use case, and some others in the application, is, as you may expect, related to its tests being run in a browser:</p> <ul> <li>No manual injection of cookies are needed into the application; Cypress can set cookie values directly in the browser, which the application can then read in and use</li> <li>Once the language is set, Cypress is able to <a href="https://docs.cypress.io/api/commands/reload"><code class="language-plaintext highlighter-rouge">cy.reload()</code></a> the browser to confirm that the new language is set in the cookies (check the Github repo for that test), but doing something like checking whether a cookie value has been changed in a <code class="language-plaintext highlighter-rouge">conn</code> is not feasible, and LiveViews cannot be “reloaded”</li> </ul> <h3 id="elm-tests">Elm Tests</h3> <p><a href="https://guide.elm-lang.org/architecture/">The Elm Architecture</a> (TEA) breaks Elm applications up into three parts:</p> <ul> <li>Model — the state of your application</li> <li>View — a way to turn your state into HTML</li> <li>Update — a way to update your state based on messages</li> </ul> <p>When attempting to write an “integration test” in Elm, you are able to initialise a model and pass it into a view to render.</p> <p>However, unlike a LiveView, it is not possible to trigger multiple events on a view (eg click language dropdown, <em>and then</em> select a language) that then updates the state of a model, or the view itself, so that assertions can be made on it.</p> <p>It is not even possible to do this for a single event: the only assertions we can make based off of an event being triggered are <em>that</em> a certain type of message gets generated.</p> <p>For example, in the test below we:</p> <ul> <li>Initialise a model using <code class="language-plaintext highlighter-rouge">Main.init</code></li> <li>Change the model values to indicate that the language menu should be open (<code class="language-plaintext highlighter-rouge">showAvailableLanguages = True</code>), and that the current language is Italian ( the <code class="language-plaintext highlighter-rouge">Translations.It</code> type)</li> <li>Render the model in the view and find <code class="language-plaintext highlighter-rouge">"English"</code> from the language dropdown menu</li> <li><a href="https://package.elm-lang.org/packages/elm-explorations/test/latest/Test-Html-Event#simulate"><code class="language-plaintext highlighter-rouge">Event.Simulate</code></a> a <code class="language-plaintext highlighter-rouge">click</code></li> <li>Assert that a <code class="language-plaintext highlighter-rouge">Msg.ChangeLanguage Translations.En</code> message gets generated</li> </ul> <p><strong><code class="language-plaintext highlighter-rouge">tests/ChangingLanguageTest.elm</code></strong></p> <div class="language-elm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="kt">ChangingLanguageTest</span> <span class="k">exposing</span> <span class="p">(</span><span class="n">all</span><span class="p">)</span>

<span class="k">import</span> <span class="kt">Html</span> <span class="k">exposing</span> <span class="p">(</span><span class="kt">Html</span><span class="p">)</span>
<span class="k">import</span> <span class="kt">Json</span><span class="o">.</span><span class="kt">Encode</span> <span class="k">exposing</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span>
<span class="k">import</span> <span class="kt">Main</span>
<span class="k">import</span> <span class="kt">Model</span> <span class="k">exposing</span> <span class="p">(</span><span class="kt">Model</span><span class="p">)</span>
<span class="k">import</span> <span class="kt">Msg</span> <span class="k">exposing</span> <span class="p">(</span><span class="kt">Msg</span><span class="p">)</span>
<span class="k">import</span> <span class="kt">Test</span> <span class="k">exposing</span> <span class="p">(</span><span class="kt">Test</span><span class="o">,</span> <span class="n">describe</span><span class="o">,</span> <span class="n">test</span><span class="p">)</span>
<span class="k">import</span> <span class="kt">Test</span><span class="o">.</span><span class="kt">Html</span><span class="o">.</span><span class="kt">Event</span> <span class="k">as</span> <span class="kt">Event</span> <span class="k">exposing</span> <span class="p">(</span><span class="n">click</span><span class="p">)</span>
<span class="k">import</span> <span class="kt">Test</span><span class="o">.</span><span class="kt">Html</span><span class="o">.</span><span class="kt">Query</span> <span class="k">as</span> <span class="kt">Query</span>
<span class="k">import</span> <span class="kt">Test</span><span class="o">.</span><span class="kt">Html</span><span class="o">.</span><span class="kt">Selector</span> <span class="k">exposing</span> <span class="p">(</span><span class="n">containing</span><span class="o">,</span> <span class="n">tag</span><span class="o">,</span> <span class="n">text</span><span class="p">)</span>
<span class="k">import</span> <span class="kt">Translations</span>
<span class="k">import</span> <span class="kt">View</span>


<span class="n">all</span> <span class="p">:</span> <span class="kt">Test</span>
<span class="n">all</span> <span class="o">=</span>
    <span class="k">let</span>
        <span class="p">(</span> <span class="n">model</span><span class="o">,</span> <span class="n">_</span> <span class="p">)</span> <span class="o">=</span>
            <span class="kt">Main</span><span class="o">.</span><span class="n">init</span> <span class="p">{</span> <span class="n">language</span> <span class="o">=</span> <span class="n">null</span> <span class="p">}</span>
    <span class="k">in</span>
    <span class="n">describe</span> <span class="s">"</span><span class="s2">Changing language"</span>
        <span class="p">[</span> <span class="c1">-- ...</span>
        <span class="o">,</span> <span class="n">changeLanguageToEnglishTest</span> <span class="n">model</span>
        <span class="p">]</span>


<span class="c1">-- ...</span>


<span class="n">changeLanguageToEnglishTest</span> <span class="p">:</span> <span class="kt">Model</span> <span class="o">-&gt;</span> <span class="kt">Test</span>
<span class="n">changeLanguageToEnglishTest</span> <span class="n">model</span> <span class="o">=</span>
    <span class="k">let</span>
        <span class="n">initModel</span> <span class="p">:</span> <span class="kt">Model</span>
        <span class="n">initModel</span> <span class="o">=</span>
            <span class="p">{</span> <span class="n">model</span>
                <span class="o">|</span> <span class="n">showAvailableLanguages</span> <span class="o">=</span> <span class="kt">True</span>
                <span class="o">,</span> <span class="n">currentLanguage</span> <span class="o">=</span> <span class="kt">Translations</span><span class="o">.</span><span class="kt">It</span>
            <span class="p">}</span>

        <span class="n">html</span> <span class="p">:</span> <span class="kt">Html</span> <span class="kt">Msg</span>
        <span class="n">html</span> <span class="o">=</span>
            <span class="n">initModel</span>
                <span class="o">|&gt;</span> <span class="kt">View</span><span class="o">.</span><span class="n">view</span>
                <span class="o">|&gt;</span> <span class="o">.</span><span class="n">body</span>
                <span class="o">|&gt;</span> <span class="kt">List</span><span class="o">.</span><span class="n">head</span>
                <span class="o">|&gt;</span> <span class="kt">Maybe</span><span class="o">.</span><span class="n">withDefault</span> <span class="p">(</span><span class="kt">Html</span><span class="o">.</span><span class="n">text</span> <span class="s">"</span><span class="s2">"</span><span class="p">)</span>
    <span class="k">in</span>
    <span class="n">describe</span> <span class="s">"</span><span class="s2">changing the language to English"</span>
        <span class="p">[</span> <span class="n">test</span> <span class="s">"</span><span class="s2">sends a message to change the language to English"</span> <span class="o">&lt;|</span>
            <span class="o">\</span><span class="p">()</span> <span class="o">-&gt;</span>
                <span class="n">html</span>
                    <span class="o">|&gt;</span> <span class="kt">Query</span><span class="o">.</span><span class="n">fromHtml</span>
                    <span class="o">|&gt;</span> <span class="kt">Query</span><span class="o">.</span><span class="n">find</span> <span class="p">[</span> <span class="n">tag</span> <span class="s">"</span><span class="s2">li"</span><span class="o">,</span> <span class="n">containing</span> <span class="p">[</span> <span class="n">text</span> <span class="s">"</span><span class="s2">English"</span> <span class="p">]</span> <span class="p">]</span>
                    <span class="o">|&gt;</span> <span class="kt">Event</span><span class="o">.</span><span class="n">simulate</span> <span class="n">click</span>
                    <span class="o">|&gt;</span> <span class="kt">Event</span><span class="o">.</span><span class="n">expect</span> <span class="p">(</span><span class="kt">Msg</span><span class="o">.</span><span class="kt">ChangeLanguage</span> <span class="kt">Translations</span><span class="o">.</span><span class="kt">En</span><span class="p">)</span>
        <span class="p">]</span>
</code></pre></div></div> <p>From here, if we want to find out what should happen when Elm receives a <code class="language-plaintext highlighter-rouge">Msg.ChangeLanguage Translations.En</code> message, we need to write a specific Update-focused test which:</p> <ul> <li>Initialises a model with its language setting as English (<code class="language-plaintext highlighter-rouge">Translations.En</code>)</li> <li>Initialises a <code class="language-plaintext highlighter-rouge">Msg.ChangeLanguage Translations.It</code> message</li> <li>Passes the model and message into the Update function</li> <li>Asserts that the language in the model has changed from Italian to English</li> </ul> <p><strong><code class="language-plaintext highlighter-rouge">tests/UpdateTest.elm</code></strong></p> <div class="language-elm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="kt">UpdateTest</span> <span class="k">exposing</span> <span class="p">(</span><span class="n">all</span><span class="p">)</span>

<span class="k">import</span> <span class="kt">Expect</span>
<span class="k">import</span> <span class="kt">Model</span> <span class="k">exposing</span> <span class="p">(</span><span class="kt">Model</span><span class="p">)</span>
<span class="k">import</span> <span class="kt">Msg</span> <span class="k">exposing</span> <span class="p">(</span><span class="kt">Msg</span><span class="p">)</span>
<span class="k">import</span> <span class="kt">Test</span> <span class="k">exposing</span> <span class="p">(</span><span class="kt">Test</span><span class="o">,</span> <span class="n">describe</span><span class="o">,</span> <span class="n">test</span><span class="p">)</span>
<span class="k">import</span> <span class="kt">Translations</span>
<span class="k">import</span> <span class="kt">Update</span>


<span class="n">all</span> <span class="p">:</span> <span class="kt">Test</span>
<span class="n">all</span> <span class="o">=</span>
    <span class="n">describe</span> <span class="s">"</span><span class="s2">Update"</span>
        <span class="p">[</span> <span class="n">changeLanguageTest</span>
        <span class="o">,</span> <span class="c1">-- ...</span>
        <span class="p">]</span>


<span class="n">changeLanguageTest</span> <span class="p">:</span> <span class="kt">Test</span>
<span class="n">changeLanguageTest</span> <span class="o">=</span>
    <span class="k">let</span>
        <span class="n">msg</span> <span class="p">:</span> <span class="kt">Msg</span>
        <span class="n">msg</span> <span class="o">=</span>
            <span class="kt">Msg</span><span class="o">.</span><span class="kt">ChangeLanguage</span> <span class="kt">Translations</span><span class="o">.</span><span class="kt">It</span>

        <span class="n">model</span> <span class="p">:</span> <span class="kt">Model</span>
        <span class="n">model</span> <span class="o">=</span>
            <span class="kt">Model</span><span class="o">.</span><span class="n">init</span> <span class="kt">Translations</span><span class="o">.</span><span class="kt">En</span>

        <span class="p">(</span> <span class="n">actualModel</span><span class="o">,</span> <span class="n">_</span> <span class="p">)</span> <span class="o">=</span>
            <span class="kt">Update</span><span class="o">.</span><span class="n">update</span> <span class="n">msg</span> <span class="n">model</span>

        <span class="n">expectedModel</span> <span class="p">:</span> <span class="kt">Model</span>
        <span class="n">expectedModel</span> <span class="o">=</span>
            <span class="kt">Model</span><span class="o">.</span><span class="n">init</span> <span class="kt">Translations</span><span class="o">.</span><span class="kt">It</span>
    <span class="k">in</span>
    <span class="n">describe</span> <span class="s">"</span><span class="s2">Msg.ChangeLanguage"</span>
        <span class="p">[</span> <span class="n">test</span> <span class="s">"</span><span class="s2">updates the model to the specified language"</span> <span class="o">&lt;|</span>
            <span class="o">\</span><span class="p">()</span> <span class="o">-&gt;</span>
                <span class="kt">Expect</span><span class="o">.</span><span class="n">equal</span> <span class="n">expectedModel</span> <span class="n">actualModel</span>
        <span class="p">]</span>
</code></pre></div></div> <p>Similar to my opinions about the Elixir tests, I think these tests are totally fine for testing parts of an Elm application in isolation.</p> <p>There are some other Elm options to enable testing programs as more complete units, negating the need to divide up tests, like <a href="https://github.com/avh4/elm-program-test">elm-program-test</a> (does not drive a web browser), or <a href="https://github.com/justgook/elm-webdriver">Elm-WebDriver</a> (drives a web browser), so there are other options outside of Elm’s default testing paradigms.</p> <p>However, for similar reasons as the Elixir tests, I think there is a strong case for involving Cypress’ power and flexibility in the testing mix for Elm applications.</p> <h2 id="an-aside-testing-internationalisation">An Aside: Testing Internationalisation</h2> <p>The purpose of the Phoenix and Elm I18n example applications are just that: to be toy applications that provide example implementations of using internationalisation in those languages.</p> <p>Showing that text changes on a screen as a result of a language setting changing is their key functionality, and this is reflected in how the tests are written.</p> <p>For a real application containing many translated text entries in different locations in multiple languages, the string-based testing used in these test suites is not really feasible. The burden of having to update tests whenever translations are updated will get tiresome quickly; translations and tests are best being able to change independent of each other.</p> <p>Instead, it is much more helpful to have some kind of external tool that can run over your codebase and translation files to inform you on whether:</p> <ul> <li>you have any missing translations in certain languages</li> <li>you have translations for strings that are not referenced in the application anymore (ie they are obsolete)</li> </ul> <p>My favourite local developer tool I have used in the past to do this has actually been a <a href="https://www.ruby-lang.org/en/">Ruby</a> gem, <a href="https://glebm.github.io/i18n-tasks/">i18n-tasks</a>. If you do <a href="https://rubyonrails.org/">Ruby on Rails</a> development with internationalisation, definitely add it to your toolbox.</p> <p>There does not seem to be quite as robust a tool in the Phoenix or Elm ecosystems as of this writing, but there are other options available.</p> <p>For a Phoenix application, it would seem that you can “verify that your <a href="https://en.wikipedia.org/wiki/Gettext#Programming">POT files</a> are up to date with the current state of the codebase” with a <a href="https://hexdocs.pm/gettext/Mix.Tasks.Gettext.Extract.html#content"><code class="language-plaintext highlighter-rouge">mix gettext.extract</code></a> task:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mix gettext.extract <span class="nt">--check-up-to-date</span>
</code></pre></div></div> <blockquote> <p>This task is in the <a href="https://github.com/elixir-gettext/gettext/blob/becf0585b12762bddb6dd04a9f0a307c8768fa1a/lib/mix/tasks/gettext.extract.ex#L23">Elixir Gettext <code class="language-plaintext highlighter-rouge">master</code> branch</a> as of this writing, so by the time you read this, it may have been released on <a href="https://hex.pm/">Hex</a>.</p> </blockquote> <p>For Elm, the situation is a bit more complex (that I go into in much more detail in <em><a href="https://www.paulfioravanti.com/blog/runtime-language-switching-elm/">Runtime Language Switching in Elm</a></em>) but I would currently recommend <a href="https://github.com/ChristophP/elm-i18n-module-generator">Elm i18n Gen</a> to give some type safety to your translations.</p> <h2 id="paint-some-cypress-tests">Paint some Cypress tests</h2> <p>I have found writing and running integration tests with Cypress to be lots of fun, and think there is definitely a place for them alongside more unit-focused tests in your programming language of choice.</p> <p>The visual feedback Cypress can provide for high-value application workflows like account sign-up, or making a payment, make the tests something that can also be shared with non-technical areas of your team or business.</p> <p>If you have not used Cypress already, I would encourage you to give it a shot, and walk through your application in the shoes of your end users!</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="javascript"/><category term="mocha"/><category term="chai"/><category term="cypress"/><category term="elixir"/><category term="phoenix"/><category term="elm"/><category term="testing"/><category term="i18n"/><summary type="html"><![CDATA["I have a canvas of Cypress tests with apps of Elm, some Elixir, a browser like a preview of executed commands"]]></summary></entry><entry><title type="html">Plover For the Record</title><link href="https://www.paulfioravanti.com/blog/plover-for-the-record/" rel="alternate" type="text/html" title="Plover For the Record"/><published>2021-09-04T16:00:00+10:00</published><updated>2022-06-10T19:30:00+10:00</updated><id>https://www.paulfioravanti.com/blog/plover-for-the-record</id><content type="html" xml:base="https://www.paulfioravanti.com/blog/plover-for-the-record/"><![CDATA[<p>Dictation testing involving cross-examination of a witness by lawyers in a courtroom is known colloquially in the <a href="https://en.wikipedia.org/wiki/Court_reporter">court reporting</a> profession as “<a href="http://ilovesteno.com/2014/02/03/the-different-types-of-q-a/">Q&amp;A</a>” (Question and Answer).</p> <p>With <a href="http://www.openstenoproject.org/">Plover</a> open source <a href="https://en.wikipedia.org/wiki/Stenotype">stenography</a>, you can <a href="https://en.wikipedia.org/wiki/Cosplay">cosplay</a> as a court reporter, show off your ability to track the communication threads of multiple participants in a courtroom conversation, and present them in official-looking transcripts of testimony.</p> <p>So, put on your power suit and pack your briefcase, cause we’re going to go and act like we belong in the halls of justice!</p> <h3 id="caveat-lector"><em><a href="https://en.wikipedia.org/wiki/Caveat_emptor#Caveat_lector">Caveat Lector</a></em></h3> <p>I am not a lawyer, a court reporter, nor involved in the legal profession whatsoever. I am just a stenography enthusiast who learned about the concept of Q&amp;A while studying <a href="https://platinumsteno.com/">Platinum Steno</a>’s (PS) <a href="https://www.youtube.com/playlist?list=PL85Y9t9lANyArY9uTBE_kmy2cT_ECSHvU">video theory lessons</a> (more about that in my other blog post, <em><a href="https://www.paulfioravanti.com/blog/going-platinum/">Going Platinum</a></em>), and what is presented here is just my interpretation of what I discovered. Consequently, there is definitely a chance that I have gotten some things wrong, and if I have, please reach out via public comment below, or to me directly.</p> <p>Plover theory itself does not contain any <a href="https://sites.google.com/site/learnplover/glossary">outlines</a> related to Q&amp;A like the ones that would seem to be contained in PS’s custom software, and are taught in their <a href="https://www.youtube.com/watch?v=tEgaJ7hWIvg&amp;list=PL85Y9t9lANyArY9uTBE_kmy2cT_ECSHvU&amp;index=61">Q&amp;A lessons</a>. So, in order to actively engage in those lessons, I wondered if I could attempt to recreate PS’s Q&amp;A outline entries (including their formatting conventions and rules, which may be specific to them, and differ between courts in different hierarchies/states/jurisdictions/countries etc) in a custom dictionary that would work with Plover.</p> <p>I think I was able to, and have presented the result <em><a href="https://en.wikipedia.org/wiki/Pro_bono">pro bono publico</a></em> in the form of:</p> <p>:sparkles: <a href="https://github.com/paulfioravanti/steno_dictionaries/blob/main/dictionaries/q-and-a.json">My custom Q&amp;A dictionary</a> :sparkles:</p> <p>Feel free to incorporate it into your own Plover dictionaries and give the Q&amp;A lessons a shot, or just use it to follow along with the examples in this post!</p> <p>Armed with a dictionary to use, let’s learn how to use it, while getting an introduction to Q&amp;A itself!</p> <h2 id="ab-initio"><em><a href="https://en.wikipedia.org/wiki/Ab_initio">Ab Initio</a></em></h2> <p>There are, broadly, two different types of Q&amp;A testing:</p> <ul> <li><strong>2-Voice</strong>: an interrogative conversation between two participants: a lawyer and a witness. The lawyer can be either for the <a href="https://en.wikipedia.org/wiki/Plaintiff">plaintiff</a>/prosecution, or for the defense, but this detail is usually not relevant to the scope of the conversation.</li> <li><strong>4-Voice</strong>: a cross-examination involving lawyers from each opposing party, a witness, and the courtroom judge. Handling multiple lawyers in either party is possible, so it can technically be “4-to-6-Voice”, but there are typically only four participants.</li> </ul> <p>2-Voice transcripts typically read like a simple back-and-forth question and answer session, while 4-Voice builds on this by including added complexity like:</p> <ul> <li>marking a lawyer’s “ownership” of a line of questioning</li> <li>transcribing objections raised by lawyers, and subsequent guidance by the judge</li> <li>specific transcribing conventions for when interruptions occur during a lawyer’s line of questioning, causing it to veer off its original path, and then the subsequent “steering” of the record back to original line of questioning once the detour has ended</li> </ul> <p>We will start off with a deep dive into using Plover for 2-Voice, and then up ante with 4-Voice.</p> <h2 id="2-voice">2-Voice</h2> <div class="plover-for-the-record-image"> <figure> <img src="/assets/images/2021-09-04/phoenix-and-maya.jpg" alt="Phoenix Wright and Maya cosplay"/> <figcaption> Photo by <a href="https://www.deviantart.com/vivienovo"> VivianOVO </a> on <a href="https://www.deviantart.com/vivienovo/art/Ace-Attorney-Maya-Fey-347872629"> Deviant Art </a> </figcaption> </figure> </div> <p>During Q&amp;A, whenever someone starts speaking, you indicate this by “signing them in”, either by name, or marking them as the asker or answerer of a question.</p> <p>For 2-Voice, names are not important, and we only care about marking the question and its answer. Questioners and answerers are “signed in” using special outlines known as question and answer “banks”, which PS defines as follows:</p> <table class="steno-table"> <thead> <tr> <th>Stroke</th> <th class="centered-heading">Outline</th> <th class="centered-heading">Keymap</th> </tr> </thead> <tr> <td>Question Bank</td> <td class="steno-outline"> <span>STKPWHR</span> </td> <td class="steno-font"> <span>STKPWHR</span> </td> </tr> <tr> <td>Answer Bank</td> <td class="steno-outline"> <span>-FRPBLGTS</span> </td> <td class="steno-font"> <span>-FRPBLGTS</span> </td> </tr> </table> <p>These outlines, like nearly all Q&amp;A-related outlines, are not meant to be <a href="https://en.wikipedia.org/wiki/Phonetics">phonetic</a> (indicative of how the word sounds), nor <a href="https://en.wikipedia.org/wiki/Orthography">orthographic</a> (indicative of how the word is spelled). So, I find it easiest to remember their form, or pattern, kind of like <a href="https://en.wikipedia.org/wiki/Tetris">Tetris</a> blocks. Hence, I would wager the rectangular chunks here are meant to evoke an image of land masses along the side of the middle <code class="language-plaintext highlighter-rouge">*</code>-key river that divides them.</p> <p>Using these outlines, a simple question and answer could display as something like the following:</p> <p class="steno-transcript"> &nbsp;&nbsp;&nbsp;&nbsp;Q&nbsp;&nbsp;&nbsp;&nbsp;Where were you on the night of January 16?<br/> &nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;&nbsp;&nbsp;&nbsp;I was at home, practicing steno. </p> <p>This formatting obeys the following rules:</p> <ul> <li>Questions are marked with a simple “<span class="steno-transcript">Q</span>”, and answers with an “<span class="steno-transcript">A</span>” (no following colons or periods)</li> <li><span class="steno-transcript">Q</span> and <span class="steno-transcript">A</span> have a <a href="https://en.wikipedia.org/wiki/Tab_key">tab</a> character on either side of them</li> <li>Both questions and answers start with capital letters</li> </ul> <p>Court transcripts would seem to be written using a <span class="steno-transcript"><a href="https://en.wikipedia.org/wiki/Monospaced_font">monospaced font</a></span>, so we will adopt that convention as well, using the widely-available <span class="steno-transcript">Courier New</span> font.</p> <h3 id="ending-punctuation">Ending Punctuation</h3> <p>The one thing that is not apparent just by looking at the example above is the convention around a speaker’s <em>final sentence</em> punctuation before another speaker starts talking.</p> <p>Apparently, in Q&amp;A, the addition of an ending question mark (<span class="steno-transcript">?</span>) or period (<span class="steno-transcript">.</span>) to the <em>final sentence</em> spoken before the speaker changes is meant to be handled by the outline that signs in the next speaker.</p> <p>For example, when you switch from a question to an answer by stroking <code class="language-plaintext highlighter-rouge">-FRPBLGTS</code>, that outline is expected to:</p> <ul> <li>Finish the question with a “<span class="steno-transcript">?</span>”</li> <li>Perform a <a href="https://en.wikipedia.org/wiki/Newline">line break</a></li> <li>insert a tab</li> <li>type <span class="steno-transcript">A</span></li> <li>insert another tab</li> <li>make sure the next word will start with a capital letter</li> </ul> <p>The rule is the same when switching from an answer back to a question, but with an ending “<span class="steno-transcript">.</span>” and a beginning <span class="steno-transcript">Q</span>.</p> <p>Regarding this ending punctuation rule, PS says that the (presumably custom) software they use on their steno machines makes some kind of automatic determination about whether a question was asked or an answer given, and adds in appropriate question/answer punctuation as it deems appropriate.</p> <p>PS does say that this determination is not perfect, and hence you may end up with question marks at the end of answers, or periods that the end of questions (which may be correct for the sentence sometimes since lawyers can make statements, and witnesses can ask questions). The workaround to this issue, it would seem, is to just fix the punctuation <em><a href="https://en.wikipedia.org/wiki/Post_hoc">post-hoc</a></em> when you proofread your transcript.</p> <p>Plover itself has no built-in knowledge of any kind of “Q&amp;A-related ending punctuation automatic determination functionality”, so I attempted to mostly replicate the PS software logic into my custom Q&amp;A dictionary, but also make a few quality-of-life improvements. The aim was to provide sensible defaults for ending punctuation, but also allow for manual overriding for when you want to explicitly specify what they should be.</p> <p>With that in mind, here is a set of outlines I came up with to perform 2-Voice in a more flexible way:</p> <table class="steno-table"> <thead> <tr> <th>Stroke</th> <th class="centered-heading">Outline</th> <th class="centered-heading">Keymap</th> <th>Notes</th> </tr> </thead> <tr> <td>Default Question Bank</td> <td class="steno-outline"> <span>STKPWHR</span> </td> <td class="steno-font"> <span>STKPWHR</span> </td> <td> Ends previous witness sentence with "<span class="steno-transcript">.</span>" </td> </tr> <tr> <td>Initial Question Bank</td> <td class="steno-outline"> <span>STKPWHR*</span> </td> <td class="steno-font"> <span>STKPWHR*</span> </td> <td> Question is the first line of transcript; no previous sentence punctuation needed. </td> </tr> <tr> <td>Question Bank following question</td> <td class="steno-outline"> <span>STKPWHR-F</span> </td> <td class="steno-font"> <span>STKPWHR-F</span> </td> <td> Ends previous witness sentence with "<span class="steno-transcript">?</span>", for when witness asks a question. </td> </tr> <tr> <td>Interrupting Question Bank</td> <td class="steno-outline"> <span>STKPWHR-RB</span> </td> <td class="steno-font"> <span>STKPWHR-RB</span> </td> <td> Ends previous witness sentence with "<span class="steno-transcript">--</span>" for when lawyer interrupts witness. </td> </tr> <tr> <td>Question Bank following statement</td> <td class="steno-outline"> <span>STKPWHR-R</span> </td> <td class="steno-font"> <span>STKPWHR-R</span> </td> <td> Ends previous witness sentence with "<span class="steno-transcript">.</span>" (same as Default Question Bank, added for completeness' sake) </td> </tr> <tr> <td>Default Answer Bank</td> <td class="steno-outline"> <span>-FRPBLGTS</span> </td> <td class="steno-font"> <span>-FRPBLGTS</span> </td> <td> Ends previous lawyer sentence with "<span class="steno-transcript">?</span>" </td> </tr> <tr> <td>Answer Bank following statement</td> <td class="steno-outline"> <span>R-FRPBLGTS</span> </td> <td class="steno-font"> <span>R-FRPBLGTS</span> </td> <td> Ends previous sentence with "<span class="steno-transcript">.</span>", for when lawyer makes a statement. </td> </tr> <tr> <td>Interrupting Answer Bank</td> <td class="steno-outline"> <span>WR-FRPBLGTS</span> </td> <td class="steno-font"> <span>WR-FRPBLGTS</span> </td> <td> Ends previous sentence with "<span class="steno-transcript">--</span>" for when witness interrupts lawyer. </td> </tr> <tr> <td>Answer Bank following question</td> <td class="steno-outline"> <span>H-FRPBLGTS</span> </td> <td class="steno-font"> <span>H-FRPBLGTS</span> </td> <td> Ends previous sentence with "<span class="steno-transcript">?</span>" (same as Default Answer Bank, added for completeness' sake) </td> </tr> </table> <p>Some further notes on this set of outlines:</p> <ul> <li>In Q&amp;A, sentences would seem to only ever end in question marks, periods, or dashes. No exclamation marks, or any other type of punctuation, would seem to be used, so I did not create any outlines using them</li> <li>I chose the <code class="language-plaintext highlighter-rouge">H-</code> and <code class="language-plaintext highlighter-rouge">-F</code> keys to delineate ending questions since they are on the higher steno row, indicating the typical upward voice inflection of a spoken question, and vice versa for the <code class="language-plaintext highlighter-rouge">R-</code> and <code class="language-plaintext highlighter-rouge">-R</code> keys for statements</li> <li>I chose <code class="language-plaintext highlighter-rouge">-RB</code> for an ending dash as it marks the “sh” sound in the Plover “dash” outline (<code class="language-plaintext highlighter-rouge">TK-RB</code>), and use of <code class="language-plaintext highlighter-rouge">WR-</code> is just a mirror reflection of that</li> <li>No Initial Answer Bank outline was created since it would seem that there are never answers given without a question in Q&amp;A</li> <li> <p>If you are following along with <a href="https://github.com/paulfioravanti/steno_dictionaries/blob/main/dictionaries/q-and-a.json">my custom Q&amp;A dictionary</a>, you may notice that tabs and newline characters in the entries use the special <code class="language-plaintext highlighter-rouge">\t</code> and <code class="language-plaintext highlighter-rouge">\n</code> characters, rather than <a href="https://github.com/openstenoproject/plover/wiki/Dictionary-Format#keyboard-shortcuts">Plover keyboard shortcuts</a> like <code class="language-plaintext highlighter-rouge">{#tab}</code> and <code class="language-plaintext highlighter-rouge">{#return}</code>. For example, the entry for the Default Question Bank:</p> <p><code class="language-plaintext highlighter-rouge">"STKPWHR": "{.}{^\n\t^}{^Q^}{^\t^}{-|}"</code></p> <p>This is done simply to enable undoing the entire entry in one keystroke. Using Plover keyboard shortcuts makes what the <code class="language-plaintext highlighter-rouge">*</code> key can undo significantly less predictable.</p> <p>More details about the reasons behind this can be found in Plover’s documentation on <a href="https://github.com/openstenoproject/plover/wiki/Dictionary-Format#undoable-line-breaks-and-tabs">Undoable Line Breaks and Tabs</a>, and more details about all those other characters in the entry can be found in <a href="https://github.com/openstenoproject/plover/wiki/Dictionary-Format">Plover’s Dictionary Format</a> documentation.</p> </li> </ul> <h3 id="2-voice-demos">2-Voice Demos</h3> <p>In order to show my Q&amp;A dictionary in action, I have recorded a few videos of myself attempting to transcribe some of PS’s initial Q&amp;A lessons. Don’t expect stellar steno speeds (or much competence at all) in the videos below as I am still learning :sweat_smile:</p> <p>The letters on the light board behind the instructor indicate who is currently speaking:</p> <ul> <li><strong>P</strong>: Plaintiff/Prosecution</li> <li><strong>W</strong>: Witness</li> <li><strong>C</strong>: The Court (the Judge)</li> <li><strong>D</strong>: Defense</li> </ul> <p>There will be more variation in these lights once we get into 4-Voice.</p> <p>The following video is of PS’s very first Q&amp;A lesson, so the conversation is quite straightforward and slow. One thing to note, though, is that it begins with the questioner making a statement, necessitating use of the <code class="language-plaintext highlighter-rouge">R-FRPBLGTS</code> outline.</p> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/xpJNxsOjFZs" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Transcript: <a href="https://docs.google.com/document/d/1JymsW65Q2joKCSJxNd5HS4mOX6TznrN77fGRnJKrM6o/edit?usp=sharing"> Platinum Steno Theory Lesson 27 Q&amp;A #1 </a> </figcaption> </div> <blockquote> <p>See <a href="#appendix-a-formatting-the-record">Appendix A: Formatting the Record</a> for how I set up <a href="https://docs.google.com/">Google Docs</a> to produce official-looking(?) court transcripts.</p> </blockquote> <p>This next video is more of the same, but note that when the witness is asked to spell their name, a technique called “stitching” is used. As apposed to <a href="https://www.artofchording.com/sounds/fingerspelling.html#fingerspelling-alphabet">fingerspelling</a>, stitching deliberately separates letters with dashes to indicate that a speaker is verbally spelling out a word letter by letter.</p> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/y-RBNZCvQLM" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Transcript: <a href="https://docs.google.com/document/d/1NGcSJzptb7JiIB0VYg-Cv-zCHtONjtdJDgtXsMNY2J4/edit?usp=sharing"> Platinum Steno Theory Lesson 28 Q&amp;A #2 </a> </figcaption> </div> <blockquote> <p>See <a href="#appendix-b-stitching">Appendix B: Stitching</a> for more about stitching, and the custom dictionary I created for it.</p> </blockquote> <p>In the next video, note the use of the <code class="language-plaintext highlighter-rouge">STKPWHR-F</code> outline when the witness asks the lawyer a question, and <code class="language-plaintext highlighter-rouge">R-FRPBLGTS</code> for when the lawyer answers.</p> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/xl7xyRHTErY" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Transcript: <a href="https://docs.google.com/document/d/1AFuxkNO26ooOVC4zEnDHsi_CWlkOfcPuVp5nyZ8CQJY/edit?usp=sharing"> Platinum Steno Theory Lesson 29 Q&amp;A #3 </a> </figcaption> </div> <p>In the final 2-Voice demo, note the use of the <code class="language-plaintext highlighter-rouge">STKPWHR-RB</code> outline when the lawyer interrupts the witness.</p> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/6MwMO76V_zA" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Transcript: <a href="https://docs.google.com/document/d/1cTU4qt0HjiGPXOBd4eN-u9nkMpJAw1CWCaa53MXucn8/edit?usp=sharing"> Platinum Steno Theory Lesson 30 Q&amp;A #4 </a> </figcaption> </div> <p>Now that we have gotten the general rules of questioning and answering down, it is time to up the ante and introduce more <em><a href="https://en.wikipedia.org/wiki/Dramatis_personae">dramatis personae</a></em> to the conversation.</p> <h2 id="4-voice">4-Voice</h2> <div class="plover-for-the-record-image" style="width: 90%;"> <figure> <img src="/assets/images/2021-09-04/ace-attorney-courtroom-judge.jpg" alt="Phoenix, Franziska, and Judge"/> <figcaption> Photo by <a href="https://www.deviantart.com/mandyneko"> MandyNeko </a> on <a href="https://www.deviantart.com/mandyneko/art/Phoenix-Wright-Case-3-5-210215863"> Deviant Art </a> </figcaption> </figure> </div> <p>Courtroom cross-examination of a witness involves more than just a single legal team, but also the opposing side’s legal team, and the court itself. We are now beyond being able to sign in a speaker with just <span class="steno-transcript">Q</span> and <span class="steno-transcript">A</span>: we need to give the speakers names.</p> <p>So, let’s introduce the expanded cast of characters in our courtroom drama with their designated outlines:</p> <table class="steno-table"> <thead> <tr> <th>Person</th> <th class="centered-heading">Outline</th> <th class="centered-heading">Keymap</th> <th>Output</th> <th class="limited-width-heading">Notes</th> </tr> </thead> <tr> <td>Plaintiff Lawyer 1</td> <td class="steno-outline"> <span>STPHAO</span> </td> <td class="steno-font"> <span>STPHAO</span> </td> <td> <span class="steno-transcript">MR. STPHAO</span> </td> <td> Known as "Mr. Snoo" </td> </tr> <tr> <td>Plaintiff Lawyer 2</td> <td class="steno-outline"> <span>SKWRAO</span> </td> <td class="steno-font"> <span>SKWRAO</span> </td> <td> <span class="steno-transcript">MR. SKWRAO</span> </td> <td> Known as "Mr. Screw" </td> </tr> <tr> <td>The Court</td> <td class="steno-outline"> <span>STPHAOEUFPLT</span> </td> <td class="steno-font"> <span>STPHAOEUFPLT</span> </td> <td> <span class="steno-transcript">THE COURT</span> </td> <td> </td> </tr> <tr> <td>Defense Lawyer 1</td> <td class="steno-outline"> <span>EUFPLT</span> </td> <td class="steno-font"> <span>EUFPLT</span> </td> <td> <span class="steno-transcript">MR. EUFPLT</span> </td> <td> Known as "Mr. Ifpelt" </td> </tr> <tr> <td>Defense Lawyer 2</td> <td class="steno-outline"> <span>EURBGS</span> </td> <td class="steno-font"> <span>EURBGS</span> </td> <td> <span class="steno-transcript">MR. EURBGS</span> </td> <td> Known as "Mr. Irbs" </td> </tr> <tr> <td>Witness</td> <td class="steno-outline"> <span>W-PBS/W-PBS</span> </td> <td class="steno-font"> <span>W-PBS W-PBS</span> </td> <td> <span class="steno-transcript">THE WITNESS</span> </td> <td> This is PS's designated outline </td> </tr> <tr> <td>Witness</td> <td class="steno-outline"> <span>SKWRAOEURBGS</span> </td> <td class="steno-font"> <span>SKWRAOEURBGS</span> </td> <td> <span class="steno-transcript">THE WITNESS</span> </td> <td> This is my personal alternative outline </td> </tr> </table> <p>Some further notes on this set of outlines:</p> <ul> <li>The pronounced “names” for each of the lawyers (“Mr. Snoo” etc) come from PS, and would seem to indicate the colloquial way they are referred to based on the literal steno pronunciation of the outline</li> <li>In Q&amp;A, it is apparently rare to have multiple lawyers on any legal team, so you will mostly be using “Mr. Snoo” and “Mr. Ifpelt”, but the full set of outlines is included in the custom Q&amp;A dictionary for completeness’ sake</li> <li>Since lawyers are humans, and humans typically have names that are not <span class="steno-transcript">MR. STPHAO</span>, the output of the lawyer outlines can be considered placeholders. Before a Q&amp;A exercise starts, if you are given the lawyer names, you can just do a simple text find-and-replace in the Q&amp;A dictionary to change <span class="steno-transcript">MR. STPHAO</span> to <span class="steno-transcript">MS. WEXLER</span> etc where appropriate. The outlines for the judge and witness are never given specific names</li> <li>The formatting for the output of all of these outlines is uppercase. What is not shown above, but will be shown in an extract below, is that a tab is output before the name, and then a colon and a space is output following the name</li> <li>Plover theory has already assigned the word “irks” to Defense Lawyer 2’s <code class="language-plaintext highlighter-rouge">EURBGS</code> outline. So, <em><a href="https://definitions.uslegal.com/c/caveat-utilitor">Caveat Utilitor</a></em> that if you use the Q&amp;A outline, you will be mildly inconvenienced by needing to stroke the word “irks” as <code class="language-plaintext highlighter-rouge">EURBG/-S</code> or <code class="language-plaintext highlighter-rouge">EURBG/-Z</code></li> <li>PS’s witness outline of <code class="language-plaintext highlighter-rouge">W-PBS/W-PBS</code> felt a bit awkward to me, given the shapes of the other outlines, and having to stroke the same outline twice. The “lower row version” of The Court outline, <code class="language-plaintext highlighter-rouge">SKWRAOEURBGS</code>, was not assigned to anything in Plover, so it made sense to me to assign it to the witness: the judge sits on the “high” bench, and the witness sits in the “low” dock. Both sets of outlines are included in the custom Q&amp;A dictionary, so feel free to use whichever outline works for you</li> <li>Like the question and answer bank outlines, each outlines above comes with a set of variations that marks it as the first line of the transcript, or ends the previous sentence with a period, question mark, or dash. Check out the custom dictionary itself for all those details</li> </ul> <p>This is quite a lot to take in, so let’s have a look at an example that uses the new outlines above, the question/answer ones we have already seen, and one we will have a look at later:</p> <p class="steno-transcript"> BY MR. CHAMBERS:<br/> &nbsp;&nbsp;&nbsp;&nbsp;Q&nbsp;&nbsp;&nbsp;&nbsp;All right. Miss Smith, where do you currently live?<br/> &nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;&nbsp;&nbsp;&nbsp;1892 Spring Drive in Riverside.<br/> &nbsp;&nbsp;&nbsp;&nbsp;Q&nbsp;&nbsp;&nbsp;&nbsp;Did you live at that address in July of 2018?<br/> &nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;&nbsp;&nbsp;&nbsp;Yes, sir.<br/> &nbsp;&nbsp;&nbsp;&nbsp;MR. DUGO: Your Honor, I am having a difficult time hearing the witness.<br/> &nbsp;&nbsp;&nbsp;&nbsp;THE COURT: Miss Smith, I know it is tough, but have got to keep your voice up a little bit. It is hard to hear in this courtroom, okay?<br/> &nbsp;&nbsp;&nbsp;&nbsp;THE WITNESS: Yes, your Honor. </p> <ul> <li>The first line, <span class="steno-transcript">BY MR. CHAMBERS</span>, is a byline, and indicates that the lawyer Mr. Chambers is in charge of, or owns, the current line of questioning: his questions are marked by <span class="steno-transcript">Q</span> and the witness’s answers are marked by <span class="steno-transcript">A</span>. We will look more at bylines next up</li> <li>The next few lines are standard Q&amp;A that we have seen before, which use the question and answer bank outlines</li> <li>On line 6, the opposing lawyer, Mr. Dugo, interrupts the line of questioning. Mr. Dugo does not own the line of questioning, so he does not get a byline, but instead his statement is recorded inline. From this point, we have veered off the current line of questioning</li> <li>On line 7, the judge addresses the witness, with the question also recorded inline</li> <li>On line 8, the witness answers the question. An answer sign-in using <span class="steno-transcript">A</span> only occurs when the witness answers a question posed by the lawyer who owns the current line of questioning. Since the witness is answering the judge’s question, and not a question posed by Mr. Chambers, it is recorded inline as <span class="steno-transcript">THE WITNESS</span>. Whenever a witness talks out of turn without being asked a question, or is not directing an answer at the lawyer who owns the line of questioning (like at the judge here, or at the opposing lawyer), witness statements are recorded in this way</li> </ul> <h3 id="bylines">Bylines</h3> <div class="plover-for-the-record-image" style="width: 70%;"> <figure> <img src="/assets/images/2021-09-04/briefcase-battle.jpg" alt="Phoenix Wright and Miles Edgeworth briefcase battle cosplay"/> <figcaption> Photo by <a href="https://www.deviantart.com/kazzu"> KaZzu </a> on <a href="https://www.deviantart.com/kazzu/art/Briefcase-Battle-80339570"> Deviant Art </a> </figcaption> </figure> </div> <p>Bylines are used to indicate the lawyer that owns, or is in charge of, the current line of questioning to a witness. The outline that signs in a lawyer outputs in the following format:</p> <p class="steno-transcript"> BY &lt;TITLE&gt;. &lt;SURNAME&gt;:<br/> &nbsp;&nbsp;&nbsp;&nbsp;Q&nbsp;&nbsp;&nbsp;&nbsp;&lt;cursor&gt; </p> <p>It would seem that the convention is to output the lawyer’s title and surname, all in capital letters, and then output a question bank to kick off cross-examination. Like specific naming in outlines mentioned earlier, witnesses and judges also do not get bylines.</p> <p>Whenever the lawyer begins questioning, they are signed in with a byline. If they finish questioning, and a lawyer from the opposing legal team begins questioning, they are signed in separately. If, as you saw in the transcript above, a line of questioning is interrupted, when it re-begins again, the same lawyer gets re-signed in.</p> <p>Here is a set of outlines that can be used for the bylines of Plaintiff Lawyer 1 and Defense Lawyer 1 (check the custom Q&amp;A dictionary for details of the other lawyers, but they follow the same pattern):</p> <table class="steno-table"> <thead> <tr> <th>Stroke</th> <th class="centered-heading">Outline</th> <th class="centered-heading">Keymap</th> <th>Notes</th> </tr> </thead> <tr> <td>Plaintiff Lawyer 1 Initial Byline</td> <td class="steno-outline"> <span>STPHAO*</span> </td> <td class="steno-font"> <span>STPHAO*</span> </td> <td> Byline is the first line of transcript; no previous sentence punctuation needed. </td> </tr> <tr> <td>Plaintiff Lawyer 1 Byline following question</td> <td class="steno-outline"> <span>STPHAO*F</span> </td> <td class="steno-font"> <span>STPHAO*F</span> </td> <td> Ends previous sentence with "<span class="steno-transcript">?</span>" </td> </tr> <tr> <td>Plaintiff Lawyer 1 Byline following statement</td> <td class="steno-outline"> <span>STPHAO*R</span> </td> <td class="steno-font"> <span>STPHAO*R</span> </td> <td> Ends previous sentence with "<span class="steno-transcript">.</span>" </td> </tr> <tr> <td>Plaintiff Lawyer 1 Byline following interruption</td> <td class="steno-outline"> <span>STPHAO*RB</span> </td> <td class="steno-font"> <span>STPHAO*RB</span> </td> <td> Ends previous sentence with "<span class="steno-transcript">--</span>" </td> </tr> <tr> <td>Defense Lawyer 1 Initial Byline</td> <td class="steno-outline"> <span>*EUFPLT</span> </td> <td class="steno-font"> <span>*EUFPLT</span> </td> <td> Byline is the first line of transcript; no previous sentence punctuation needed. </td> </tr> <tr> <td>Defense Lawyer 1 Byline following question</td> <td class="steno-outline"> <span>H*EUFPLT</span> </td> <td class="steno-font"> <span>H*EUFPLT</span> </td> <td> Ends previous sentence with "<span class="steno-transcript">?</span>" </td> </tr> <tr> <td>Defense Lawyer 1 Byline following statement</td> <td class="steno-outline"> <span>R*EUFPLT</span> </td> <td class="steno-font"> <span>R*EUFPLT</span> </td> <td> Ends previous sentence with "<span class="steno-transcript">.</span>" </td> </tr> <tr> <td>Defense Lawyer 1 Byline following interruption</td> <td class="steno-outline"> <span>WR*EUFPLT</span> </td> <td class="steno-font"> <span>WR*EUFPLT</span> </td> <td> Ends previous sentence with "<span class="steno-transcript">--</span>" </td> </tr> </table> <h2 id="4-voice-demos">4-Voice Demos</h2> <p>Now that you have been formally introduced to the cast of characters in our courtroom drama, and how they interact with each other, let’s see how that all plays out in some video demos.</p> <p>The first demo shows a basic 4-Voice example using the lawyer name placeholders. Typically, you are given the lawyer names before beginning Q&amp;A so you can substitute them in.</p> <p>Note the switching of bylines as each lawyer begins and ends their lines of questioning. Also note that when the lawyers indicate that they have no further questions, since that statement is not a question directed at the witness, it is not transcribed with a <span class="steno-transcript">Q</span>, but as a named statement under their own byline.</p> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/vdQXdKy0im8" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Transcript: <a href="https://docs.google.com/document/d/1ggOzm94IAh5IRKLo14qdsvLnCHoBXoislsZitnF4xEQ/edit?usp=sharing"> Platinum Steno Theory Lesson 31 Q&amp;A #5 </a> </figcaption> </div> <p>The next video is more of the same, but actually using human names for the lawyers.</p> <div class="steno-video"> <div class="responsive-video-container"> <iframe src="https://www.youtube-nocookie.com/embed/ccxfO0W96wA" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe> </div> <figcaption> Transcript: <a href="https://docs.google.com/document/d/1gcfaP6JoHuu5u08zlapQqnDLA0aASk3iazaLQX0Rqko/edit?usp=sharing"> Platinum Steno Theory Lesson 32 Q&amp;A #6 </a> </figcaption> </div> <h2 id="adjournment-sine-die"><a href="https://en.wikipedia.org/wiki/Adjournment_sine_die">Adjournment <em>sine die</em></a></h2> <p>There is more to learn about Q&amp;A than I have been able to cover here, so if you are interested in delving even deeper, I would highly recommend checking out the following videos specifically from the <a href="https://www.youtube.com/playlist?list=PL85Y9t9lANyArY9uTBE_kmy2cT_ECSHvU">Platinum Steno Theory playlist</a>:</p> <ul> <li><a href="https://www.youtube.com/watch?v=tEgaJ7hWIvg&amp;list=PL85Y9t9lANyArY9uTBE_kmy2cT_ECSHvU&amp;index=61">Lesson 27 QA</a></li> <li><a href="https://www.youtube.com/watch?v=ABd5JcmOmg0&amp;list=PL85Y9t9lANyArY9uTBE_kmy2cT_ECSHvU&amp;index=70">Lesson 31</a></li> </ul> <p>The entire set of theory lessons is great, but if you want more information specifically on Q&amp;A, then I think these are the main two you want to watch.</p> <p>Even if you are not planning on becoming a court reporter, I think that doing these kinds of Q&amp;A exercises is great dictation practice in general, and I can see the ability to be able to manage conversation threads being applicable to captioning other kinds of conversational interactions: re-assign the outlines for lawyers, the judge, and the witness to panelists, an adjudicator, and the audience, and you can now transcribe a debate!</p> <p>If you end up giving it a try, and perhaps improve on the methods outlined here, be sure to reach out!</p> <blockquote> <p>Wondering where that cool steno keyboard font came from? Go get it from <a href="https://github.com/Kaoffie">Kathy</a>’s <a href="https://github.com/Kaoffie/steno_font">Steno Display Font Github repository</a>!</p> </blockquote> <h2 id="update-25-november-2021-immediate-responses">UPDATE 25 November 2021: Immediate Responses</h2> <p>I am now at the stage where I have completed PS’s <a href="https://www.youtube.com/playlist?list=PL85Y9t9lANyCGo0H6O5gSUlu3hT62XjrA">60WPM speed building video list</a> (it only took me <em>five</em> months, and I still do not think I am at 60WPM; the grind continues…), and during the Q&amp;A exercises there were enough repeated scenarios that came up that I felt a few new outlines were in order.</p> <p>They all revolve around providing immediate output for common responses to a <span class="steno-transcript">Q</span> or <span class="steno-transcript">A</span> upon switching speakers.</p> <h3 id="witnesses">Witnesses</h3> <p>Some common words and phrases that begin an answer from witnesses are:</p> <ul> <li>Affirmative statements: “Yes.”, “Yes, sir.”, “Yeah.”, “Correct.”, “Right.”, “Sure.”, “Uh-huh.”</li> <li>Negative statements: “No.”, “No, sir.”</li> <li>Unsure statements: “I don’t know.”</li> </ul> <p>Being able to immediately output any of these after an <span class="steno-transcript">A</span> would be really handy.</p> <blockquote> <p>Notice that all of the examples above are terminated with a period.</p> <p>According to PS, these initial statements in isolation are considered <em>the answer</em> to a question, with any further statements being extraneous information or just further elaborative context.</p> <p>So, where you may write “Yes, I did.” in standard English, in a legal transcript, this would instead be “Yes. I did.” (<a href="https://dictionary.cambridge.org/dictionary/english/ymmv">YMMV</a>)</p> </blockquote> <p>Given the examples above, here is the set of new outlines that I added to <a href="https://github.com/paulfioravanti/steno_dictionaries/blob/main/dictionaries/q-and-a.json">my custom Q&amp;A dictionary</a> for use with a witness:</p> <table class="steno-table"> <thead> <tr> <th>Stroke</th> <th class="centered-heading">Outline</th> <th class="centered-heading">Keymap</th> <th>Notes</th> </tr> </thead> <tr> <td>"Yes." and elaborate</td> <td class="steno-outline"> <span>KWR-FRPBLGTS</span> </td> <td class="steno-font"> <span>KWR-FRPBLGTS</span> </td> <td> Derived from the <code>KWR</code> outline for the letter "Y" for "yes", then the answer bank. </td> </tr> <tr> <td>"Yes, sir." and elaborate</td> <td class="steno-outline"> <span>SKWR-FRPBLGTS</span> </td> <td class="steno-font"> <span>SKWR-FRPBLGTS</span> </td> <td> Derived from <code>KWR</code> with an inverted <code>S</code> to make <code>YS</code> for "yes, sir", then the answer bank. </td> </tr> <tr> <td>"Yeah." and elaborate</td> <td class="steno-outline"> <span>KWREFRPBLGTS</span> </td> <td class="steno-font"> <span>KWREFRPBLGTS</span> </td> <td> Derived from Plover's <code>KWR*E</code> outline for "yeah", then the answer bank. </td> </tr> <tr> <td>"Correct." and elaborate</td> <td class="steno-outline"> <span>KR-FRPBLGTS</span> </td> <td class="steno-font"> <span>KR-FRPBLGTS</span> </td> <td> Derived from Plover's <code>KREBGT</code> outline for "correct", then the answer bank. </td> </tr> <tr> <td>"Right." and elaborate</td> <td class="steno-outline"> <span>TR-FRPBLGTS</span> </td> <td class="steno-font"> <span>TR-FRPBLGTS</span> </td> <td> Derived from a truncated and inverted version of Plover's <code>RAOEUT</code> outline for "right", then the answer bank. </td> </tr> <tr> <td>"Sure." and elaborate</td> <td class="steno-outline"> <span>SH-FRPBLGTS</span> </td> <td class="steno-font"> <span>SH-FRPBLGTS</span> </td> <td> Derived from a truncated version of Plover's <code>SHUR</code> outline for "sure", then the answer bank. </td> </tr> <tr> <td>"Uh-huh." and elaborate</td> <td class="steno-outline"> <span>HUFRPBLGTS</span> </td> <td class="steno-font"> <span>HUFRPBLGTS</span> </td> <td> Awkwardly derived from Plover's <code>*U/H*U</code> outline for "uh-huh", then the answer bank. </td> </tr> <tr> <td>"No.", and elaborate</td> <td class="steno-outline"> <span>TPH-FRPBLGTS</span> </td> <td class="steno-font"> <span>TPH-FRPBLGTS</span> </td> <td> Derived from the <code>TPH</code> outline for the letter "N" for "no", then the answer bank. </td> </tr> <tr> <td>"No, sir.", and elaborate</td> <td class="steno-outline"> <span>STPH-FRPBLGTS</span> </td> <td class="steno-font"> <span>STPH-FRPBLGTS</span> </td> <td> Derived from <code>TPH</code> with an inverted <code>S</code> to make <code>NS</code> for "no, sir", then the answer bank. </td> </tr> <tr> <td>"I don't know.", and elaborate</td> <td class="steno-outline"> <span>KWROEFRPBLGTS</span> </td> <td class="steno-font"> <span>KWROEFRPBLGTS</span> </td> <td> Derived partly from Plover's <code>KWROEPB</code> outline for "I don't know", then the answer bank. </td> </tr> </table> <p>Sometimes, the statements above are the only thing a witness says before the lawyer begins the next question.</p> <p>Therefore, I have also added complementary <code class="language-plaintext highlighter-rouge">*</code>-flagged outlines for each of the examples above that instantly yield control back to the questioner once the answer has been given, and output a new <span class="steno-transcript">Q</span>.</p> <p>Here is a sample:</p> <table class="steno-table"> <thead> <tr> <th>Stroke</th> <th class="centered-heading">Outline</th> <th class="centered-heading">Keymap</th> <th>Notes</th> </tr> </thead> <tr> <td>"Yes." and yield control</td> <td class="steno-outline"> <span>KWR*FRPBLGTS</span> </td> <td class="steno-font"> <span>KWR*FRPBLGTS</span> </td> <td> <code>*</code>-flagged version of <code>KWR-FRPBLGTS</code>. </td> </tr> <tr> <td>"No.", and yield control</td> <td class="steno-outline"> <span>TPH*FRPBLGTS</span> </td> <td class="steno-font"> <span>TPH*FRPBLGTS</span> </td> <td> <code>*</code>-flagged version of <code>TPH-FRPBLGTS</code>. </td> </tr> </table> <p>See the Q&amp;A dictionary file for full set.</p> <h3 id="lawyers">Lawyers</h3> <p>For lawyers, things are a bit simpler. The only common phrases I have noticed said after a witness answers are:</p> <ul> <li>Answer acknowledgements: “Okay.”, “All right.”</li> <li>Question versions of those acknowledgements: “Okay?”, “All right?”</li> </ul> <p>The question versions, being questions, will immediately yield control over to the witness to answer. And so, here is a set of outlines for use with a lawyer:</p> <table class="steno-table"> <thead> <tr> <th>Stroke</th> <th class="centered-heading">Outline</th> <th class="centered-heading">Keymap</th> <th>Notes</th> </tr> </thead> <tr> <td>"Okay." and elaborate</td> <td class="steno-outline"> <span>STKPWHR-BG</span> </td> <td class="steno-font"> <span>STKPWHR-BG</span> </td> <td> Derived from the question bank, and then <code>-BG</code> for a "K" sound. </td> </tr> <tr> <td>"Okay?", and yield control</td> <td class="steno-outline"> <span>STKPWHR*BG</span> </td> <td class="steno-font"> <span>STKPWHR*BG</span> </td> <td> <code>*</code>-flagged version of <code>STKPWHR-BG</code>. </td> </tr> <tr> <td>"All right." and elaborate</td> <td class="steno-outline"> <span>STKPWHR-RT</span> </td> <td class="steno-font"> <span>STKPWHR-RT</span> </td> <td> Derived from the question bank, and then <code>-RT</code> for a truncated version of Plover's <code>RAOEUT</code> outline for "right". </td> </tr> <tr> <td>"All right?" and yield control</td> <td class="steno-outline"> <span>STKPWHR*RT</span> </td> <td class="steno-font"> <span>STKPWHR*RT</span> </td> <td> <code>*</code>-flagged version of <code>STKPWHR-RT</code>. </td> </tr> </table> <p>As before, see <a href="https://github.com/paulfioravanti/steno_dictionaries/blob/main/dictionaries/q-and-a.json">my custom Q&amp;A dictionary</a> file for these details, and keep a periodic eye on it on Github as that is where I will make any updates if more come to mind.</p> <hr/> <h2 id="appendix-a-formatting-the-record">Appendix A: Formatting the Record</h2> <p>If I was going to attempt these Q&amp;A exercises, I figured that I should at least also make an effort to make the resulting transcriptions feel somewhat professional, and mimic the official-looking transcripts PS provides for reference.</p> <p>I chose <a href="https://docs.google.com/">Google Docs</a> to do this due to its accessibility to everyone, but I am sure that you could recreate something similar on your favourite text editor or word processor software if you wanted.</p> <p>Aside from the font and text-spacing formatting rules mentioned in the post, the court transcripts required for PS’s lessons also need to obey the following rules:</p> <ul> <li>Lines must be double-spaced</li> <li>There should be a header with the document name</li> <li>There should be a footer with the page number</li> <li>Line numbers must be visible on the page, with a maximum 25 lines per page</li> <li>Line numbers must restart on each page</li> <li>Line numbers must be added all the way to the end of the page, even if there is text only part-way through the page</li> </ul> <p>Fulfilling all the formatting requirements in Google Docs necessitated the following settings:</p> <ul> <li><strong>Line Spacing</strong>: Format Menu &gt; Line &amp; paragraph spacing &gt; Double</li> <li><strong>Font</strong> <ul> <li>Choose <span class="steno-transcript">Courier New</span> from the font dropdown menu</li> <li>Choose a size of 12.5 (this size and the line-spacing combination will, for the most part, ensure that you will have 25 lines per page)</li> </ul> </li> <li><strong>Header</strong>: <ul> <li>Insert Menu &gt; Headers and footers &gt; Header</li> <li>Manually type in the document name</li> </ul> </li> <li><strong>Footer</strong>: Insert Menu &gt; Page Numbers &gt; Choose visual option that puts the page number on the bottom right-hand side of the document</li> <li><strong>Indentations</strong>: Left Indent: 0.5cm, Right Indent: 15.5cm</li> <li><strong>Line Numbers</strong>: <ul> <li>Not built in to Google Docs, and hence requires the free <a href="https://github.com/Line-Numbers-for-Google-Docs/chrome-extension">Line Numbers for Google Docs plugin</a> (if the plugin is not available on the Google Chrome Store, follow <a href="https://github.com/Line-Numbers-for-Google-Docs/chrome-extension/issues/33#issuecomment-894842650">these instructions</a> to install it)</li> <li>Once installed, refresh your page and you should see its icon added to the top right section of your Google Docs page. Click on it to bring up the Line Numbering format menu</li> <li><strong>Numbering</strong>: <ul> <li>Check Show Numbering</li> <li>Check Restart Each Page</li> <li>Check Count by Blank Lines</li> </ul> </li> <li><strong>Style</strong>: <ul> <li>Size: 12</li> <li>Color: 000000</li> </ul> </li> </ul> </li> </ul> <p>Once you have done all of the above, you should have something approximating what I have in my documents. Feel free to further change and customise as you wish!</p> <h2 id="appendix-b-stitching">Appendix B: Stitching</h2> <p>When someone verbally spells words during Q&amp;A, like when they spell their name for the record, s-t-i-t-c-h-i-n-g the words is the way to show this.</p> <p><a href="https://raw.githubusercontent.com/openstenoproject/plover/master/plover/assets/main.json">Plover’s main dictionary</a> has some support for stitching via the following set of outlines (note that <code class="language-plaintext highlighter-rouge">&amp;</code> is the <a href="https://github.com/openstenoproject/plover/wiki/Dictionary-Format#glue-operator-numbers-fingerspelling">Plover glue operator</a> to allow the strokes to “stick together”):</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"AFPL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;a-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"PW-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;b-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"KR-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;c-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"TK-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;d-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"EFPL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;e-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"TKPW-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;g-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"H-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;h-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"SKWR-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;j-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"K-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;k-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"HR-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;l-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"PH-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;m-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"TPH-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;n-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"OPLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;o-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"P-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;p-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"KW-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;q-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"R-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;r-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"S-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;s-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"T-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;t-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"SR-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;v-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"W-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;w-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"KP-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;x-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"KWR-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;y-}"</span><span class="p">,</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>You may have noticed that there are a few letters absent here. I am not sure why they are missing, but I ended up adding some of the lost letters to my own <a href="https://github.com/paulfioravanti/steno_dictionaries/blob/main/dictionaries/stitching.json">custom stitching dictionary</a> using the following outlines:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"A*EUPLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;a-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"AO*EUPLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;i-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"AO*UPLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;u-}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"STKPW-PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;z-}"</span><span class="p">,</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>A few notes about these entries:</p> <ul> <li>Yes, there is already an outline for <code class="language-plaintext highlighter-rouge">{&amp;a-}</code>, but I wanted one that followed the <code class="language-plaintext highlighter-rouge">-PLT</code> pattern like the rest. <code class="language-plaintext highlighter-rouge">APLT</code> was already taken for “amount”, so I used <code class="language-plaintext highlighter-rouge">A*EUPLT</code> with the long “a” sound instead</li> <li>For <code class="language-plaintext highlighter-rouge">{&amp;i-}</code> and <code class="language-plaintext highlighter-rouge">{&amp;u-}</code>, I wanted to use <code class="language-plaintext highlighter-rouge">EUPLT</code> and <code class="language-plaintext highlighter-rouge">UPLT</code>, but they were also already taken for “implement” and “ultimate”, respectively, so they, too, got elongated vowel versions of the outlines I originally wanted</li> </ul> <p>That still leaves <code class="language-plaintext highlighter-rouge">{&amp;f-}</code> missing, though. The outline I wanted to use was <code class="language-plaintext highlighter-rouge">TP-PLT</code>, to match the <code class="language-plaintext highlighter-rouge">-PLT</code> pattern of the other stitching outlines, but it was already reserved for the period (<code class="language-plaintext highlighter-rouge">{.}</code>). Now, Plover already assigns 32(!) outlines to <code class="language-plaintext highlighter-rouge">{.}</code>, so, I figured it wouldn’t miss the <code class="language-plaintext highlighter-rouge">TP-PLT</code> outline if I overrode it and gave it to <code class="language-plaintext highlighter-rouge">{&amp;f-}</code>.</p> <p>This ended up being the catalyst to create my <a href="https://github.com/paulfioravanti/steno_dictionaries/blob/7191ce5a00/dictionaries/overrides/briefs.json">custom brief overrides dictionary</a>, for cases where I have a difference of opinion from Plover’s outline allocation, and want to assign an outline to some other word.</p> <p>For good measure, I also snuck in <code class="language-plaintext highlighter-rouge">"AO*EPLT": "{&amp;e-}"</code> to the overrides dictionary, just to make sure that <em>all</em> stitching entries would follow the <code class="language-plaintext highlighter-rouge">-PLT</code> pattern. Plover assigns <code class="language-plaintext highlighter-rouge">AO*EPLT</code> to “empty”, but since I do not associate the word “empty” with a long “e”, I was happy to re-assign the outline.</p> <h3 id="flipping-the-script">Flipping the Script</h3> <p>After using the stitching outlines above for a little while, I came across the following issue: whenever a speaker finished spelling their name, I would be left with a trailing hyphen (<code class="language-plaintext highlighter-rouge">-</code>) that I would have to manually delete. In some cases, it was just not possible to know in advance what the final letter of a name would be until it was said, and it would be too late to switch out the final letter with a standard fingerspelled letter.</p> <p>When it comes to spelling spoken words, we definitely know when the beginning is, but not necessarily when the end will be. So, I thought perhaps the stitching outlines could work in the same way: use a fingerspelled letter for the first letter, and use <em>backwards</em>-hyphened stitching for the rest of the letters, allowing a stitched word to finish at any time.</p> <p>So, I came up with the following set of outlines that use a <code class="language-plaintext highlighter-rouge">*PLT</code> suffix, which are spread across my custom stitching and brief overrides dictionaries, but are presented here as a single set for ease of viewing:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"A*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-a}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"PW*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-b}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"KR*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-c}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"TK*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-d}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"*EPLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-e}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"TP*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-f}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"TKPW*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-g}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"H*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-h}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"*EUPLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-i}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"SKWR*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-j}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"K*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-k}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"HR*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-l}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"PH*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-m}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"TPH*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-n}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"O*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-o}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"P*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-p}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"KW*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-q}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"R*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-r}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"S*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-s}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"T*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-t}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"*UPLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-u}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"SR*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-v}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"W*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-w}"</span><span class="w">
  </span><span class="nl">"KP*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-x}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"KWR*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-y}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"STKPW*PLT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{&amp;-z}"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Which ever way you prefer to do steno stitching (if you even need to do it at all!), hopefully this has given you some food for thought on some potential options to get it working. If neither of these options suit your tastes, perhaps <a href="https://twitter.com/morinted">Ted Morin</a>’s <a href="https://github.com/morinted/plover_stitching">Plover Stitching Plugin</a> may provide a more viable option.</p> <p>G-o-o-d L-u-c-k!</p> <h2 id="update-5-december-2021-plover-stitching-plugin-recommended">UPDATE 5 December 2021: Plover Stitching Plugin Recommended</h2> <p>Forget the outlines in the dictionary above: it’s definitely better, and more straightforward, to use the <a href="https://github.com/morinted/plover_stitching">Plover Stitching Plugin</a>.</p> <p>You can see how I’ve leveraged it in my <a href="https://github.com/paulfioravanti/steno_dictionaries/blob/main/dictionaries/stitching.json">custom stitching dictionary</a> and in my <a href="https://github.com/paulfioravanti/steno-dictionaries/tree/main/dictionaries/override">Plover overrides</a>.</p>]]></content><author><name>Paul Fioravanti</name><email>paul@paulfioravanti.com</email><uri>https://www.paulfioravanti.com</uri></author><category term="plover"/><category term="stenography"/><category term="court-reporting"/><category term="q-and-a"/><category term="cosplay"/><category term="georgi"/><summary type="html"><![CDATA[Want to try recording legal testimony with just your computer keyboard? With Plover, court is in session.]]></summary></entry></feed>